/* The following code was generated by JFlex 1.4.3 on 8/20/15 12:12 PM */

package org.intellij.markdown.lexer;

import org.intellij.markdown.IElementType;
import org.intellij.markdown.MarkdownTokenTypes;

import java.util.HashSet;
import java.util.Set;
import java.util.Stack;

/* Auto generated File */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/20/15 12:12 PM from the specification file
 * <tt>/Users/valich/work/intellij-markdown/src/org/intellij/markdown/lexer/markdown.flex</tt>
 */
public class _MarkdownLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int CODE = 8;
  public static final int AFTER_LINE_START = 4;
  public static final int TAG_START = 2;
  public static final int YYINITIAL = 0;
  public static final int PARSE_DELIMITED = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\4\1\0\1\3\1\5\22\0\1\3\1\17\1\6"+
    "\1\12\2\45\1\11\1\10\1\47\1\47\1\46\1\45\1\44\1\20"+
    "\1\43\1\40\12\1\1\34\1\15\1\16\1\37\1\21\1\22\1\42"+
    "\1\31\1\25\1\27\1\30\2\25\15\23\1\32\3\23\1\24\2\23"+
    "\1\26\1\7\1\33\1\41\1\35\1\36\6\14\21\2\1\13\2\2"+
    "\1\45\1\41\2\45\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\3\1\1\2\2\3\1\4\1\5\1\6\2\3"+
    "\1\6\1\7\1\10\1\11\1\12\4\13\3\0\1\14"+
    "\1\15\11\0\1\14\1\16\5\0\1\17\32\0\1\20"+
    "\2\0\1\21\3\0\1\17\5\0\1\20\26\0\1\20"+
    "\24\0\1\17\2\0\1\17\76\0\1\17\u0172\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[566];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\240"+
    "\0\240\0\u0118\0\u0140\0\u0168\0\240\0\u0190\0\u01b8\0\u01e0"+
    "\0\240\0\240\0\240\0\u0208\0\240\0\u0230\0\u0190\0\u01e0"+
    "\0\u0258\0\u0118\0\u0280\0\240\0\u02a8\0\u02d0\0\u02f8\0\u0320"+
    "\0\u0348\0\u0370\0\u0398\0\u03c0\0\u0230\0\u03e8\0\u0280\0\240"+
    "\0\u0410\0\u0438\0\u0460\0\u0488\0\u04b0\0\240\0\u04d8\0\u0500"+
    "\0\u0528\0\u0550\0\u0578\0\u05a0\0\u05c8\0\u05f0\0\u0618\0\u0640"+
    "\0\u0668\0\u0690\0\u06b8\0\u06e0\0\u0708\0\u0730\0\u0758\0\u0780"+
    "\0\u07a8\0\u07d0\0\u07f8\0\u0820\0\u0848\0\u0870\0\u0898\0\u08c0"+
    "\0\240\0\u08e8\0\u0910\0\240\0\u0938\0\u0960\0\u0988\0\u0938"+
    "\0\u09b0\0\u09d8\0\u0a00\0\u0a28\0\u0a50\0\u05a0\0\u0a78\0\u0aa0"+
    "\0\u0ac8\0\u0af0\0\u0b18\0\u0b40\0\u0b68\0\u0b90\0\u0bb8\0\u0be0"+
    "\0\u0c08\0\u0c30\0\u0c58\0\u0c80\0\u0ca8\0\u0cd0\0\u0cf8\0\u0d20"+
    "\0\u0d48\0\u0d70\0\u0d98\0\u0dc0\0\u0938\0\u0de8\0\u0e10\0\u0e38"+
    "\0\u0e60\0\u0e88\0\u0eb0\0\u0ed8\0\u0f00\0\u0f28\0\u0f50\0\u0f78"+
    "\0\u0fa0\0\u0fc8\0\u0ff0\0\u1018\0\u1040\0\u1068\0\u1090\0\u10b8"+
    "\0\u10e0\0\u0b40\0\u1108\0\u1130\0\u0b68\0\u1158\0\u1180\0\u11a8"+
    "\0\u11d0\0\u11f8\0\u1220\0\u1248\0\u1270\0\u1298\0\u12c0\0\u12e8"+
    "\0\u1310\0\u1338\0\u1360\0\u1388\0\u13b0\0\u13d8\0\u1400\0\u1428"+
    "\0\u1450\0\u1478\0\u14a0\0\u14c8\0\u14f0\0\u1518\0\u1540\0\u1568"+
    "\0\u1590\0\u15b8\0\u15e0\0\u1608\0\u1630\0\u1658\0\u1680\0\u16a8"+
    "\0\u16d0\0\u16f8\0\u1720\0\u1748\0\u1770\0\u1798\0\u17c0\0\u17e8"+
    "\0\u1810\0\u1838\0\u1860\0\u1888\0\u18b0\0\u18d8\0\u1900\0\u1928"+
    "\0\u1950\0\u1978\0\u19a0\0\u19c8\0\u19f0\0\u1a18\0\u1a40\0\u1a68"+
    "\0\u1a90\0\u1ab8\0\u1ae0\0\u16d0\0\u1b08\0\u1b30\0\u1b58\0\u1b80"+
    "\0\u1ba8\0\u1bd0\0\u1bf8\0\u1c20\0\u1c48\0\u1c70\0\u1c98\0\u1cc0"+
    "\0\u1ce8\0\u1d10\0\u1d38\0\u1d60\0\u1d88\0\u1db0\0\u1dd8\0\u1e00"+
    "\0\u1e28\0\u1e50\0\u1e78\0\u1ea0\0\u1ec8\0\u1ef0\0\u1f18\0\u1f40"+
    "\0\u1f68\0\u1f90\0\u1fb8\0\u1fe0\0\u2008\0\u2030\0\u2058\0\u2080"+
    "\0\u20a8\0\u20d0\0\u20f8\0\u2120\0\u2148\0\u2170\0\u2198\0\u21c0"+
    "\0\u21e8\0\u2210\0\u2238\0\u2260\0\u2288\0\u22b0\0\u22d8\0\u2300"+
    "\0\u2328\0\u2350\0\u2378\0\u23a0\0\u23c8\0\u23f0\0\u2418\0\u2440"+
    "\0\u2468\0\u2490\0\u24b8\0\u24e0\0\u2508\0\u2530\0\u2558\0\u2580"+
    "\0\u25a8\0\u25d0\0\u25f8\0\u2620\0\u2648\0\u2670\0\u2698\0\u26c0"+
    "\0\u26e8\0\u2710\0\u2738\0\u2760\0\u2788\0\u27b0\0\u27d8\0\u2800"+
    "\0\u2828\0\u2850\0\u2878\0\u28a0\0\u28c8\0\u28f0\0\u2918\0\u2940"+
    "\0\u2968\0\u2990\0\u29b8\0\u29e0\0\u2a08\0\u2a30\0\u2a58\0\u2a80"+
    "\0\u2aa8\0\u2ad0\0\u2af8\0\u2b20\0\u2b48\0\u2b70\0\u2b98\0\u2bc0"+
    "\0\u2be8\0\u2c10\0\u2c38\0\u2c60\0\u2c88\0\u2cb0\0\u2cd8\0\u2d00"+
    "\0\u2d28\0\u2d50\0\u2d78\0\u2da0\0\u2dc8\0\u2df0\0\u2e18\0\u2e40"+
    "\0\u2e68\0\u2e90\0\u2eb8\0\u2ee0\0\u2f08\0\u2f30\0\u2f58\0\u2f80"+
    "\0\u2fa8\0\u2fd0\0\u2ff8\0\u3020\0\u3048\0\u3070\0\u3098\0\u30c0"+
    "\0\u30e8\0\u3110\0\u3138\0\u3160\0\u3188\0\u31b0\0\u31d8\0\u3200"+
    "\0\u3228\0\u3250\0\u3278\0\u32a0\0\u32c8\0\u32f0\0\u3318\0\u3340"+
    "\0\u3368\0\u3390\0\u33b8\0\u33e0\0\u3408\0\u3430\0\u3458\0\u3480"+
    "\0\u34a8\0\u34d0\0\u34f8\0\u3520\0\u3548\0\u3570\0\u3598\0\u35c0"+
    "\0\u35e8\0\u3610\0\u3638\0\u3660\0\u3688\0\u36b0\0\u36d8\0\u3700"+
    "\0\u3728\0\u3750\0\u3778\0\u37a0\0\u37c8\0\u37f0\0\u3818\0\u3840"+
    "\0\u3868\0\u3890\0\u38b8\0\u38e0\0\u3908\0\u3930\0\u3958\0\u3980"+
    "\0\u39a8\0\u39d0\0\u39f8\0\u3a20\0\u3a48\0\u3a70\0\u3a98\0\u3ac0"+
    "\0\u3ae8\0\u3b10\0\u3b38\0\u3b60\0\u3b88\0\u3bb0\0\u3bd8\0\u3c00"+
    "\0\u3c28\0\u3c50\0\u3c78\0\u3ca0\0\u3cc8\0\u3cf0\0\u3d18\0\u3d40"+
    "\0\u3d68\0\u3d90\0\u3db8\0\u3de0\0\u3e08\0\u3e30\0\u3e58\0\u3e80"+
    "\0\u3ea8\0\u3ed0\0\u3ef8\0\u3f20\0\u3f48\0\u3f70\0\u3f98\0\u3fc0"+
    "\0\u3fe8\0\u4010\0\u4038\0\u4060\0\u4088\0\u40b0\0\u40d8\0\u4100"+
    "\0\u4128\0\u4150\0\u4178\0\u41a0\0\u41c8\0\u41f0\0\u4218\0\u4240"+
    "\0\u4268\0\u4290\0\u42b8\0\u42e0\0\u4308\0\u4330\0\u4358\0\u4380"+
    "\0\u43a8\0\u43d0\0\u43f8\0\u4420\0\u4448\0\u4470\0\u4498\0\u44c0"+
    "\0\u44e8\0\u4510\0\u4538\0\u4560\0\u4588\0\u45b0\0\u45d8\0\u4600"+
    "\0\u4628\0\u4650\0\u4678\0\u46a0\0\u46c8\0\u46f0\0\u4718\0\u4740"+
    "\0\u4768\0\u4790\0\u47b8\0\u47e0\0\u4808\0\u4830\0\u4858\0\u4880"+
    "\0\u48a8\0\u48d0\0\u48f8\0\u4920\0\u4948\0\u4970\0\u4998\0\u49c0"+
    "\0\u49e8\0\u4a10\0\u4a38\0\u4a60\0\u4a88\0\u4ab0\0\u4ad8\0\u4b00"+
    "\0\u4b28\0\u4b50\0\u4b78\0\u4ba0\0\u4bc8\0\u4bf0\0\u4c18\0\u4c40"+
    "\0\u4c68\0\u4c90\0\u4cb8\0\u4ce0\0\u4d08\0\u4d30\0\u4d58\0\u4d80"+
    "\0\u4da8\0\u4dd0\0\u4df8\0\u4e20\0\u4e48\0\u4e70\0\u4e98\0\u4ec0"+
    "\0\u4ee8\0\u4f10\0\u4f38\0\u4f60\0\u4f88\0\u4fb0\0\u4fd8\0\u5000"+
    "\0\u5028\0\u5050\0\u5078\0\u50a0\0\u50c8\0\u50f0\0\u5118\0\u5140"+
    "\0\u5168\0\u5190\0\u51b8\0\u51e0\0\u5208\0\u5230\0\u5258\0\u5280"+
    "\0\u52a8\0\u52d0\0\u52f8\0\u5320\0\u5348\0\u5370\0\u5398\0\u53c0"+
    "\0\u53e8\0\u5410\0\u5438\0\u5460\0\u5488\0\u54b0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[566];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\5\1\6\1\5\1\7\13\5\1\10\26\5\4\11"+
    "\1\0\44\11\2\12\1\13\2\14\1\15\1\16\1\15"+
    "\1\17\1\11\2\12\1\11\1\20\1\21\1\11\1\15"+
    "\1\11\3\12\1\15\4\12\1\15\1\22\1\23\1\24"+
    "\7\11\1\23\1\15\3\25\1\26\1\5\1\7\1\25"+
    "\1\27\6\25\1\30\16\25\1\23\1\24\7\25\1\23"+
    "\1\25\53\0\1\31\1\5\1\7\13\0\1\10\32\0"+
    "\1\5\44\0\2\12\1\32\7\0\2\12\6\0\3\12"+
    "\1\0\4\12\20\0\1\13\2\14\27\0\1\33\10\0"+
    "\1\33\4\0\3\14\50\0\5\34\3\0\4\34\4\0"+
    "\1\34\4\0\3\34\1\35\1\0\1\34\1\0\6\34"+
    "\1\0\2\36\7\0\1\37\2\36\6\0\3\36\1\0"+
    "\4\36\16\0\1\40\1\41\5\0\3\40\2\41\2\0"+
    "\1\42\1\40\1\0\1\43\3\41\1\0\4\41\2\0"+
    "\3\40\1\44\1\40\1\0\1\40\1\0\2\40\37\0"+
    "\1\24\14\0\1\45\31\0\1\33\10\0\1\33\4\0"+
    "\1\46\1\5\1\7\13\0\1\10\31\0\1\47\102\0"+
    "\1\35\12\0\2\36\10\0\2\36\1\50\5\0\3\36"+
    "\1\0\4\36\16\0\1\51\11\0\1\52\10\0\1\52"+
    "\24\0\2\40\5\0\5\40\2\0\2\40\1\0\4\40"+
    "\1\0\4\40\2\0\5\40\1\53\1\40\1\0\2\40"+
    "\2\0\1\54\1\41\1\55\4\0\3\40\2\41\2\0"+
    "\2\40\1\56\1\40\3\41\1\0\4\41\1\0\1\57"+
    "\3\40\1\60\1\40\1\53\1\40\1\0\2\40\2\0"+
    "\2\40\5\0\5\40\2\0\1\40\1\61\1\0\1\40"+
    "\3\62\1\63\4\62\2\0\5\40\1\53\1\40\1\0"+
    "\2\40\1\0\1\64\2\43\5\64\5\43\2\64\2\43"+
    "\1\64\1\65\3\43\1\64\4\43\2\64\5\43\1\66"+
    "\1\43\1\64\2\43\1\64\1\0\1\40\1\67\5\0"+
    "\3\40\2\67\2\0\2\40\1\0\1\40\3\67\1\0"+
    "\4\67\2\0\5\40\1\53\1\40\1\0\2\40\4\0"+
    "\1\70\1\5\1\7\13\0\1\10\27\0\1\71\13\0"+
    "\1\50\33\0\1\72\12\0\1\72\10\0\1\72\1\0"+
    "\3\72\17\0\2\73\10\0\2\73\6\0\3\73\1\0"+
    "\4\73\16\0\2\54\1\55\4\0\3\40\2\54\2\0"+
    "\2\40\1\56\1\40\3\54\1\0\4\54\2\0\3\40"+
    "\1\60\1\40\1\53\1\40\1\0\2\40\3\0\1\74"+
    "\1\55\7\0\2\74\3\0\1\74\1\56\1\0\3\74"+
    "\1\0\4\74\1\0\1\74\3\0\1\75\7\0\3\76"+
    "\2\0\11\76\1\0\2\76\1\0\26\76\1\0\2\40"+
    "\5\0\5\40\2\0\2\40\1\56\4\40\1\0\4\40"+
    "\2\0\5\40\1\53\1\40\1\0\2\40\2\0\2\40"+
    "\5\0\5\40\2\0\1\40\1\77\1\0\4\40\1\0"+
    "\4\40\2\0\5\40\1\53\1\40\1\0\2\40\2\0"+
    "\2\40\1\100\4\0\5\40\2\0\2\40\1\0\1\40"+
    "\3\62\1\0\4\62\2\0\5\40\1\53\1\40\1\0"+
    "\2\40\30\0\1\101\20\0\22\64\1\102\26\64\2\43"+
    "\5\64\5\43\2\64\2\43\1\56\4\43\1\64\4\43"+
    "\2\64\5\43\1\66\1\43\1\64\2\43\2\64\2\103"+
    "\10\64\2\103\5\64\1\102\3\103\1\64\4\103\15\64"+
    "\1\0\2\67\1\104\4\0\3\40\2\67\2\0\2\40"+
    "\1\56\1\40\3\67\1\0\4\67\2\0\5\40\1\53"+
    "\1\40\1\0\2\40\4\0\1\70\1\5\1\7\43\0"+
    "\1\105\13\0\1\50\33\0\1\106\12\0\1\106\1\50"+
    "\7\0\1\106\1\0\3\106\17\0\2\107\10\0\2\107"+
    "\3\0\1\110\1\111\1\0\3\107\1\0\4\107\10\0"+
    "\1\53\5\0\2\74\1\112\7\0\2\74\3\0\1\74"+
    "\1\56\1\0\3\74\1\0\4\74\1\0\2\74\1\0"+
    "\1\113\1\75\2\0\1\74\25\0\1\56\26\0\3\76"+
    "\2\0\11\76\1\0\2\76\1\114\26\76\1\115\2\116"+
    "\5\115\5\116\2\115\1\116\1\117\1\120\4\116\1\115"+
    "\4\116\2\115\5\116\1\121\1\116\1\115\2\116\1\115"+
    "\3\75\1\122\15\75\1\0\26\75\30\0\1\123\17\0"+
    "\21\64\1\56\27\64\2\124\10\64\2\124\3\64\1\125"+
    "\1\126\1\102\3\124\1\64\4\124\10\64\1\66\4\64"+
    "\3\0\1\104\15\0\1\56\27\0\1\127\13\0\1\50"+
    "\33\0\1\130\12\0\1\130\1\50\7\0\1\130\1\0"+
    "\3\130\17\0\2\131\10\0\2\131\3\0\1\132\1\111"+
    "\1\0\3\131\1\0\4\131\10\0\1\53\5\0\2\131"+
    "\10\0\2\131\3\0\1\132\2\0\3\131\1\0\4\131"+
    "\17\0\1\74\1\112\7\0\2\74\3\0\1\74\1\56"+
    "\1\0\3\74\1\0\4\74\1\0\1\74\2\0\1\113"+
    "\1\75\7\0\3\133\1\113\2\0\1\134\1\133\1\135"+
    "\5\133\1\0\2\133\1\0\14\133\2\0\10\133\20\115"+
    "\1\136\30\115\2\116\5\115\5\116\2\115\1\116\1\137"+
    "\1\115\4\116\1\115\4\116\2\115\5\116\1\121\1\116"+
    "\1\115\2\116\2\115\2\116\5\115\5\116\2\115\1\116"+
    "\1\60\1\120\4\116\1\115\4\116\2\115\5\116\1\121"+
    "\1\116\1\115\2\116\2\115\2\140\10\115\2\140\3\115"+
    "\1\136\2\115\3\140\1\115\4\140\15\115\3\75\1\122"+
    "\15\75\1\56\26\75\31\0\1\141\16\0\1\64\2\142"+
    "\10\64\2\142\3\64\1\143\1\126\1\102\3\142\1\64"+
    "\4\142\10\64\1\66\5\64\2\142\10\64\2\142\3\64"+
    "\1\143\1\64\1\102\3\142\1\64\4\142\15\64\1\0"+
    "\1\144\13\0\1\50\33\0\1\145\12\0\1\145\1\50"+
    "\7\0\1\145\1\0\3\145\17\0\2\146\10\0\2\146"+
    "\3\0\1\147\1\111\1\0\3\146\1\0\4\146\10\0"+
    "\1\53\5\0\2\146\10\0\2\146\3\0\1\147\2\0"+
    "\3\146\1\0\4\146\15\0\3\133\1\55\3\0\1\133"+
    "\1\0\5\133\1\0\2\133\1\56\14\133\2\0\10\133"+
    "\4\134\1\0\1\134\1\150\1\151\40\134\4\135\1\0"+
    "\2\135\1\152\1\150\37\135\20\115\1\75\30\115\2\116"+
    "\5\115\5\116\2\115\1\116\1\60\1\115\4\116\1\115"+
    "\4\116\2\115\5\116\1\121\1\116\1\115\2\116\2\115"+
    "\2\153\10\115\2\153\3\115\1\154\1\155\1\115\3\153"+
    "\1\115\4\153\10\115\1\121\4\115\32\0\1\156\15\0"+
    "\1\64\2\157\10\64\2\157\3\64\1\160\1\126\1\102"+
    "\3\157\1\64\4\157\10\64\1\66\5\64\2\157\10\64"+
    "\2\157\3\64\1\160\1\64\1\102\3\157\1\64\4\157"+
    "\15\64\1\0\1\161\13\0\1\50\33\0\1\162\12\0"+
    "\1\162\1\50\7\0\1\162\1\0\3\162\17\0\2\163"+
    "\10\0\2\163\3\0\1\164\1\111\1\0\3\163\1\0"+
    "\4\163\10\0\1\53\5\0\2\163\10\0\2\163\3\0"+
    "\1\164\2\0\3\163\1\0\4\163\20\0\1\55\15\0"+
    "\1\56\16\0\1\75\7\0\4\134\1\0\1\134\1\165"+
    "\1\151\40\134\4\135\1\0\2\135\1\152\1\166\37\135"+
    "\1\115\2\167\10\115\2\167\3\115\1\170\1\155\1\115"+
    "\3\167\1\115\4\167\10\115\1\121\5\115\2\167\10\115"+
    "\2\167\3\115\1\171\2\115\3\167\1\115\4\167\15\115"+
    "\31\0\1\172\16\0\1\64\2\173\10\64\2\173\3\64"+
    "\1\174\1\126\1\102\3\173\1\64\4\173\10\64\1\66"+
    "\5\64\2\173\10\64\2\173\3\64\1\174\1\64\1\102"+
    "\3\173\1\64\4\173\15\64\1\0\1\175\13\0\1\50"+
    "\33\0\1\176\12\0\1\176\1\50\7\0\1\176\1\0"+
    "\3\176\17\0\2\177\10\0\2\177\3\0\1\200\1\111"+
    "\1\0\3\177\1\0\4\177\10\0\1\53\5\0\2\177"+
    "\10\0\2\177\3\0\1\200\2\0\3\177\1\0\4\177"+
    "\15\0\3\134\1\201\1\0\1\134\1\150\1\151\11\134"+
    "\1\202\16\134\1\203\7\134\3\135\1\204\1\0\2\135"+
    "\1\152\1\150\10\135\1\205\16\135\1\206\7\135\1\115"+
    "\2\207\10\115\2\207\3\115\1\210\1\155\1\115\3\207"+
    "\1\115\4\207\10\115\1\121\5\115\2\207\10\115\2\207"+
    "\3\115\1\211\2\115\3\207\1\115\4\207\15\115\1\0"+
    "\2\146\10\0\2\146\3\0\1\147\1\56\1\0\3\146"+
    "\1\0\4\146\43\0\1\212\21\0\1\64\2\213\10\64"+
    "\2\213\3\64\1\214\1\126\1\102\3\213\1\64\4\213"+
    "\10\64\1\66\5\64\2\213\10\64\2\213\3\64\1\214"+
    "\1\64\1\102\3\213\1\64\4\213\15\64\1\0\1\215"+
    "\13\0\1\50\33\0\1\216\12\0\1\216\1\50\7\0"+
    "\1\216\1\0\3\216\17\0\2\217\10\0\2\217\3\0"+
    "\1\220\1\111\1\0\3\217\1\0\4\217\10\0\1\53"+
    "\5\0\2\217\10\0\2\217\3\0\1\220\2\0\3\217"+
    "\1\0\4\217\15\0\2\134\1\221\1\201\1\0\1\134"+
    "\1\150\1\151\3\134\2\221\3\134\1\221\1\202\1\134"+
    "\3\221\1\134\4\221\1\134\1\221\3\134\1\203\13\134"+
    "\1\0\1\134\1\150\1\151\11\134\1\202\26\134\2\135"+
    "\1\222\1\204\1\0\2\135\1\152\1\150\2\135\2\222"+
    "\3\135\1\222\1\205\1\135\3\222\1\135\4\222\1\135"+
    "\1\222\3\135\1\206\13\135\1\0\2\135\1\152\1\150"+
    "\10\135\1\205\26\135\1\115\2\223\10\115\2\223\3\115"+
    "\1\224\1\155\1\115\3\223\1\115\4\223\10\115\1\121"+
    "\5\115\2\223\10\115\2\223\3\115\1\225\2\115\3\223"+
    "\1\115\4\223\15\115\1\0\2\163\10\0\2\163\3\0"+
    "\1\164\1\56\1\0\3\163\1\0\4\163\15\0\33\212"+
    "\1\226\14\212\1\64\2\227\10\64\2\227\3\64\1\230"+
    "\1\126\1\102\3\227\1\64\4\227\10\64\1\66\5\64"+
    "\2\227\10\64\2\227\3\64\1\230\1\64\1\102\3\227"+
    "\1\64\4\227\15\64\15\0\1\50\33\0\1\215\12\0"+
    "\1\215\1\50\7\0\1\215\1\0\3\215\17\0\2\231"+
    "\10\0\2\231\3\0\1\232\1\111\1\0\3\231\1\0"+
    "\4\231\10\0\1\53\5\0\2\231\10\0\2\231\3\0"+
    "\1\232\2\0\3\231\1\0\4\231\15\0\1\134\2\221"+
    "\1\233\1\0\1\134\1\150\1\151\3\134\2\221\3\134"+
    "\1\221\1\202\1\134\3\221\1\134\4\221\1\134\2\221"+
    "\1\134\1\234\1\203\2\134\1\221\4\134\1\135\2\222"+
    "\1\235\1\0\2\135\1\152\1\150\2\135\2\222\3\135"+
    "\1\222\1\205\1\135\3\222\1\135\4\222\1\135\2\222"+
    "\1\135\1\236\1\206\2\135\1\222\4\135\1\115\2\237"+
    "\10\115\2\237\3\115\1\240\1\155\1\115\3\237\1\115"+
    "\4\237\10\115\1\121\5\115\2\237\10\115\2\237\3\115"+
    "\1\241\2\115\3\237\1\115\4\237\15\115\1\0\2\177"+
    "\10\0\2\177\3\0\1\200\1\56\1\0\3\177\1\0"+
    "\4\177\15\0\33\212\1\242\14\212\1\64\2\243\10\64"+
    "\2\243\3\64\1\244\1\126\1\102\3\243\1\64\4\243"+
    "\10\64\1\66\5\64\2\243\10\64\2\243\3\64\1\244"+
    "\1\64\1\102\3\243\1\64\4\243\15\64\1\0\2\245"+
    "\10\0\2\245\3\0\1\246\1\111\1\0\3\245\1\0"+
    "\4\245\10\0\1\53\5\0\2\245\10\0\2\245\3\0"+
    "\1\246\2\0\3\245\1\0\4\245\15\0\2\134\1\221"+
    "\1\233\1\0\1\134\1\150\1\151\3\134\2\221\3\134"+
    "\1\221\1\202\1\134\3\221\1\134\4\221\1\134\1\221"+
    "\2\134\1\234\1\203\7\134\3\247\1\234\1\0\1\134"+
    "\1\165\1\250\1\251\5\247\1\134\2\247\1\134\14\247"+
    "\2\134\10\247\2\135\1\222\1\235\1\0\2\135\1\152"+
    "\1\150\2\135\2\222\3\135\1\222\1\205\1\135\3\222"+
    "\1\135\4\222\1\135\1\222\2\135\1\236\1\206\7\135"+
    "\3\252\1\236\1\0\1\135\1\251\1\253\1\166\5\252"+
    "\1\135\2\252\1\135\14\252\2\135\10\252\1\115\2\254"+
    "\10\115\2\254\3\115\1\255\1\155\1\115\3\254\1\115"+
    "\4\254\10\115\1\121\5\115\2\254\10\115\2\254\3\115"+
    "\1\256\2\115\3\254\1\115\4\254\15\115\1\0\2\217"+
    "\10\0\2\217\3\0\1\220\1\56\1\0\3\217\1\0"+
    "\4\217\15\0\21\212\1\56\26\212\1\64\2\257\10\64"+
    "\2\257\3\64\1\260\1\126\1\102\3\257\1\64\4\257"+
    "\10\64\1\66\5\64\2\257\10\64\2\257\3\64\1\260"+
    "\1\64\1\102\3\257\1\64\4\257\15\64\1\0\2\261"+
    "\10\0\2\261\3\0\1\262\1\111\1\0\3\261\1\0"+
    "\4\261\10\0\1\53\5\0\2\261\10\0\2\261\3\0"+
    "\1\262\2\0\3\261\1\0\4\261\15\0\3\247\1\201"+
    "\1\0\1\134\1\150\1\250\1\134\5\247\1\134\2\247"+
    "\1\202\14\247\2\134\13\247\1\201\1\0\1\134\1\165"+
    "\1\250\1\134\5\247\1\134\2\247\1\202\14\247\2\134"+
    "\10\247\4\251\1\0\1\251\1\166\1\263\1\165\37\251"+
    "\3\252\1\204\1\0\2\135\1\253\1\150\5\252\1\135"+
    "\2\252\1\205\14\252\2\135\13\252\1\204\1\0\2\135"+
    "\1\253\1\166\5\252\1\135\2\252\1\205\14\252\2\135"+
    "\10\252\1\115\2\264\10\115\2\264\3\115\1\265\1\155"+
    "\1\115\3\264\1\115\4\264\10\115\1\121\5\115\2\264"+
    "\10\115\2\264\3\115\1\266\2\115\3\264\1\115\4\264"+
    "\15\115\1\0\2\231\10\0\2\231\3\0\1\232\1\56"+
    "\1\0\3\231\1\0\4\231\15\0\1\64\2\267\10\64"+
    "\2\267\3\64\1\270\1\126\1\102\3\267\1\64\4\267"+
    "\10\64\1\66\5\64\2\267\10\64\2\267\3\64\1\270"+
    "\1\64\1\102\3\267\1\64\4\267\15\64\1\0\2\271"+
    "\10\0\2\271\3\0\1\272\1\111\1\0\3\271\1\0"+
    "\4\271\10\0\1\53\5\0\2\271\10\0\2\271\3\0"+
    "\1\272\2\0\3\271\1\0\4\271\15\0\4\251\1\0"+
    "\1\251\1\273\1\263\1\273\37\251\1\115\2\274\10\115"+
    "\2\274\3\115\1\275\1\155\1\115\3\274\1\115\4\274"+
    "\10\115\1\121\5\115\2\274\10\115\2\274\3\115\1\276"+
    "\2\115\3\274\1\115\4\274\15\115\1\0\2\245\10\0"+
    "\2\245\3\0\1\246\1\56\1\0\3\245\1\0\4\245"+
    "\15\0\1\64\2\277\10\64\2\277\3\64\1\300\1\126"+
    "\1\102\3\277\1\64\4\277\10\64\1\66\5\64\2\277"+
    "\10\64\2\277\3\64\1\300\1\64\1\102\3\277\1\64"+
    "\4\277\15\64\1\0\2\301\10\0\2\301\3\0\1\302"+
    "\1\111\1\0\3\301\1\0\4\301\10\0\1\53\5\0"+
    "\2\301\10\0\2\301\3\0\1\302\2\0\3\301\1\0"+
    "\4\301\15\0\3\251\1\303\1\0\1\251\1\166\1\263"+
    "\1\165\10\251\1\304\16\251\1\305\7\251\1\115\2\306"+
    "\10\115\2\306\3\115\1\307\1\155\1\115\3\306\1\115"+
    "\4\306\10\115\1\121\5\115\2\306\10\115\2\306\3\115"+
    "\1\310\2\115\3\306\1\115\4\306\15\115\1\0\2\261"+
    "\10\0\2\261\3\0\1\262\1\56\1\0\3\261\1\0"+
    "\4\261\15\0\1\64\2\311\10\64\2\311\3\64\1\312"+
    "\1\126\1\102\3\311\1\64\4\311\10\64\1\66\5\64"+
    "\2\311\10\64\2\311\3\64\1\312\1\64\1\102\3\311"+
    "\1\64\4\311\15\64\1\0\2\313\10\0\2\313\3\0"+
    "\1\314\1\111\1\0\3\313\1\0\4\313\10\0\1\53"+
    "\5\0\2\313\10\0\2\313\3\0\1\314\2\0\3\313"+
    "\1\0\4\313\15\0\2\251\1\315\1\303\1\0\1\251"+
    "\1\166\1\263\1\165\2\251\2\315\3\251\1\315\1\304"+
    "\1\251\3\315\1\251\4\315\1\251\1\315\3\251\1\305"+
    "\13\251\1\0\1\251\1\166\1\263\1\165\10\251\1\304"+
    "\26\251\1\115\2\316\10\115\2\316\3\115\1\317\1\155"+
    "\1\115\3\316\1\115\4\316\10\115\1\121\5\115\2\316"+
    "\10\115\2\316\3\115\1\320\2\115\3\316\1\115\4\316"+
    "\15\115\1\0\2\271\10\0\2\271\3\0\1\272\1\56"+
    "\1\0\3\271\1\0\4\271\15\0\1\64\2\321\10\64"+
    "\2\321\3\64\1\322\1\126\1\102\3\321\1\64\4\321"+
    "\10\64\1\66\5\64\2\321\10\64\2\321\3\64\1\322"+
    "\1\64\1\102\3\321\1\64\4\321\15\64\1\0\2\323"+
    "\10\0\2\323\3\0\1\324\1\111\1\0\3\323\1\0"+
    "\4\323\10\0\1\53\5\0\2\323\10\0\2\323\3\0"+
    "\1\324\2\0\3\323\1\0\4\323\15\0\1\251\2\315"+
    "\1\325\1\0\1\251\1\166\1\263\1\165\2\251\2\315"+
    "\3\251\1\315\1\304\1\251\3\315\1\251\4\315\1\251"+
    "\2\315\1\251\1\326\1\305\2\251\1\315\4\251\1\115"+
    "\2\327\10\115\2\327\3\115\1\330\1\155\1\115\3\327"+
    "\1\115\4\327\10\115\1\121\5\115\2\327\10\115\2\327"+
    "\3\115\1\331\2\115\3\327\1\115\4\327\15\115\1\0"+
    "\2\301\10\0\2\301\3\0\1\302\1\56\1\0\3\301"+
    "\1\0\4\301\15\0\1\64\2\332\10\64\2\332\3\64"+
    "\1\333\1\126\1\102\3\332\1\64\4\332\10\64\1\66"+
    "\5\64\2\332\10\64\2\332\3\64\1\333\1\64\1\102"+
    "\3\332\1\64\4\332\15\64\1\0\2\334\10\0\2\334"+
    "\3\0\1\335\1\111\1\0\3\334\1\0\4\334\10\0"+
    "\1\53\5\0\2\334\10\0\2\334\3\0\1\335\2\0"+
    "\3\334\1\0\4\334\15\0\2\251\1\315\1\325\1\0"+
    "\1\251\1\166\1\263\1\165\2\251\2\315\3\251\1\315"+
    "\1\304\1\251\3\315\1\251\4\315\1\251\1\315\2\251"+
    "\1\326\1\305\7\251\3\336\1\326\1\0\1\251\1\273"+
    "\1\337\1\273\5\336\1\251\2\336\1\251\14\336\2\251"+
    "\10\336\1\115\2\340\10\115\2\340\3\115\1\341\1\155"+
    "\1\115\3\340\1\115\4\340\10\115\1\121\5\115\2\340"+
    "\10\115\2\340\3\115\1\342\2\115\3\340\1\115\4\340"+
    "\15\115\1\0\2\313\10\0\2\313\3\0\1\314\1\56"+
    "\1\0\3\313\1\0\4\313\15\0\1\64\2\343\10\64"+
    "\2\343\3\64\1\344\1\126\1\102\3\343\1\64\4\343"+
    "\10\64\1\66\5\64\2\343\10\64\2\343\3\64\1\344"+
    "\1\64\1\102\3\343\1\64\4\343\15\64\1\0\2\345"+
    "\10\0\2\345\3\0\1\346\1\111\1\0\3\345\1\0"+
    "\4\345\10\0\1\53\5\0\2\345\10\0\2\345\3\0"+
    "\1\346\2\0\3\345\1\0\4\345\15\0\3\336\1\303"+
    "\1\0\1\251\1\166\1\337\1\165\5\336\1\251\2\336"+
    "\1\304\14\336\2\251\13\336\1\303\1\0\1\251\1\273"+
    "\1\337\1\273\5\336\1\251\2\336\1\304\14\336\2\251"+
    "\10\336\1\115\2\347\10\115\2\347\3\115\1\350\1\155"+
    "\1\115\3\347\1\115\4\347\10\115\1\121\5\115\2\347"+
    "\10\115\2\347\3\115\1\351\2\115\3\347\1\115\4\347"+
    "\15\115\1\0\2\323\10\0\2\323\3\0\1\324\1\56"+
    "\1\0\3\323\1\0\4\323\15\0\1\64\2\352\10\64"+
    "\2\352\3\64\1\353\1\126\1\102\3\352\1\64\4\352"+
    "\10\64\1\66\5\64\2\352\10\64\2\352\3\64\1\353"+
    "\1\64\1\102\3\352\1\64\4\352\15\64\1\0\2\354"+
    "\10\0\2\354\3\0\1\355\1\111\1\0\3\354\1\0"+
    "\4\354\10\0\1\53\5\0\2\354\10\0\2\354\3\0"+
    "\1\355\2\0\3\354\1\0\4\354\15\0\1\115\2\356"+
    "\10\115\2\356\3\115\1\357\1\155\1\115\3\356\1\115"+
    "\4\356\10\115\1\121\5\115\2\356\10\115\2\356\3\115"+
    "\1\360\2\115\3\356\1\115\4\356\15\115\1\0\2\334"+
    "\10\0\2\334\3\0\1\335\1\56\1\0\3\334\1\0"+
    "\4\334\15\0\1\64\2\361\10\64\2\361\3\64\1\362"+
    "\1\126\1\102\3\361\1\64\4\361\10\64\1\66\5\64"+
    "\2\361\10\64\2\361\3\64\1\362\1\64\1\102\3\361"+
    "\1\64\4\361\15\64\1\0\2\363\10\0\2\363\3\0"+
    "\1\364\1\111\1\0\3\363\1\0\4\363\10\0\1\53"+
    "\5\0\2\363\10\0\2\363\3\0\1\364\2\0\3\363"+
    "\1\0\4\363\15\0\1\115\2\365\10\115\2\365\3\115"+
    "\1\366\1\155\1\115\3\365\1\115\4\365\10\115\1\121"+
    "\5\115\2\365\10\115\2\365\3\115\1\367\2\115\3\365"+
    "\1\115\4\365\15\115\1\0\2\345\10\0\2\345\3\0"+
    "\1\346\1\56\1\0\3\345\1\0\4\345\15\0\1\64"+
    "\2\370\10\64\2\370\3\64\1\371\1\126\1\102\3\370"+
    "\1\64\4\370\10\64\1\66\5\64\2\370\10\64\2\370"+
    "\3\64\1\371\1\64\1\102\3\370\1\64\4\370\15\64"+
    "\1\0\2\372\10\0\2\372\3\0\1\373\1\111\1\0"+
    "\3\372\1\0\4\372\10\0\1\53\5\0\2\372\10\0"+
    "\2\372\3\0\1\373\2\0\3\372\1\0\4\372\15\0"+
    "\1\115\2\374\10\115\2\374\3\115\1\375\1\155\1\115"+
    "\3\374\1\115\4\374\10\115\1\121\5\115\2\374\10\115"+
    "\2\374\3\115\1\376\2\115\3\374\1\115\4\374\15\115"+
    "\1\0\2\354\10\0\2\354\3\0\1\355\1\56\1\0"+
    "\3\354\1\0\4\354\15\0\1\64\2\377\10\64\2\377"+
    "\3\64\1\u0100\1\126\1\102\3\377\1\64\4\377\10\64"+
    "\1\66\5\64\2\377\10\64\2\377\3\64\1\u0100\1\64"+
    "\1\102\3\377\1\64\4\377\15\64\1\0\2\u0101\10\0"+
    "\2\u0101\3\0\1\u0102\1\111\1\0\3\u0101\1\0\4\u0101"+
    "\10\0\1\53\5\0\2\u0101\10\0\2\u0101\3\0\1\u0102"+
    "\2\0\3\u0101\1\0\4\u0101\15\0\1\115\2\u0103\10\115"+
    "\2\u0103\3\115\1\u0104\1\155\1\115\3\u0103\1\115\4\u0103"+
    "\10\115\1\121\5\115\2\u0103\10\115\2\u0103\3\115\1\u0105"+
    "\2\115\3\u0103\1\115\4\u0103\15\115\1\0\2\363\10\0"+
    "\2\363\3\0\1\364\1\56\1\0\3\363\1\0\4\363"+
    "\15\0\1\64\2\u0106\10\64\2\u0106\3\64\1\u0107\1\126"+
    "\1\102\3\u0106\1\64\4\u0106\10\64\1\66\5\64\2\u0106"+
    "\10\64\2\u0106\3\64\1\u0107\1\64\1\102\3\u0106\1\64"+
    "\4\u0106\15\64\1\0\2\u0108\10\0\2\u0108\3\0\1\u0109"+
    "\1\111\1\0\3\u0108\1\0\4\u0108\10\0\1\53\5\0"+
    "\2\u0108\10\0\2\u0108\3\0\1\u0109\2\0\3\u0108\1\0"+
    "\4\u0108\15\0\1\115\2\u010a\10\115\2\u010a\3\115\1\u010b"+
    "\1\155\1\115\3\u010a\1\115\4\u010a\10\115\1\121\5\115"+
    "\2\u010a\10\115\2\u010a\3\115\1\u010c\2\115\3\u010a\1\115"+
    "\4\u010a\15\115\1\0\2\372\10\0\2\372\3\0\1\373"+
    "\1\56\1\0\3\372\1\0\4\372\15\0\1\64\2\u010d"+
    "\10\64\2\u010d\3\64\1\u010e\1\126\1\102\3\u010d\1\64"+
    "\4\u010d\10\64\1\66\5\64\2\u010d\10\64\2\u010d\3\64"+
    "\1\u010e\1\64\1\102\3\u010d\1\64\4\u010d\15\64\1\0"+
    "\2\u010f\10\0\2\u010f\3\0\1\u0110\1\111\1\0\3\u010f"+
    "\1\0\4\u010f\10\0\1\53\5\0\2\u010f\10\0\2\u010f"+
    "\3\0\1\u0110\2\0\3\u010f\1\0\4\u010f\15\0\1\115"+
    "\2\u0111\10\115\2\u0111\3\115\1\u0112\1\155\1\115\3\u0111"+
    "\1\115\4\u0111\10\115\1\121\5\115\2\u0111\10\115\2\u0111"+
    "\3\115\1\u0113\2\115\3\u0111\1\115\4\u0111\15\115\1\0"+
    "\2\u0101\10\0\2\u0101\3\0\1\u0102\1\56\1\0\3\u0101"+
    "\1\0\4\u0101\15\0\1\64\2\u0114\10\64\2\u0114\3\64"+
    "\1\u0115\1\126\1\102\3\u0114\1\64\4\u0114\10\64\1\66"+
    "\5\64\2\u0114\10\64\2\u0114\3\64\1\u0115\1\64\1\102"+
    "\3\u0114\1\64\4\u0114\15\64\1\0\2\u0116\10\0\2\u0116"+
    "\3\0\1\u0117\1\111\1\0\3\u0116\1\0\4\u0116\10\0"+
    "\1\53\5\0\2\u0116\10\0\2\u0116\3\0\1\u0117\2\0"+
    "\3\u0116\1\0\4\u0116\15\0\1\115\2\u0118\10\115\2\u0118"+
    "\3\115\1\u0119\1\155\1\115\3\u0118\1\115\4\u0118\10\115"+
    "\1\121\5\115\2\u0118\10\115\2\u0118\3\115\1\u011a\2\115"+
    "\3\u0118\1\115\4\u0118\15\115\1\0\2\u0108\10\0\2\u0108"+
    "\3\0\1\u0109\1\56\1\0\3\u0108\1\0\4\u0108\15\0"+
    "\1\64\2\u011b\10\64\2\u011b\3\64\1\u011c\1\126\1\102"+
    "\3\u011b\1\64\4\u011b\10\64\1\66\5\64\2\u011b\10\64"+
    "\2\u011b\3\64\1\u011c\1\64\1\102\3\u011b\1\64\4\u011b"+
    "\15\64\1\0\2\u011d\10\0\2\u011d\3\0\1\u011e\1\111"+
    "\1\0\3\u011d\1\0\4\u011d\10\0\1\53\5\0\2\u011d"+
    "\10\0\2\u011d\3\0\1\u011e\2\0\3\u011d\1\0\4\u011d"+
    "\15\0\1\115\2\u011f\10\115\2\u011f\3\115\1\u0120\1\155"+
    "\1\115\3\u011f\1\115\4\u011f\10\115\1\121\5\115\2\u011f"+
    "\10\115\2\u011f\3\115\1\u0121\2\115\3\u011f\1\115\4\u011f"+
    "\15\115\1\0\2\u010f\10\0\2\u010f\3\0\1\u0110\1\56"+
    "\1\0\3\u010f\1\0\4\u010f\15\0\1\64\2\u0122\10\64"+
    "\2\u0122\3\64\1\u0123\1\126\1\102\3\u0122\1\64\4\u0122"+
    "\10\64\1\66\5\64\2\u0122\10\64\2\u0122\3\64\1\u0123"+
    "\1\64\1\102\3\u0122\1\64\4\u0122\15\64\1\0\2\u0124"+
    "\10\0\2\u0124\3\0\1\u0125\1\111\1\0\3\u0124\1\0"+
    "\4\u0124\10\0\1\53\5\0\2\u0124\10\0\2\u0124\3\0"+
    "\1\u0125\2\0\3\u0124\1\0\4\u0124\15\0\1\115\2\u0126"+
    "\10\115\2\u0126\3\115\1\u0127\1\155\1\115\3\u0126\1\115"+
    "\4\u0126\10\115\1\121\5\115\2\u0126\10\115\2\u0126\3\115"+
    "\1\u0128\2\115\3\u0126\1\115\4\u0126\15\115\1\0\2\u0116"+
    "\10\0\2\u0116\3\0\1\u0117\1\56\1\0\3\u0116\1\0"+
    "\4\u0116\15\0\1\64\2\u0129\10\64\2\u0129\3\64\1\u012a"+
    "\1\126\1\102\3\u0129\1\64\4\u0129\10\64\1\66\5\64"+
    "\2\u0129\10\64\2\u0129\3\64\1\u012a\1\64\1\102\3\u0129"+
    "\1\64\4\u0129\15\64\1\0\2\u012b\10\0\2\u012b\3\0"+
    "\1\u012c\1\111\1\0\3\u012b\1\0\4\u012b\10\0\1\53"+
    "\5\0\2\u012b\10\0\2\u012b\3\0\1\u012c\2\0\3\u012b"+
    "\1\0\4\u012b\15\0\1\115\2\u012d\10\115\2\u012d\3\115"+
    "\1\u012e\1\155\1\115\3\u012d\1\115\4\u012d\10\115\1\121"+
    "\5\115\2\u012d\10\115\2\u012d\3\115\1\u012f\2\115\3\u012d"+
    "\1\115\4\u012d\15\115\1\0\2\u011d\10\0\2\u011d\3\0"+
    "\1\u011e\1\56\1\0\3\u011d\1\0\4\u011d\15\0\1\64"+
    "\2\u0130\10\64\2\u0130\3\64\1\u0131\1\126\1\102\3\u0130"+
    "\1\64\4\u0130\10\64\1\66\5\64\2\u0130\10\64\2\u0130"+
    "\3\64\1\u0131\1\64\1\102\3\u0130\1\64\4\u0130\15\64"+
    "\1\0\2\u0132\10\0\2\u0132\3\0\1\u0133\1\111\1\0"+
    "\3\u0132\1\0\4\u0132\10\0\1\53\5\0\2\u0132\10\0"+
    "\2\u0132\3\0\1\u0133\2\0\3\u0132\1\0\4\u0132\15\0"+
    "\1\115\2\u0134\10\115\2\u0134\3\115\1\u0135\1\155\1\115"+
    "\3\u0134\1\115\4\u0134\10\115\1\121\5\115\2\u0134\10\115"+
    "\2\u0134\3\115\1\u0136\2\115\3\u0134\1\115\4\u0134\15\115"+
    "\1\0\2\u0124\10\0\2\u0124\3\0\1\u0125\1\56\1\0"+
    "\3\u0124\1\0\4\u0124\15\0\1\64\2\u0137\10\64\2\u0137"+
    "\3\64\1\u0138\1\126\1\102\3\u0137\1\64\4\u0137\10\64"+
    "\1\66\5\64\2\u0137\10\64\2\u0137\3\64\1\u0138\1\64"+
    "\1\102\3\u0137\1\64\4\u0137\15\64\1\0\2\u0139\10\0"+
    "\2\u0139\3\0\1\u013a\1\111\1\0\3\u0139\1\0\4\u0139"+
    "\10\0\1\53\5\0\2\u0139\10\0\2\u0139\3\0\1\u013a"+
    "\2\0\3\u0139\1\0\4\u0139\15\0\1\115\2\u013b\10\115"+
    "\2\u013b\3\115\1\u013c\1\155\1\115\3\u013b\1\115\4\u013b"+
    "\10\115\1\121\5\115\2\u013b\10\115\2\u013b\3\115\1\u013d"+
    "\2\115\3\u013b\1\115\4\u013b\15\115\1\0\2\u012b\10\0"+
    "\2\u012b\3\0\1\u012c\1\56\1\0\3\u012b\1\0\4\u012b"+
    "\15\0\1\64\2\u013e\10\64\2\u013e\3\64\1\u013f\1\126"+
    "\1\102\3\u013e\1\64\4\u013e\10\64\1\66\5\64\2\u013e"+
    "\10\64\2\u013e\3\64\1\u013f\1\64\1\102\3\u013e\1\64"+
    "\4\u013e\15\64\1\0\2\u0140\10\0\2\u0140\3\0\1\u0141"+
    "\1\111\1\0\3\u0140\1\0\4\u0140\10\0\1\53\5\0"+
    "\2\u0140\10\0\2\u0140\3\0\1\u0141\2\0\3\u0140\1\0"+
    "\4\u0140\15\0\1\115\2\u0142\10\115\2\u0142\3\115\1\u0143"+
    "\1\155\1\115\3\u0142\1\115\4\u0142\10\115\1\121\5\115"+
    "\2\u0142\10\115\2\u0142\3\115\1\u0144\2\115\3\u0142\1\115"+
    "\4\u0142\15\115\1\0\2\u0132\10\0\2\u0132\3\0\1\u0133"+
    "\1\56\1\0\3\u0132\1\0\4\u0132\15\0\1\64\2\u0145"+
    "\10\64\2\u0145\3\64\1\u0146\1\126\1\102\3\u0145\1\64"+
    "\4\u0145\10\64\1\66\5\64\2\u0145\10\64\2\u0145\3\64"+
    "\1\u0146\1\64\1\102\3\u0145\1\64\4\u0145\15\64\1\0"+
    "\2\u0147\10\0\2\u0147\3\0\1\u0148\1\111\1\0\3\u0147"+
    "\1\0\4\u0147\10\0\1\53\5\0\2\u0147\10\0\2\u0147"+
    "\3\0\1\u0148\2\0\3\u0147\1\0\4\u0147\15\0\1\115"+
    "\2\u0149\10\115\2\u0149\3\115\1\u014a\1\155\1\115\3\u0149"+
    "\1\115\4\u0149\10\115\1\121\5\115\2\u0149\10\115\2\u0149"+
    "\3\115\1\u014b\2\115\3\u0149\1\115\4\u0149\15\115\1\0"+
    "\2\u0139\10\0\2\u0139\3\0\1\u013a\1\56\1\0\3\u0139"+
    "\1\0\4\u0139\15\0\1\64\2\u014c\10\64\2\u014c\3\64"+
    "\1\u014d\1\126\1\102\3\u014c\1\64\4\u014c\10\64\1\66"+
    "\5\64\2\u014c\10\64\2\u014c\3\64\1\u014d\1\64\1\102"+
    "\3\u014c\1\64\4\u014c\15\64\1\0\2\u014e\10\0\2\u014e"+
    "\3\0\1\u014f\1\111\1\0\3\u014e\1\0\4\u014e\10\0"+
    "\1\53\5\0\2\u014e\10\0\2\u014e\3\0\1\u014f\2\0"+
    "\3\u014e\1\0\4\u014e\15\0\1\115\2\u0150\10\115\2\u0150"+
    "\3\115\1\u0151\1\155\1\115\3\u0150\1\115\4\u0150\10\115"+
    "\1\121\5\115\2\u0150\10\115\2\u0150\3\115\1\u0152\2\115"+
    "\3\u0150\1\115\4\u0150\15\115\1\0\2\u0140\10\0\2\u0140"+
    "\3\0\1\u0141\1\56\1\0\3\u0140\1\0\4\u0140\15\0"+
    "\1\64\2\u0153\10\64\2\u0153\3\64\1\u0154\1\126\1\102"+
    "\3\u0153\1\64\4\u0153\10\64\1\66\5\64\2\u0153\10\64"+
    "\2\u0153\3\64\1\u0154\1\64\1\102\3\u0153\1\64\4\u0153"+
    "\15\64\1\0\2\u0155\10\0\2\u0155\3\0\1\u0156\1\111"+
    "\1\0\3\u0155\1\0\4\u0155\10\0\1\53\5\0\2\u0155"+
    "\10\0\2\u0155\3\0\1\u0156\2\0\3\u0155\1\0\4\u0155"+
    "\15\0\1\115\2\u0157\10\115\2\u0157\3\115\1\u0158\1\155"+
    "\1\115\3\u0157\1\115\4\u0157\10\115\1\121\5\115\2\u0157"+
    "\10\115\2\u0157\3\115\1\u0159\2\115\3\u0157\1\115\4\u0157"+
    "\15\115\1\0\2\u0147\10\0\2\u0147\3\0\1\u0148\1\56"+
    "\1\0\3\u0147\1\0\4\u0147\15\0\1\64\2\u015a\10\64"+
    "\2\u015a\3\64\1\u015b\1\126\1\102\3\u015a\1\64\4\u015a"+
    "\10\64\1\66\5\64\2\u015a\10\64\2\u015a\3\64\1\u015b"+
    "\1\64\1\102\3\u015a\1\64\4\u015a\15\64\1\0\2\u015c"+
    "\10\0\2\u015c\3\0\1\u015d\1\111\1\0\3\u015c\1\0"+
    "\4\u015c\10\0\1\53\5\0\2\u015c\10\0\2\u015c\3\0"+
    "\1\u015d\2\0\3\u015c\1\0\4\u015c\15\0\1\115\2\u015e"+
    "\10\115\2\u015e\3\115\1\u015f\1\155\1\115\3\u015e\1\115"+
    "\4\u015e\10\115\1\121\5\115\2\u015e\10\115\2\u015e\3\115"+
    "\1\u0160\2\115\3\u015e\1\115\4\u015e\15\115\1\0\2\u014e"+
    "\10\0\2\u014e\3\0\1\u014f\1\56\1\0\3\u014e\1\0"+
    "\4\u014e\15\0\1\64\2\u0161\10\64\2\u0161\3\64\1\u0162"+
    "\1\126\1\102\3\u0161\1\64\4\u0161\10\64\1\66\5\64"+
    "\2\u0161\10\64\2\u0161\3\64\1\u0162\1\64\1\102\3\u0161"+
    "\1\64\4\u0161\15\64\1\0\2\u0163\10\0\2\u0163\3\0"+
    "\1\u0164\1\111\1\0\3\u0163\1\0\4\u0163\10\0\1\53"+
    "\5\0\2\u0163\10\0\2\u0163\3\0\1\u0164\2\0\3\u0163"+
    "\1\0\4\u0163\15\0\1\115\2\u0165\10\115\2\u0165\3\115"+
    "\1\u0166\1\155\1\115\3\u0165\1\115\4\u0165\10\115\1\121"+
    "\5\115\2\u0165\10\115\2\u0165\3\115\1\u0167\2\115\3\u0165"+
    "\1\115\4\u0165\15\115\1\0\2\u0155\10\0\2\u0155\3\0"+
    "\1\u0156\1\56\1\0\3\u0155\1\0\4\u0155\15\0\1\64"+
    "\2\u0168\10\64\2\u0168\3\64\1\u0169\1\126\1\102\3\u0168"+
    "\1\64\4\u0168\10\64\1\66\5\64\2\u0168\10\64\2\u0168"+
    "\3\64\1\u0169\1\64\1\102\3\u0168\1\64\4\u0168\15\64"+
    "\1\0\2\u016a\10\0\2\u016a\3\0\1\u016b\1\111\1\0"+
    "\3\u016a\1\0\4\u016a\10\0\1\53\5\0\2\u016a\10\0"+
    "\2\u016a\3\0\1\u016b\2\0\3\u016a\1\0\4\u016a\15\0"+
    "\1\115\2\u016c\10\115\2\u016c\3\115\1\u016d\1\155\1\115"+
    "\3\u016c\1\115\4\u016c\10\115\1\121\5\115\2\u016c\10\115"+
    "\2\u016c\3\115\1\u016e\2\115\3\u016c\1\115\4\u016c\15\115"+
    "\1\0\2\u015c\10\0\2\u015c\3\0\1\u015d\1\56\1\0"+
    "\3\u015c\1\0\4\u015c\15\0\1\64\2\u016f\10\64\2\u016f"+
    "\3\64\1\u0170\1\126\1\102\3\u016f\1\64\4\u016f\10\64"+
    "\1\66\5\64\2\u016f\10\64\2\u016f\3\64\1\u0170\1\64"+
    "\1\102\3\u016f\1\64\4\u016f\15\64\1\0\2\u0171\10\0"+
    "\2\u0171\3\0\1\u0172\1\111\1\0\3\u0171\1\0\4\u0171"+
    "\10\0\1\53\5\0\2\u0171\10\0\2\u0171\3\0\1\u0172"+
    "\2\0\3\u0171\1\0\4\u0171\15\0\1\115\2\u0173\10\115"+
    "\2\u0173\3\115\1\u0174\1\155\1\115\3\u0173\1\115\4\u0173"+
    "\10\115\1\121\5\115\2\u0173\10\115\2\u0173\3\115\1\u0175"+
    "\2\115\3\u0173\1\115\4\u0173\15\115\1\0\2\u0163\10\0"+
    "\2\u0163\3\0\1\u0164\1\56\1\0\3\u0163\1\0\4\u0163"+
    "\15\0\1\64\2\u0176\10\64\2\u0176\3\64\1\u0177\1\126"+
    "\1\102\3\u0176\1\64\4\u0176\10\64\1\66\5\64\2\u0176"+
    "\10\64\2\u0176\3\64\1\u0177\1\64\1\102\3\u0176\1\64"+
    "\4\u0176\15\64\1\0\2\u0178\10\0\2\u0178\3\0\1\u0179"+
    "\1\111\1\0\3\u0178\1\0\4\u0178\10\0\1\53\5\0"+
    "\2\u0178\10\0\2\u0178\3\0\1\u0179\2\0\3\u0178\1\0"+
    "\4\u0178\15\0\1\115\2\u017a\10\115\2\u017a\3\115\1\u017b"+
    "\1\155\1\115\3\u017a\1\115\4\u017a\10\115\1\121\5\115"+
    "\2\u017a\10\115\2\u017a\3\115\1\u017c\2\115\3\u017a\1\115"+
    "\4\u017a\15\115\1\0\2\u016a\10\0\2\u016a\3\0\1\u016b"+
    "\1\56\1\0\3\u016a\1\0\4\u016a\15\0\1\64\2\u017d"+
    "\10\64\2\u017d\3\64\1\u017e\1\126\1\102\3\u017d\1\64"+
    "\4\u017d\10\64\1\66\5\64\2\u017d\10\64\2\u017d\3\64"+
    "\1\u017e\1\64\1\102\3\u017d\1\64\4\u017d\15\64\1\0"+
    "\2\u017f\10\0\2\u017f\3\0\1\u0180\1\111\1\0\3\u017f"+
    "\1\0\4\u017f\10\0\1\53\5\0\2\u017f\10\0\2\u017f"+
    "\3\0\1\u0180\2\0\3\u017f\1\0\4\u017f\15\0\1\115"+
    "\2\u0181\10\115\2\u0181\3\115\1\u0182\1\155\1\115\3\u0181"+
    "\1\115\4\u0181\10\115\1\121\5\115\2\u0181\10\115\2\u0181"+
    "\3\115\1\u0183\2\115\3\u0181\1\115\4\u0181\15\115\1\0"+
    "\2\u0171\10\0\2\u0171\3\0\1\u0172\1\56\1\0\3\u0171"+
    "\1\0\4\u0171\15\0\1\64\2\u0184\10\64\2\u0184\3\64"+
    "\1\u0185\1\126\1\102\3\u0184\1\64\4\u0184\10\64\1\66"+
    "\5\64\2\u0184\10\64\2\u0184\3\64\1\u0185\1\64\1\102"+
    "\3\u0184\1\64\4\u0184\15\64\1\0\2\u0186\10\0\2\u0186"+
    "\3\0\1\u0187\1\111\1\0\3\u0186\1\0\4\u0186\10\0"+
    "\1\53\5\0\2\u0186\10\0\2\u0186\3\0\1\u0187\2\0"+
    "\3\u0186\1\0\4\u0186\15\0\1\115\2\u0188\10\115\2\u0188"+
    "\3\115\1\u0189\1\155\1\115\3\u0188\1\115\4\u0188\10\115"+
    "\1\121\5\115\2\u0188\10\115\2\u0188\3\115\1\u018a\2\115"+
    "\3\u0188\1\115\4\u0188\15\115\1\0\2\u0178\10\0\2\u0178"+
    "\3\0\1\u0179\1\56\1\0\3\u0178\1\0\4\u0178\15\0"+
    "\1\64\2\u018b\10\64\2\u018b\3\64\1\u018c\1\126\1\102"+
    "\3\u018b\1\64\4\u018b\10\64\1\66\5\64\2\u018b\10\64"+
    "\2\u018b\3\64\1\u018c\1\64\1\102\3\u018b\1\64\4\u018b"+
    "\15\64\1\0\2\u018d\10\0\2\u018d\3\0\1\u018e\1\111"+
    "\1\0\3\u018d\1\0\4\u018d\10\0\1\53\5\0\2\u018d"+
    "\10\0\2\u018d\3\0\1\u018e\2\0\3\u018d\1\0\4\u018d"+
    "\15\0\1\115\2\u018f\10\115\2\u018f\3\115\1\u0190\1\155"+
    "\1\115\3\u018f\1\115\4\u018f\10\115\1\121\5\115\2\u018f"+
    "\10\115\2\u018f\3\115\1\u0191\2\115\3\u018f\1\115\4\u018f"+
    "\15\115\1\0\2\u017f\10\0\2\u017f\3\0\1\u0180\1\56"+
    "\1\0\3\u017f\1\0\4\u017f\15\0\1\64\2\u0192\10\64"+
    "\2\u0192\3\64\1\u0193\1\126\1\102\3\u0192\1\64\4\u0192"+
    "\10\64\1\66\5\64\2\u0192\10\64\2\u0192\3\64\1\u0193"+
    "\1\64\1\102\3\u0192\1\64\4\u0192\15\64\1\0\2\u0194"+
    "\10\0\2\u0194\3\0\1\u0195\1\111\1\0\3\u0194\1\0"+
    "\4\u0194\10\0\1\53\5\0\2\u0194\10\0\2\u0194\3\0"+
    "\1\u0195\2\0\3\u0194\1\0\4\u0194\15\0\1\115\2\u0196"+
    "\10\115\2\u0196\3\115\1\u0197\1\155\1\115\3\u0196\1\115"+
    "\4\u0196\10\115\1\121\5\115\2\u0196\10\115\2\u0196\3\115"+
    "\1\u0198\2\115\3\u0196\1\115\4\u0196\15\115\1\0\2\u0186"+
    "\10\0\2\u0186\3\0\1\u0187\1\56\1\0\3\u0186\1\0"+
    "\4\u0186\15\0\1\64\2\u0199\10\64\2\u0199\3\64\1\u019a"+
    "\1\126\1\102\3\u0199\1\64\4\u0199\10\64\1\66\5\64"+
    "\2\u0199\10\64\2\u0199\3\64\1\u019a\1\64\1\102\3\u0199"+
    "\1\64\4\u0199\15\64\1\0\2\u019b\10\0\2\u019b\3\0"+
    "\1\u019c\1\111\1\0\3\u019b\1\0\4\u019b\10\0\1\53"+
    "\5\0\2\u019b\10\0\2\u019b\3\0\1\u019c\2\0\3\u019b"+
    "\1\0\4\u019b\15\0\1\115\2\u019d\10\115\2\u019d\3\115"+
    "\1\u019e\1\155\1\115\3\u019d\1\115\4\u019d\10\115\1\121"+
    "\5\115\2\u019d\10\115\2\u019d\3\115\1\u019f\2\115\3\u019d"+
    "\1\115\4\u019d\15\115\1\0\2\u018d\10\0\2\u018d\3\0"+
    "\1\u018e\1\56\1\0\3\u018d\1\0\4\u018d\15\0\1\64"+
    "\2\u01a0\10\64\2\u01a0\3\64\1\u01a1\1\126\1\102\3\u01a0"+
    "\1\64\4\u01a0\10\64\1\66\5\64\2\u01a0\10\64\2\u01a0"+
    "\3\64\1\u01a1\1\64\1\102\3\u01a0\1\64\4\u01a0\15\64"+
    "\1\0\2\u01a2\10\0\2\u01a2\3\0\1\u01a3\1\111\1\0"+
    "\3\u01a2\1\0\4\u01a2\10\0\1\53\5\0\2\u01a2\10\0"+
    "\2\u01a2\3\0\1\u01a3\2\0\3\u01a2\1\0\4\u01a2\15\0"+
    "\1\115\2\u01a4\10\115\2\u01a4\3\115\1\u01a5\1\155\1\115"+
    "\3\u01a4\1\115\4\u01a4\10\115\1\121\5\115\2\u01a4\10\115"+
    "\2\u01a4\3\115\1\u01a6\2\115\3\u01a4\1\115\4\u01a4\15\115"+
    "\1\0\2\u0194\10\0\2\u0194\3\0\1\u0195\1\56\1\0"+
    "\3\u0194\1\0\4\u0194\15\0\1\64\2\u01a7\10\64\2\u01a7"+
    "\3\64\1\u01a8\1\126\1\102\3\u01a7\1\64\4\u01a7\10\64"+
    "\1\66\5\64\2\u01a7\10\64\2\u01a7\3\64\1\u01a8\1\64"+
    "\1\102\3\u01a7\1\64\4\u01a7\15\64\1\0\2\u01a9\10\0"+
    "\2\u01a9\3\0\1\u01aa\1\111\1\0\3\u01a9\1\0\4\u01a9"+
    "\10\0\1\53\5\0\2\u01a9\10\0\2\u01a9\3\0\1\u01aa"+
    "\2\0\3\u01a9\1\0\4\u01a9\15\0\1\115\2\u01ab\10\115"+
    "\2\u01ab\3\115\1\u01ac\1\155\1\115\3\u01ab\1\115\4\u01ab"+
    "\10\115\1\121\5\115\2\u01ab\10\115\2\u01ab\3\115\1\u01ad"+
    "\2\115\3\u01ab\1\115\4\u01ab\15\115\1\0\2\u019b\10\0"+
    "\2\u019b\3\0\1\u019c\1\56\1\0\3\u019b\1\0\4\u019b"+
    "\15\0\1\64\2\u01ae\10\64\2\u01ae\3\64\1\u01af\1\126"+
    "\1\102\3\u01ae\1\64\4\u01ae\10\64\1\66\5\64\2\u01ae"+
    "\10\64\2\u01ae\3\64\1\u01af\1\64\1\102\3\u01ae\1\64"+
    "\4\u01ae\15\64\1\0\2\u01b0\10\0\2\u01b0\3\0\1\u01b1"+
    "\1\111\1\0\3\u01b0\1\0\4\u01b0\10\0\1\53\5\0"+
    "\2\u01b0\10\0\2\u01b0\3\0\1\u01b1\2\0\3\u01b0\1\0"+
    "\4\u01b0\15\0\1\115\2\u01b2\10\115\2\u01b2\3\115\1\u01b3"+
    "\1\155\1\115\3\u01b2\1\115\4\u01b2\10\115\1\121\5\115"+
    "\2\u01b2\10\115\2\u01b2\3\115\1\u01b4\2\115\3\u01b2\1\115"+
    "\4\u01b2\15\115\1\0\2\u01a2\10\0\2\u01a2\3\0\1\u01a3"+
    "\1\56\1\0\3\u01a2\1\0\4\u01a2\15\0\1\64\2\u01b5"+
    "\10\64\2\u01b5\3\64\1\u01b6\1\126\1\102\3\u01b5\1\64"+
    "\4\u01b5\10\64\1\66\5\64\2\u01b5\10\64\2\u01b5\3\64"+
    "\1\u01b6\1\64\1\102\3\u01b5\1\64\4\u01b5\15\64\1\0"+
    "\2\u01b7\10\0\2\u01b7\3\0\1\u01b8\1\111\1\0\3\u01b7"+
    "\1\0\4\u01b7\10\0\1\53\5\0\2\u01b7\10\0\2\u01b7"+
    "\3\0\1\u01b8\2\0\3\u01b7\1\0\4\u01b7\15\0\1\115"+
    "\2\u01b9\10\115\2\u01b9\3\115\1\u01ba\1\155\1\115\3\u01b9"+
    "\1\115\4\u01b9\10\115\1\121\5\115\2\u01b9\10\115\2\u01b9"+
    "\3\115\1\u01bb\2\115\3\u01b9\1\115\4\u01b9\15\115\1\0"+
    "\2\u01a9\10\0\2\u01a9\3\0\1\u01aa\1\56\1\0\3\u01a9"+
    "\1\0\4\u01a9\15\0\1\64\2\u01bc\10\64\2\u01bc\3\64"+
    "\1\u01bd\1\126\1\102\3\u01bc\1\64\4\u01bc\10\64\1\66"+
    "\5\64\2\u01bc\10\64\2\u01bc\3\64\1\u01bd\1\64\1\102"+
    "\3\u01bc\1\64\4\u01bc\15\64\1\0\2\u01be\10\0\2\u01be"+
    "\3\0\1\u01bf\1\111\1\0\3\u01be\1\0\4\u01be\10\0"+
    "\1\53\5\0\2\u01be\10\0\2\u01be\3\0\1\u01bf\2\0"+
    "\3\u01be\1\0\4\u01be\15\0\1\115\2\u01c0\10\115\2\u01c0"+
    "\3\115\1\u01c1\1\155\1\115\3\u01c0\1\115\4\u01c0\10\115"+
    "\1\121\5\115\2\u01c0\10\115\2\u01c0\3\115\1\u01c2\2\115"+
    "\3\u01c0\1\115\4\u01c0\15\115\1\0\2\u01b0\10\0\2\u01b0"+
    "\3\0\1\u01b1\1\56\1\0\3\u01b0\1\0\4\u01b0\15\0"+
    "\1\64\2\u01c3\10\64\2\u01c3\3\64\1\u01c4\1\126\1\102"+
    "\3\u01c3\1\64\4\u01c3\10\64\1\66\5\64\2\u01c3\10\64"+
    "\2\u01c3\3\64\1\u01c4\1\64\1\102\3\u01c3\1\64\4\u01c3"+
    "\15\64\1\0\2\u01c5\10\0\2\u01c5\3\0\1\u01c6\1\111"+
    "\1\0\3\u01c5\1\0\4\u01c5\10\0\1\53\5\0\2\u01c5"+
    "\10\0\2\u01c5\3\0\1\u01c6\2\0\3\u01c5\1\0\4\u01c5"+
    "\15\0\1\115\2\u01c7\10\115\2\u01c7\3\115\1\u01c8\1\155"+
    "\1\115\3\u01c7\1\115\4\u01c7\10\115\1\121\5\115\2\u01c7"+
    "\10\115\2\u01c7\3\115\1\u01c9\2\115\3\u01c7\1\115\4\u01c7"+
    "\15\115\1\0\2\u01b7\10\0\2\u01b7\3\0\1\u01b8\1\56"+
    "\1\0\3\u01b7\1\0\4\u01b7\15\0\1\64\2\u01ca\10\64"+
    "\2\u01ca\3\64\1\u01cb\1\126\1\102\3\u01ca\1\64\4\u01ca"+
    "\10\64\1\66\5\64\2\u01ca\10\64\2\u01ca\3\64\1\u01cb"+
    "\1\64\1\102\3\u01ca\1\64\4\u01ca\15\64\1\0\2\u01cc"+
    "\10\0\2\u01cc\3\0\1\u01cd\1\111\1\0\3\u01cc\1\0"+
    "\4\u01cc\10\0\1\53\5\0\2\u01cc\10\0\2\u01cc\3\0"+
    "\1\u01cd\2\0\3\u01cc\1\0\4\u01cc\15\0\1\115\2\u01ce"+
    "\10\115\2\u01ce\3\115\1\u01cf\1\155\1\115\3\u01ce\1\115"+
    "\4\u01ce\10\115\1\121\5\115\2\u01ce\10\115\2\u01ce\3\115"+
    "\1\u01d0\2\115\3\u01ce\1\115\4\u01ce\15\115\1\0\2\u01be"+
    "\10\0\2\u01be\3\0\1\u01bf\1\56\1\0\3\u01be\1\0"+
    "\4\u01be\15\0\1\64\2\u01d1\10\64\2\u01d1\3\64\1\u01d2"+
    "\1\126\1\102\3\u01d1\1\64\4\u01d1\10\64\1\66\5\64"+
    "\2\u01d1\10\64\2\u01d1\3\64\1\u01d2\1\64\1\102\3\u01d1"+
    "\1\64\4\u01d1\15\64\1\0\2\u01d3\10\0\2\u01d3\3\0"+
    "\1\u01d4\1\111\1\0\3\u01d3\1\0\4\u01d3\10\0\1\53"+
    "\5\0\2\u01d3\10\0\2\u01d3\3\0\1\u01d4\2\0\3\u01d3"+
    "\1\0\4\u01d3\15\0\1\115\2\u01d5\10\115\2\u01d5\3\115"+
    "\1\u01d6\1\155\1\115\3\u01d5\1\115\4\u01d5\10\115\1\121"+
    "\5\115\2\u01d5\10\115\2\u01d5\3\115\1\u01d7\2\115\3\u01d5"+
    "\1\115\4\u01d5\15\115\1\0\2\u01c5\10\0\2\u01c5\3\0"+
    "\1\u01c6\1\56\1\0\3\u01c5\1\0\4\u01c5\15\0\1\64"+
    "\2\u01d8\10\64\2\u01d8\3\64\1\u01d9\1\126\1\102\3\u01d8"+
    "\1\64\4\u01d8\10\64\1\66\5\64\2\u01d8\10\64\2\u01d8"+
    "\3\64\1\u01d9\1\64\1\102\3\u01d8\1\64\4\u01d8\15\64"+
    "\1\0\2\u01da\10\0\2\u01da\3\0\1\u01db\1\111\1\0"+
    "\3\u01da\1\0\4\u01da\10\0\1\53\5\0\2\u01da\10\0"+
    "\2\u01da\3\0\1\u01db\2\0\3\u01da\1\0\4\u01da\15\0"+
    "\1\115\2\u01dc\10\115\2\u01dc\3\115\1\u01dd\1\155\1\115"+
    "\3\u01dc\1\115\4\u01dc\10\115\1\121\5\115\2\u01dc\10\115"+
    "\2\u01dc\3\115\1\u01de\2\115\3\u01dc\1\115\4\u01dc\15\115"+
    "\1\0\2\u01cc\10\0\2\u01cc\3\0\1\u01cd\1\56\1\0"+
    "\3\u01cc\1\0\4\u01cc\15\0\1\64\2\u01df\10\64\2\u01df"+
    "\3\64\1\u01e0\1\126\1\102\3\u01df\1\64\4\u01df\10\64"+
    "\1\66\5\64\2\u01df\10\64\2\u01df\3\64\1\u01e0\1\64"+
    "\1\102\3\u01df\1\64\4\u01df\15\64\1\0\2\u01e1\10\0"+
    "\2\u01e1\3\0\1\u01e2\1\111\1\0\3\u01e1\1\0\4\u01e1"+
    "\10\0\1\53\5\0\2\u01e1\10\0\2\u01e1\3\0\1\u01e2"+
    "\2\0\3\u01e1\1\0\4\u01e1\15\0\1\115\2\u01e3\10\115"+
    "\2\u01e3\3\115\1\u01e4\1\155\1\115\3\u01e3\1\115\4\u01e3"+
    "\10\115\1\121\5\115\2\u01e3\10\115\2\u01e3\3\115\1\u01e5"+
    "\2\115\3\u01e3\1\115\4\u01e3\15\115\1\0\2\u01d3\10\0"+
    "\2\u01d3\3\0\1\u01d4\1\56\1\0\3\u01d3\1\0\4\u01d3"+
    "\15\0\1\64\2\u01e6\10\64\2\u01e6\3\64\1\u01e7\1\126"+
    "\1\102\3\u01e6\1\64\4\u01e6\10\64\1\66\5\64\2\u01e6"+
    "\10\64\2\u01e6\3\64\1\u01e7\1\64\1\102\3\u01e6\1\64"+
    "\4\u01e6\15\64\1\0\2\u01e8\10\0\2\u01e8\3\0\1\u01e9"+
    "\1\111\1\0\3\u01e8\1\0\4\u01e8\10\0\1\53\5\0"+
    "\2\u01e8\10\0\2\u01e8\3\0\1\u01e9\2\0\3\u01e8\1\0"+
    "\4\u01e8\15\0\1\115\2\u01ea\10\115\2\u01ea\3\115\1\u01eb"+
    "\1\155\1\115\3\u01ea\1\115\4\u01ea\10\115\1\121\5\115"+
    "\2\u01ea\10\115\2\u01ea\3\115\1\u01ec\2\115\3\u01ea\1\115"+
    "\4\u01ea\15\115\1\0\2\u01da\10\0\2\u01da\3\0\1\u01db"+
    "\1\56\1\0\3\u01da\1\0\4\u01da\15\0\1\64\2\u01ed"+
    "\10\64\2\u01ed\3\64\1\u01ee\1\126\1\102\3\u01ed\1\64"+
    "\4\u01ed\10\64\1\66\5\64\2\u01ed\10\64\2\u01ed\3\64"+
    "\1\u01ee\1\64\1\102\3\u01ed\1\64\4\u01ed\15\64\1\0"+
    "\2\u01ef\10\0\2\u01ef\3\0\1\u01f0\1\111\1\0\3\u01ef"+
    "\1\0\4\u01ef\10\0\1\53\5\0\2\u01ef\10\0\2\u01ef"+
    "\3\0\1\u01f0\2\0\3\u01ef\1\0\4\u01ef\15\0\1\115"+
    "\2\u01f1\10\115\2\u01f1\3\115\1\u01f2\1\155\1\115\3\u01f1"+
    "\1\115\4\u01f1\10\115\1\121\5\115\2\u01f1\10\115\2\u01f1"+
    "\3\115\1\u01f3\2\115\3\u01f1\1\115\4\u01f1\15\115\1\0"+
    "\2\u01e1\10\0\2\u01e1\3\0\1\u01e2\1\56\1\0\3\u01e1"+
    "\1\0\4\u01e1\15\0\1\64\2\u01f4\10\64\2\u01f4\3\64"+
    "\1\u01f5\1\126\1\102\3\u01f4\1\64\4\u01f4\10\64\1\66"+
    "\5\64\2\u01f4\10\64\2\u01f4\3\64\1\u01f5\1\64\1\102"+
    "\3\u01f4\1\64\4\u01f4\15\64\1\0\2\u01f6\10\0\2\u01f6"+
    "\3\0\1\u01f7\1\111\1\0\3\u01f6\1\0\4\u01f6\10\0"+
    "\1\53\5\0\2\u01f6\10\0\2\u01f6\3\0\1\u01f7\2\0"+
    "\3\u01f6\1\0\4\u01f6\15\0\1\115\2\u01f8\10\115\2\u01f8"+
    "\3\115\1\u01f9\1\155\1\115\3\u01f8\1\115\4\u01f8\10\115"+
    "\1\121\5\115\2\u01f8\10\115\2\u01f8\3\115\1\u01fa\2\115"+
    "\3\u01f8\1\115\4\u01f8\15\115\1\0\2\u01e8\10\0\2\u01e8"+
    "\3\0\1\u01e9\1\56\1\0\3\u01e8\1\0\4\u01e8\15\0"+
    "\1\64\2\u01fb\10\64\2\u01fb\3\64\1\u01fc\1\126\1\102"+
    "\3\u01fb\1\64\4\u01fb\10\64\1\66\5\64\2\u01fb\10\64"+
    "\2\u01fb\3\64\1\u01fc\1\64\1\102\3\u01fb\1\64\4\u01fb"+
    "\15\64\1\0\2\u01fd\10\0\2\u01fd\3\0\1\u01fe\1\111"+
    "\1\0\3\u01fd\1\0\4\u01fd\10\0\1\53\5\0\2\u01fd"+
    "\10\0\2\u01fd\3\0\1\u01fe\2\0\3\u01fd\1\0\4\u01fd"+
    "\15\0\1\115\2\u01ff\10\115\2\u01ff\3\115\1\u0200\1\155"+
    "\1\115\3\u01ff\1\115\4\u01ff\10\115\1\121\5\115\2\u01ff"+
    "\10\115\2\u01ff\3\115\1\u0201\2\115\3\u01ff\1\115\4\u01ff"+
    "\15\115\1\0\2\u01ef\10\0\2\u01ef\3\0\1\u01f0\1\56"+
    "\1\0\3\u01ef\1\0\4\u01ef\15\0\1\64\2\u0202\10\64"+
    "\2\u0202\3\64\1\u0203\1\126\1\102\3\u0202\1\64\4\u0202"+
    "\10\64\1\66\5\64\2\u0202\10\64\2\u0202\3\64\1\u0203"+
    "\1\64\1\102\3\u0202\1\64\4\u0202\15\64\1\0\2\u0204"+
    "\10\0\2\u0204\3\0\1\u0205\1\111\1\0\3\u0204\1\0"+
    "\4\u0204\10\0\1\53\5\0\2\u0204\10\0\2\u0204\3\0"+
    "\1\u0205\2\0\3\u0204\1\0\4\u0204\15\0\1\115\2\u0206"+
    "\10\115\2\u0206\3\115\1\u0207\1\155\1\115\3\u0206\1\115"+
    "\4\u0206\10\115\1\121\5\115\2\u0206\10\115\2\u0206\3\115"+
    "\1\u0208\2\115\3\u0206\1\115\4\u0206\15\115\1\0\2\u01f6"+
    "\10\0\2\u01f6\3\0\1\u01f7\1\56\1\0\3\u01f6\1\0"+
    "\4\u01f6\15\0\1\64\2\u0209\10\64\2\u0209\3\64\1\u020a"+
    "\1\126\1\102\3\u0209\1\64\4\u0209\10\64\1\66\5\64"+
    "\2\u0209\10\64\2\u0209\3\64\1\u020a\1\64\1\102\3\u0209"+
    "\1\64\4\u0209\15\64\1\0\2\u020b\10\0\2\u020b\3\0"+
    "\1\u020c\1\111\1\0\3\u020b\1\0\4\u020b\10\0\1\53"+
    "\5\0\2\u020b\10\0\2\u020b\3\0\1\u020c\2\0\3\u020b"+
    "\1\0\4\u020b\15\0\1\115\2\u020d\10\115\2\u020d\3\115"+
    "\1\u020e\1\155\1\115\3\u020d\1\115\4\u020d\10\115\1\121"+
    "\5\115\2\u020d\10\115\2\u020d\3\115\1\u020f\2\115\3\u020d"+
    "\1\115\4\u020d\15\115\1\0\2\u01fd\10\0\2\u01fd\3\0"+
    "\1\u01fe\1\56\1\0\3\u01fd\1\0\4\u01fd\15\0\1\64"+
    "\2\u0210\10\64\2\u0210\3\64\1\u0211\1\126\1\102\3\u0210"+
    "\1\64\4\u0210\10\64\1\66\5\64\2\u0210\10\64\2\u0210"+
    "\3\64\1\u0211\1\64\1\102\3\u0210\1\64\4\u0210\15\64"+
    "\1\0\2\u0212\10\0\2\u0212\3\0\1\u0213\1\111\1\0"+
    "\3\u0212\1\0\4\u0212\10\0\1\53\5\0\2\u0212\10\0"+
    "\2\u0212\3\0\1\u0213\2\0\3\u0212\1\0\4\u0212\15\0"+
    "\1\115\2\u0214\10\115\2\u0214\3\115\1\u0215\1\155\1\115"+
    "\3\u0214\1\115\4\u0214\10\115\1\121\5\115\2\u0214\10\115"+
    "\2\u0214\3\115\1\u0216\2\115\3\u0214\1\115\4\u0214\15\115"+
    "\1\0\2\u0204\10\0\2\u0204\3\0\1\u0205\1\56\1\0"+
    "\3\u0204\1\0\4\u0204\15\0\1\64\2\u0217\10\64\2\u0217"+
    "\3\64\1\u0218\1\126\1\102\3\u0217\1\64\4\u0217\10\64"+
    "\1\66\5\64\2\u0217\10\64\2\u0217\3\64\1\u0218\1\64"+
    "\1\102\3\u0217\1\64\4\u0217\15\64\1\0\2\u0219\10\0"+
    "\2\u0219\3\0\1\u021a\1\111\1\0\3\u0219\1\0\4\u0219"+
    "\10\0\1\53\5\0\2\u0219\10\0\2\u0219\3\0\1\u021a"+
    "\2\0\3\u0219\1\0\4\u0219\15\0\1\115\2\u021b\10\115"+
    "\2\u021b\3\115\1\u021c\1\155\1\115\3\u021b\1\115\4\u021b"+
    "\10\115\1\121\5\115\2\u021b\10\115\2\u021b\3\115\1\u021d"+
    "\2\115\3\u021b\1\115\4\u021b\15\115\1\0\2\u020b\10\0"+
    "\2\u020b\3\0\1\u020c\1\56\1\0\3\u020b\1\0\4\u020b"+
    "\15\0\1\64\2\u021e\10\64\2\u021e\3\64\1\u021f\1\126"+
    "\1\102\3\u021e\1\64\4\u021e\10\64\1\66\5\64\2\u021e"+
    "\10\64\2\u021e\3\64\1\u021f\1\64\1\102\3\u021e\1\64"+
    "\4\u021e\15\64\1\0\2\u0220\10\0\2\u0220\3\0\1\u0221"+
    "\1\111\1\0\3\u0220\1\0\4\u0220\10\0\1\53\5\0"+
    "\2\u0220\10\0\2\u0220\3\0\1\u0221\2\0\3\u0220\1\0"+
    "\4\u0220\15\0\1\115\2\u0222\10\115\2\u0222\3\115\1\u0223"+
    "\1\155\1\115\3\u0222\1\115\4\u0222\10\115\1\121\5\115"+
    "\2\u0222\10\115\2\u0222\3\115\1\u0224\2\115\3\u0222\1\115"+
    "\4\u0222\15\115\1\0\2\u0212\10\0\2\u0212\3\0\1\u0213"+
    "\1\56\1\0\3\u0212\1\0\4\u0212\15\0\1\64\2\u0225"+
    "\10\64\2\u0225\3\64\1\u0226\1\126\1\102\3\u0225\1\64"+
    "\4\u0225\10\64\1\66\5\64\2\u0225\10\64\2\u0225\3\64"+
    "\1\u0226\1\64\1\102\3\u0225\1\64\4\u0225\15\64\1\0"+
    "\2\u0227\10\0\2\u0227\3\0\1\u0228\1\111\1\0\3\u0227"+
    "\1\0\4\u0227\10\0\1\53\5\0\2\u0227\10\0\2\u0227"+
    "\3\0\1\u0228\2\0\3\u0227\1\0\4\u0227\15\0\1\115"+
    "\2\u0229\10\115\2\u0229\3\115\1\u022a\1\155\1\115\3\u0229"+
    "\1\115\4\u0229\10\115\1\121\5\115\2\u0229\10\115\2\u0229"+
    "\3\115\1\u022b\2\115\3\u0229\1\115\4\u0229\15\115\1\0"+
    "\2\u0219\10\0\2\u0219\3\0\1\u021a\1\56\1\0\3\u0219"+
    "\1\0\4\u0219\15\0\1\64\2\u022c\10\64\2\u022c\3\64"+
    "\1\u022d\1\126\1\102\3\u022c\1\64\4\u022c\10\64\1\66"+
    "\5\64\2\u022c\10\64\2\u022c\3\64\1\u022d\1\64\1\102"+
    "\3\u022c\1\64\4\u022c\15\64\1\0\2\u022e\10\0\2\u022e"+
    "\4\0\1\111\1\0\3\u022e\1\0\4\u022e\10\0\1\53"+
    "\5\0\2\u022e\10\0\2\u022e\6\0\3\u022e\1\0\4\u022e"+
    "\15\0\1\115\2\u022f\10\115\2\u022f\3\115\1\u0230\1\155"+
    "\1\115\3\u022f\1\115\4\u022f\10\115\1\121\5\115\2\u022f"+
    "\10\115\2\u022f\3\115\1\u0231\2\115\3\u022f\1\115\4\u022f"+
    "\15\115\1\0\2\u0220\10\0\2\u0220\3\0\1\u0221\1\56"+
    "\1\0\3\u0220\1\0\4\u0220\15\0\1\64\2\u0232\10\64"+
    "\2\u0232\4\64\1\126\1\102\3\u0232\1\64\4\u0232\10\64"+
    "\1\66\5\64\2\u0232\10\64\2\u0232\5\64\1\102\3\u0232"+
    "\1\64\4\u0232\15\64\21\0\1\111\21\0\1\53\4\0"+
    "\1\115\2\u0233\10\115\2\u0233\3\115\1\u0234\1\155\1\115"+
    "\3\u0233\1\115\4\u0233\10\115\1\121\5\115\2\u0233\10\115"+
    "\2\u0233\3\115\1\u0235\2\115\3\u0233\1\115\4\u0233\15\115"+
    "\1\0\2\u0227\10\0\2\u0227\3\0\1\u0228\1\56\1\0"+
    "\3\u0227\1\0\4\u0227\15\0\21\64\1\126\1\102\20\64"+
    "\1\66\4\64\1\115\2\u0236\10\115\2\u0236\3\115\1\136"+
    "\1\155\1\115\3\u0236\1\115\4\u0236\10\115\1\121\5\115"+
    "\2\u0236\10\115\2\u0236\3\115\1\75\2\115\3\u0236\1\115"+
    "\4\u0236\15\115\1\0\2\u022e\10\0\2\u022e\4\0\1\56"+
    "\1\0\3\u022e\1\0\4\u022e\15\0\20\115\1\136\1\155"+
    "\21\115\1\121\4\115";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21720];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\2\1\2\11\3\1\1\11\3\1\3\11"+
    "\1\1\1\11\3\1\3\0\1\11\1\1\11\0\1\1"+
    "\1\11\5\0\1\11\32\0\1\11\2\0\1\11\3\0"+
    "\1\1\5\0\1\1\26\0\1\1\24\0\1\1\2\0"+
    "\1\1\76\0\1\1\u0172\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[566];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  private static class Token implements MarkdownTokenTypes {}

  private Stack<Integer> stateStack = new Stack<Integer>();

  private boolean isHeader = false;

  private ParseDelimited parseDelimited = new ParseDelimited();

  private static class ParseDelimited {
    char exitChar = 0;
    IElementType returnType = null;
    boolean inlinesAllowed = true;
  }

  private static class LinkDef {
    boolean wasUrl;
    boolean wasParen;
  }

  private static class HtmlHelper {
    private static final String BLOCK_TAGS_STRING =
            "article, header, aside, hgroup, blockquote, hr, iframe, body, li, map, button, " +
            "object, canvas, ol, caption, output, col, p, colgroup, pre, dd, progress, div, " +
            "section, dl, table, td, dt, tbody, embed, textarea, fieldset, tfoot, figcaption, " +
            "th, figure, thead, footer, footer, tr, form, ul, h1, h2, h3, h4, h5, h6, video, " +
            "script, style";

    static final Set<String> BLOCK_TAGS = getBlockTagsSet();

    private static Set<String> getBlockTagsSet() {
      Set<String> result = new HashSet<String>();
      String[] tags = BLOCK_TAGS_STRING.split(", ");
      for (String tag : tags) {
        result.add(tag);
      }
      return result;
    }
  }

  private static IElementType getDelimiterTokenType(char c) {
    switch (c) {
      case '"': return Token.DOUBLE_QUOTE;
      case '\'': return Token.SINGLE_QUOTE;
      case '(': return Token.LPAREN;
      case ')': return Token.RPAREN;
      case '[': return Token.LBRACKET;
      case ']': return Token.RBRACKET;
      case '<': return Token.LT;
      case '>': return Token.GT;
      default: return Token.BAD_CHARACTER;
    }
  }

  private IElementType parseDelimited(IElementType contentsType, boolean allowInlines) {
    char first = yycharat(0);
    char last = yycharat(yylength() - 1);

    stateStack.push(yystate());

    parseDelimited.exitChar = last;
    parseDelimited.returnType = contentsType;
//    parseDelimited.inlinesAllowed = allowInlines;
    parseDelimited.inlinesAllowed = true;

    yybegin(PARSE_DELIMITED);

    yypushback(yylength() - 1);
    return getDelimiterTokenType(first);
  }

  private void processEol() {
    int newlinePos = 1;
    while (newlinePos < yylength() && yycharat(newlinePos) != '\n') {
      newlinePos++;
    }

    // there is always one at 0 so that means there are two at least
    if (newlinePos != yylength()) {
      yypushback(yylength() - newlinePos);
      return;
    }

    yybegin(YYINITIAL);
    yypushback(yylength() - 1);

    isHeader = false;
  }

  private void popState() {
    if (stateStack.isEmpty()) {
      yybegin(AFTER_LINE_START);
    }
    else {
      yybegin(stateStack.pop());
    }
  }

  private void resetState() {
    yypushback(yylength());

    popState();
  }

  private String getTagName() {
    if (yylength() > 1 && yycharat(1) == '/') {
      return yytext().toString().substring(2, yylength() - 1).trim();
    }
    return yytext().toString().substring(1);
  }

  private boolean isBlockTag(String tagName) {
    return HtmlHelper.BLOCK_TAGS.contains(tagName.toLowerCase());
  }

  private boolean canInline() {
    return yystate() == AFTER_LINE_START || yystate() == PARSE_DELIMITED && parseDelimited.inlinesAllowed;
  }

  private IElementType getReturnGeneralized(IElementType defaultType) {
    if (canInline()) {
      return defaultType;
    }
    return parseDelimited.returnType;
  }

  private int countChars(CharSequence s, char c) {
    int result = 0;
    for (int i = 0; i < s.length(); ++i) {
      if (s.charAt(i) == c)
        result++;
    }
    return result;
  }



  public _MarkdownLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _MarkdownLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 108) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14: 
          { return Token.HTML_ENTITY;
          }
        case 18: break;
        case 16: 
          { return parseDelimited(Token.EMAIL_AUTOLINK, false);
          }
        case 19: break;
        case 8: 
          { return Token.COLON;
          }
        case 20: break;
        case 10: 
          { if (canInline()) {
      return Token.BACKTICK;
    }
    return parseDelimited.returnType;
          }
        case 21: break;
        case 4: 
          { return Token.WHITE_SPACE;
          }
        case 22: break;
        case 17: 
          { return parseDelimited(Token.AUTOLINK, false);
          }
        case 23: break;
        case 7: 
          { return Token.EXCLAMATION_MARK;
          }
        case 24: break;
        case 13: 
          { return getReturnGeneralized(Token.ESCAPED_BACKTICKS);
          }
        case 25: break;
        case 12: 
          { return getReturnGeneralized(Token.TEXT);
          }
        case 26: break;
        case 11: 
          { if (yycharat(0) == parseDelimited.exitChar) {
      yybegin(stateStack.pop());
      return getDelimiterTokenType(yycharat(0));
    }
    return parseDelimited.returnType;
          }
        case 27: break;
        case 6: 
          { return getDelimiterTokenType(yycharat(0));
          }
        case 28: break;
        case 2: 
          { return Token.BLOCK_QUOTE;
          }
        case 29: break;
        case 9: 
          { return getReturnGeneralized(Token.EMPH);
          }
        case 30: break;
        case 15: 
          { return Token.HTML_TAG;
          }
        case 31: break;
        case 1: 
          { resetState();
          }
        case 32: break;
        case 3: 
          { return Token.TEXT;
          }
        case 33: break;
        case 5: 
          { int lastSpaces = yytext().toString().indexOf("\n");
    if (lastSpaces >= 2) {
      yypushback(yylength() - lastSpaces);
      return Token.HARD_LINE_BREAK;
    }
    else if (lastSpaces > 0) {
      yypushback(yylength() - lastSpaces);
      return Token.WHITE_SPACE;
    }

    processEol();
    return Token.EOL;
          }
        case 34: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
