/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package org.intellij.markdown.lexer;

import org.intellij.markdown.MarkdownTokenTypes;
import org.intellij.markdown.IElementType;
import org.intellij.markdown.lexer.GeneratedLexer;

import java.util.HashSet;
import java.util.Set;
import java.util.Stack;

/* Auto generated File */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>markdown.flex</tt>
 */
public class _MarkdownLexer implements GeneratedLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TAG_START = 2;
  public static final int AFTER_LINE_START = 4;
  public static final int PARSE_DELIMITED = 6;
  public static final int CODE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\6\1\4\1\5\1\7\22\0\1\3\1\14\1\10\4\40\1\12\2\42\1\41\1\40\1\37"+
    "\1\15\1\36\1\33\12\1\1\27\1\0\1\13\1\32\1\16\1\17\1\35\1\24\1\20\1\22\1\23"+
    "\17\20\1\25\6\20\1\21\1\11\1\26\1\34\1\30\1\31\32\2\1\40\1\34\2\40\6\0\1\4"+
    "\242\0\2\4\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\3\1\1\2\2\3\1\4\1\5\1\6\1\3"+
    "\1\6\1\7\1\10\1\11\1\12\2\13\1\1\2\13"+
    "\1\0\1\1\2\0\1\14\1\15\7\0\1\1\1\14"+
    "\3\0\1\16\12\0\1\1\14\0\1\17\2\0\1\20"+
    "\3\0\1\16\5\0\1\17\22\0\1\17\20\0\1\16"+
    "\2\0\1\16\74\0\1\16\u0172\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[550];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\214\0\257\0\322\0\214"+
    "\0\214\0\365\0\u0118\0\u013b\0\214\0\u015e\0\u0181\0\214"+
    "\0\214\0\214\0\u01a4\0\214\0\u01c7\0\u01c7\0\u015e\0\u0181"+
    "\0\u01ea\0\u01ea\0\365\0\u020d\0\214\0\u0230\0\u0253\0\u0276"+
    "\0\u0299\0\u02bc\0\u02df\0\u01c7\0\u0302\0\u0302\0\u020d\0\u0325"+
    "\0\u0348\0\u036b\0\214\0\u038e\0\u03b1\0\u03d4\0\u03f7\0\u041a"+
    "\0\u043d\0\u0460\0\u0483\0\u04a6\0\u04c9\0\u04c9\0\u04ec\0\u050f"+
    "\0\u0532\0\u0555\0\u0578\0\u059b\0\u05be\0\u05e1\0\u0604\0\u0627"+
    "\0\u064a\0\u066d\0\214\0\u0690\0\u06b3\0\214\0\u06d6\0\u06f9"+
    "\0\u071c\0\u06d6\0\u073f\0\u0762\0\u0785\0\u07a8\0\u07cb\0\u043d"+
    "\0\u07ee\0\u0811\0\u0834\0\u0857\0\u087a\0\u089d\0\u08c0\0\u08e3"+
    "\0\u0906\0\u0929\0\u094c\0\u096f\0\u0992\0\u09b5\0\u09d8\0\u09fb"+
    "\0\u0a1e\0\u0a41\0\u06d6\0\u0a64\0\u0a87\0\u0aaa\0\u0acd\0\u0af0"+
    "\0\u0b13\0\u0b36\0\u0b59\0\u0b7c\0\u0b9f\0\u0bc2\0\u0be5\0\u0c08"+
    "\0\u0c2b\0\u0c4e\0\u0c71\0\u0857\0\u0c94\0\u0cb7\0\u087a\0\u0cda"+
    "\0\u0cfd\0\u0d20\0\u0d43\0\u0d66\0\u0d89\0\u0dac\0\u0dcf\0\u0df2"+
    "\0\u0e15\0\u0e38\0\u0e5b\0\u0e7e\0\u0ea1\0\u0ec4\0\u0ee7\0\u0f0a"+
    "\0\u0f2d\0\u0f50\0\u0f73\0\u0f96\0\u0fb9\0\u0fdc\0\u0fff\0\u1022"+
    "\0\u1045\0\u1068\0\u108b\0\u10ae\0\u10d1\0\u10f4\0\u1117\0\u113a"+
    "\0\u115d\0\u1180\0\u11a3\0\u11c6\0\u11e9\0\u120c\0\u122f\0\u1252"+
    "\0\u1275\0\u1298\0\u12bb\0\u12de\0\u1301\0\u1324\0\u1347\0\u136a"+
    "\0\u138d\0\u13b0\0\u13d3\0\u13f6\0\u1419\0\u143c\0\u145f\0\u1482"+
    "\0\u14a5\0\u14c8\0\u14eb\0\u115d\0\u150e\0\u1531\0\u1554\0\u1577"+
    "\0\u159a\0\u15bd\0\u15e0\0\u1603\0\u1626\0\u1649\0\u166c\0\u168f"+
    "\0\u16b2\0\u16d5\0\u16f8\0\u171b\0\u173e\0\u1761\0\u1784\0\u17a7"+
    "\0\u17ca\0\u17ed\0\u1810\0\u1833\0\u1856\0\u1879\0\u189c\0\u18bf"+
    "\0\u18e2\0\u1905\0\u1928\0\u194b\0\u196e\0\u1991\0\u19b4\0\u19d7"+
    "\0\u19fa\0\u1a1d\0\u1a40\0\u1a63\0\u1a86\0\u1aa9\0\u1acc\0\u1aef"+
    "\0\u1b12\0\u1b35\0\u1b58\0\u1b7b\0\u1b9e\0\u1bc1\0\u1be4\0\u1c07"+
    "\0\u1c2a\0\u1c4d\0\u1c70\0\u1c93\0\u1cb6\0\u1cd9\0\u1cfc\0\u1d1f"+
    "\0\u1d42\0\u1d65\0\u1d88\0\u1dab\0\u1dce\0\u1df1\0\u1e14\0\u1e37"+
    "\0\u1e5a\0\u1e7d\0\u1ea0\0\u1ec3\0\u1ee6\0\u1f09\0\u1f2c\0\u1f4f"+
    "\0\u1f72\0\u1f95\0\u1fb8\0\u1fdb\0\u1ffe\0\u2021\0\u2044\0\u2067"+
    "\0\u208a\0\u20ad\0\u20d0\0\u20f3\0\u2116\0\u2139\0\u215c\0\u217f"+
    "\0\u21a2\0\u21c5\0\u21e8\0\u220b\0\u222e\0\u2251\0\u2274\0\u2297"+
    "\0\u22ba\0\u22dd\0\u2300\0\u2323\0\u2346\0\u2369\0\u238c\0\u23af"+
    "\0\u23d2\0\u23f5\0\u2418\0\u243b\0\u245e\0\u2481\0\u24a4\0\u24c7"+
    "\0\u24ea\0\u250d\0\u2530\0\u2553\0\u2576\0\u2599\0\u25bc\0\u25df"+
    "\0\u2602\0\u2625\0\u2648\0\u266b\0\u268e\0\u26b1\0\u26d4\0\u26f7"+
    "\0\u271a\0\u273d\0\u2760\0\u2783\0\u27a6\0\u27c9\0\u27ec\0\u280f"+
    "\0\u2832\0\u2855\0\u2878\0\u289b\0\u28be\0\u28e1\0\u2904\0\u2927"+
    "\0\u294a\0\u296d\0\u2990\0\u29b3\0\u29d6\0\u29f9\0\u2a1c\0\u2a3f"+
    "\0\u2a62\0\u2a85\0\u2aa8\0\u2acb\0\u2aee\0\u2b11\0\u2b34\0\u2b57"+
    "\0\u2b7a\0\u2b9d\0\u2bc0\0\u2be3\0\u2c06\0\u2c29\0\u2c4c\0\u2c6f"+
    "\0\u2c92\0\u2cb5\0\u2cd8\0\u2cfb\0\u2d1e\0\u2d41\0\u2d64\0\u2d87"+
    "\0\u2daa\0\u2dcd\0\u2df0\0\u2e13\0\u2e36\0\u2e59\0\u2e7c\0\u2e9f"+
    "\0\u2ec2\0\u2ee5\0\u2f08\0\u2f2b\0\u2f4e\0\u2f71\0\u2f94\0\u2fb7"+
    "\0\u2fda\0\u2ffd\0\u3020\0\u3043\0\u3066\0\u3089\0\u30ac\0\u30cf"+
    "\0\u30f2\0\u3115\0\u3138\0\u315b\0\u317e\0\u31a1\0\u31c4\0\u31e7"+
    "\0\u320a\0\u322d\0\u3250\0\u3273\0\u3296\0\u32b9\0\u32dc\0\u32ff"+
    "\0\u3322\0\u3345\0\u3368\0\u338b\0\u33ae\0\u33d1\0\u33f4\0\u3417"+
    "\0\u343a\0\u345d\0\u3480\0\u34a3\0\u34c6\0\u34e9\0\u350c\0\u352f"+
    "\0\u3552\0\u3575\0\u3598\0\u35bb\0\u35de\0\u3601\0\u3624\0\u3647"+
    "\0\u366a\0\u368d\0\u36b0\0\u36d3\0\u36f6\0\u3719\0\u373c\0\u375f"+
    "\0\u3782\0\u37a5\0\u37c8\0\u37eb\0\u380e\0\u3831\0\u3854\0\u3877"+
    "\0\u389a\0\u38bd\0\u38e0\0\u3903\0\u3926\0\u3949\0\u396c\0\u398f"+
    "\0\u39b2\0\u39d5\0\u39f8\0\u3a1b\0\u3a3e\0\u3a61\0\u3a84\0\u3aa7"+
    "\0\u3aca\0\u3aed\0\u3b10\0\u3b33\0\u3b56\0\u3b79\0\u3b9c\0\u3bbf"+
    "\0\u3be2\0\u3c05\0\u3c28\0\u3c4b\0\u3c6e\0\u3c91\0\u3cb4\0\u3cd7"+
    "\0\u3cfa\0\u3d1d\0\u3d40\0\u3d63\0\u3d86\0\u3da9\0\u3dcc\0\u3def"+
    "\0\u3e12\0\u3e35\0\u3e58\0\u3e7b\0\u3e9e\0\u3ec1\0\u3ee4\0\u3f07"+
    "\0\u3f2a\0\u3f4d\0\u3f70\0\u3f93\0\u3fb6\0\u3fd9\0\u3ffc\0\u401f"+
    "\0\u4042\0\u4065\0\u4088\0\u40ab\0\u40ce\0\u40f1\0\u4114\0\u4137"+
    "\0\u415a\0\u417d\0\u41a0\0\u41c3\0\u41e6\0\u4209\0\u422c\0\u424f"+
    "\0\u4272\0\u4295\0\u42b8\0\u42db\0\u42fe\0\u4321\0\u4344\0\u4367"+
    "\0\u438a\0\u43ad\0\u43d0\0\u43f3\0\u4416\0\u4439\0\u445c\0\u447f"+
    "\0\u44a2\0\u44c5\0\u44e8\0\u450b\0\u452e\0\u4551\0\u4574\0\u4597"+
    "\0\u45ba\0\u45dd\0\u4600\0\u4623\0\u4646\0\u4669\0\u468c\0\u46af"+
    "\0\u46d2\0\u46f5\0\u4718\0\u473b\0\u475e\0\u4781";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[550];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\5\1\6\1\5\1\6\1\5\1\7\6\5\1\10"+
    "\24\5\44\11\2\12\1\13\1\14\1\13\2\14\1\15"+
    "\1\16\1\15\1\17\1\20\1\11\1\15\1\11\1\12"+
    "\1\15\4\12\1\15\1\21\1\22\1\23\7\11\1\22"+
    "\1\15\3\24\1\25\1\5\1\26\1\5\1\7\1\24"+
    "\1\27\1\24\1\30\14\24\1\22\1\23\7\24\1\22"+
    "\1\24\46\0\1\31\1\5\1\32\1\5\1\7\6\0"+
    "\1\10\32\0\1\5\35\0\2\12\1\33\1\0\1\33"+
    "\12\0\1\12\1\0\4\12\20\0\1\13\1\14\1\13"+
    "\2\14\20\0\1\34\10\0\1\34\4\0\5\14\43\0"+
    "\7\35\2\0\1\35\4\0\3\35\1\36\1\0\1\35"+
    "\1\0\6\35\1\0\1\37\1\40\7\0\1\37\1\0"+
    "\1\41\1\37\1\0\1\42\1\40\1\0\4\40\2\0"+
    "\3\37\1\43\1\37\1\0\1\37\1\0\2\37\32\0"+
    "\1\23\14\0\1\44\1\0\1\44\22\0\1\34\10\0"+
    "\1\34\4\0\1\45\1\5\1\46\1\5\1\7\6\0"+
    "\1\10\27\0\1\47\1\0\1\47\66\0\1\36\12\0"+
    "\2\37\7\0\1\37\1\0\2\37\1\0\2\37\1\0"+
    "\4\37\2\0\5\37\1\50\1\37\1\0\2\37\2\0"+
    "\1\51\1\40\1\52\1\0\1\52\4\0\1\37\1\0"+
    "\2\37\1\53\1\37\1\40\1\0\4\40\1\0\1\54"+
    "\3\37\1\55\1\37\1\50\1\37\1\0\2\37\2\0"+
    "\2\37\7\0\1\37\1\0\1\37\1\56\1\0\1\37"+
    "\1\57\1\60\4\57\2\0\5\37\1\50\1\37\1\0"+
    "\2\37\1\0\1\61\2\42\7\61\1\42\1\61\2\42"+
    "\1\61\1\62\1\42\1\61\4\42\2\61\5\42\1\63"+
    "\1\42\1\61\2\42\1\61\1\0\1\37\1\64\7\0"+
    "\1\37\1\0\2\37\1\0\1\37\1\64\1\0\4\64"+
    "\2\0\5\37\1\50\1\37\1\0\2\37\4\0\1\65"+
    "\1\5\1\66\1\5\1\7\6\0\1\10\25\0\2\67"+
    "\15\0\1\67\1\0\4\67\16\0\2\51\1\52\1\0"+
    "\1\52\4\0\1\37\1\0\2\37\1\53\1\37\1\51"+
    "\1\0\4\51\2\0\3\37\1\55\1\37\1\50\1\37"+
    "\1\0\2\37\3\0\1\70\1\52\1\0\1\52\7\0"+
    "\1\70\1\53\1\0\1\70\1\0\4\70\1\0\1\70"+
    "\3\0\1\71\7\0\3\72\1\0\1\72\2\0\4\72"+
    "\1\0\2\72\1\0\24\72\1\0\2\37\7\0\1\37"+
    "\1\0\2\37\1\53\2\37\1\0\4\37\2\0\5\37"+
    "\1\50\1\37\1\0\2\37\2\0\2\37\7\0\1\37"+
    "\1\0\1\37\1\73\1\0\2\37\1\0\4\37\2\0"+
    "\5\37\1\50\1\37\1\0\2\37\2\0\2\37\1\74"+
    "\1\0\1\74\4\0\1\37\1\0\2\37\1\0\1\37"+
    "\1\57\1\0\4\57\2\0\5\37\1\50\1\37\1\0"+
    "\2\37\23\0\1\75\20\0\17\61\1\76\24\61\2\42"+
    "\7\61\1\42\1\61\2\42\1\53\2\42\1\61\4\42"+
    "\2\61\5\42\1\63\1\42\1\61\2\42\2\61\2\77"+
    "\14\61\1\76\1\77\1\61\4\77\15\61\1\0\2\64"+
    "\1\100\1\0\1\100\4\0\1\37\1\0\2\37\1\53"+
    "\1\37\1\64\1\0\4\64\2\0\5\37\1\50\1\37"+
    "\1\0\2\37\4\0\1\65\1\5\1\66\1\5\1\7"+
    "\34\0\2\101\12\0\1\102\1\103\1\0\1\101\1\0"+
    "\4\101\10\0\1\50\5\0\2\70\1\104\1\0\1\104"+
    "\7\0\1\70\1\53\1\0\1\70\1\0\4\70\1\0"+
    "\2\70\1\0\1\105\1\71\2\0\1\70\22\0\1\53"+
    "\24\0\3\72\1\0\1\72\2\0\4\72\1\0\2\72"+
    "\1\106\24\72\1\107\2\110\7\107\1\110\1\107\1\110"+
    "\1\111\1\112\2\110\1\107\4\110\2\107\5\110\1\113"+
    "\1\110\1\107\2\110\1\107\3\71\1\114\1\71\1\114"+
    "\10\71\1\0\24\71\23\0\1\115\17\0\16\61\1\53"+
    "\25\61\2\116\12\61\1\117\1\120\1\76\1\116\1\61"+
    "\4\116\10\61\1\63\4\61\3\0\1\100\1\0\1\100"+
    "\10\0\1\53\25\0\2\121\12\0\1\122\1\103\1\0"+
    "\1\121\1\0\4\121\10\0\1\50\5\0\2\121\12\0"+
    "\1\122\2\0\1\121\1\0\4\121\17\0\1\70\1\104"+
    "\1\0\1\104\7\0\1\70\1\53\1\0\1\70\1\0"+
    "\4\70\1\0\1\70\2\0\1\105\1\71\7\0\3\123"+
    "\1\105\1\123\1\105\2\0\1\124\1\123\1\125\1\0"+
    "\2\123\1\0\12\123\2\0\10\123\15\107\1\126\26\107"+
    "\2\110\7\107\1\110\1\107\1\110\1\127\1\107\2\110"+
    "\1\107\4\110\2\107\5\110\1\113\1\110\1\107\2\110"+
    "\2\107\2\110\7\107\1\110\1\107\1\110\1\55\1\112"+
    "\2\110\1\107\4\110\2\107\5\110\1\113\1\110\1\107"+
    "\2\110\2\107\2\130\12\107\1\126\2\107\1\130\1\107"+
    "\4\130\15\107\3\71\1\114\1\71\1\114\10\71\1\53"+
    "\24\71\24\0\1\131\16\0\1\61\2\132\12\61\1\133"+
    "\1\120\1\76\1\132\1\61\4\132\10\61\1\63\5\61"+
    "\2\132\12\61\1\133\1\61\1\76\1\132\1\61\4\132"+
    "\15\61\1\0\2\134\12\0\1\135\1\103\1\0\1\134"+
    "\1\0\4\134\10\0\1\50\5\0\2\134\12\0\1\135"+
    "\2\0\1\134\1\0\4\134\15\0\3\123\1\52\1\123"+
    "\1\52\3\0\1\123\2\0\2\123\1\53\12\123\2\0"+
    "\10\123\6\124\1\0\1\124\1\136\1\137\31\124\6\125"+
    "\1\0\2\125\1\140\1\136\30\125\15\107\1\71\26\107"+
    "\2\110\7\107\1\110\1\107\1\110\1\55\1\107\2\110"+
    "\1\107\4\110\2\107\5\110\1\113\1\110\1\107\2\110"+
    "\2\107\2\141\12\107\1\142\1\143\1\107\1\141\1\107"+
    "\4\141\10\107\1\113\4\107\25\0\1\144\15\0\1\61"+
    "\2\145\12\61\1\146\1\120\1\76\1\145\1\61\4\145"+
    "\10\61\1\63\5\61\2\145\12\61\1\146\1\61\1\76"+
    "\1\145\1\61\4\145\15\61\1\0\2\147\12\0\1\150"+
    "\1\103\1\0\1\147\1\0\4\147\10\0\1\50\5\0"+
    "\2\147\12\0\1\150\2\0\1\147\1\0\4\147\20\0"+
    "\1\52\1\0\1\52\10\0\1\53\14\0\1\71\7\0"+
    "\6\124\1\0\1\124\1\151\1\137\31\124\6\125\1\0"+
    "\2\125\1\140\1\152\30\125\1\107\2\153\12\107\1\154"+
    "\1\143\1\107\1\153\1\107\4\153\10\107\1\113\5\107"+
    "\2\153\12\107\1\155\2\107\1\153\1\107\4\153\15\107"+
    "\24\0\1\156\16\0\1\61\2\157\12\61\1\160\1\120"+
    "\1\76\1\157\1\61\4\157\10\61\1\63\5\61\2\157"+
    "\12\61\1\160\1\61\1\76\1\157\1\61\4\157\15\61"+
    "\1\0\2\161\12\0\1\162\1\103\1\0\1\161\1\0"+
    "\4\161\10\0\1\50\5\0\2\161\12\0\1\162\2\0"+
    "\1\161\1\0\4\161\15\0\3\124\1\163\1\124\1\163"+
    "\1\0\1\124\1\136\1\137\4\124\1\164\14\124\1\165"+
    "\7\124\3\125\1\166\1\125\1\166\1\0\2\125\1\140"+
    "\1\136\3\125\1\167\14\125\1\170\7\125\1\107\2\171"+
    "\12\107\1\172\1\143\1\107\1\171\1\107\4\171\10\107"+
    "\1\113\5\107\2\171\12\107\1\173\2\107\1\171\1\107"+
    "\4\171\15\107\1\0\2\134\12\0\1\135\1\53\1\0"+
    "\1\134\1\0\4\134\36\0\1\174\21\0\1\61\2\175"+
    "\12\61\1\176\1\120\1\76\1\175\1\61\4\175\10\61"+
    "\1\63\5\61\2\175\12\61\1\176\1\61\1\76\1\175"+
    "\1\61\4\175\15\61\1\0\2\177\12\0\1\200\1\103"+
    "\1\0\1\177\1\0\4\177\10\0\1\50\5\0\2\177"+
    "\12\0\1\200\2\0\1\177\1\0\4\177\15\0\2\124"+
    "\1\201\1\163\1\124\1\163\1\0\1\124\1\136\1\137"+
    "\3\124\1\201\1\164\1\124\1\201\1\124\4\201\1\124"+
    "\1\201\3\124\1\165\15\124\1\0\1\124\1\136\1\137"+
    "\4\124\1\164\24\124\2\125\1\202\1\166\1\125\1\166"+
    "\1\0\2\125\1\140\1\136\2\125\1\202\1\167\1\125"+
    "\1\202\1\125\4\202\1\125\1\202\3\125\1\170\15\125"+
    "\1\0\2\125\1\140\1\136\3\125\1\167\24\125\1\107"+
    "\2\203\12\107\1\204\1\143\1\107\1\203\1\107\4\203"+
    "\10\107\1\113\5\107\2\203\12\107\1\205\2\107\1\203"+
    "\1\107\4\203\15\107\1\0\2\147\12\0\1\150\1\53"+
    "\1\0\1\147\1\0\4\147\15\0\26\174\1\206\14\174"+
    "\1\61\2\207\12\61\1\210\1\120\1\76\1\207\1\61"+
    "\4\207\10\61\1\63\5\61\2\207\12\61\1\210\1\61"+
    "\1\76\1\207\1\61\4\207\15\61\1\0\2\211\12\0"+
    "\1\212\1\103\1\0\1\211\1\0\4\211\10\0\1\50"+
    "\5\0\2\211\12\0\1\212\2\0\1\211\1\0\4\211"+
    "\15\0\1\124\2\201\1\213\1\124\1\213\1\0\1\124"+
    "\1\136\1\137\3\124\1\201\1\164\1\124\1\201\1\124"+
    "\4\201\1\124\2\201\1\124\1\214\1\165\2\124\1\201"+
    "\4\124\1\125\2\202\1\215\1\125\1\215\1\0\2\125"+
    "\1\140\1\136\2\125\1\202\1\167\1\125\1\202\1\125"+
    "\4\202\1\125\2\202\1\125\1\216\1\170\2\125\1\202"+
    "\4\125\1\107\2\217\12\107\1\220\1\143\1\107\1\217"+
    "\1\107\4\217\10\107\1\113\5\107\2\217\12\107\1\221"+
    "\2\107\1\217\1\107\4\217\15\107\1\0\2\161\12\0"+
    "\1\162\1\53\1\0\1\161\1\0\4\161\15\0\26\174"+
    "\1\222\14\174\1\61\2\223\12\61\1\224\1\120\1\76"+
    "\1\223\1\61\4\223\10\61\1\63\5\61\2\223\12\61"+
    "\1\224\1\61\1\76\1\223\1\61\4\223\15\61\1\0"+
    "\2\225\12\0\1\226\1\103\1\0\1\225\1\0\4\225"+
    "\10\0\1\50\5\0\2\225\12\0\1\226\2\0\1\225"+
    "\1\0\4\225\15\0\2\124\1\201\1\213\1\124\1\213"+
    "\1\0\1\124\1\136\1\137\3\124\1\201\1\164\1\124"+
    "\1\201\1\124\4\201\1\124\1\201\2\124\1\214\1\165"+
    "\7\124\3\227\1\214\1\227\1\214\1\0\1\124\1\151"+
    "\1\230\1\231\1\124\2\227\1\124\12\227\2\124\10\227"+
    "\2\125\1\202\1\215\1\125\1\215\1\0\2\125\1\140"+
    "\1\136\2\125\1\202\1\167\1\125\1\202\1\125\4\202"+
    "\1\125\1\202\2\125\1\216\1\170\7\125\3\232\1\216"+
    "\1\232\1\216\1\0\1\125\1\231\1\233\1\152\1\125"+
    "\2\232\1\125\12\232\2\125\10\232\1\107\2\234\12\107"+
    "\1\235\1\143\1\107\1\234\1\107\4\234\10\107\1\113"+
    "\5\107\2\234\12\107\1\236\2\107\1\234\1\107\4\234"+
    "\15\107\1\0\2\177\12\0\1\200\1\53\1\0\1\177"+
    "\1\0\4\177\15\0\16\174\1\53\24\174\1\61\2\237"+
    "\12\61\1\240\1\120\1\76\1\237\1\61\4\237\10\61"+
    "\1\63\5\61\2\237\12\61\1\240\1\61\1\76\1\237"+
    "\1\61\4\237\15\61\1\0\2\241\12\0\1\242\1\103"+
    "\1\0\1\241\1\0\4\241\10\0\1\50\5\0\2\241"+
    "\12\0\1\242\2\0\1\241\1\0\4\241\15\0\3\227"+
    "\1\163\1\227\1\163\1\0\1\124\1\136\1\230\2\124"+
    "\2\227\1\164\12\227\2\124\13\227\1\163\1\227\1\163"+
    "\1\0\1\124\1\151\1\230\2\124\2\227\1\164\12\227"+
    "\2\124\10\227\6\231\1\0\1\231\1\152\1\243\1\151"+
    "\30\231\3\232\1\166\1\232\1\166\1\0\2\125\1\233"+
    "\1\136\1\125\2\232\1\167\12\232\2\125\13\232\1\166"+
    "\1\232\1\166\1\0\2\125\1\233\1\152\1\125\2\232"+
    "\1\167\12\232\2\125\10\232\1\107\2\244\12\107\1\245"+
    "\1\143\1\107\1\244\1\107\4\244\10\107\1\113\5\107"+
    "\2\244\12\107\1\246\2\107\1\244\1\107\4\244\15\107"+
    "\1\0\2\211\12\0\1\212\1\53\1\0\1\211\1\0"+
    "\4\211\15\0\1\61\2\247\12\61\1\250\1\120\1\76"+
    "\1\247\1\61\4\247\10\61\1\63\5\61\2\247\12\61"+
    "\1\250\1\61\1\76\1\247\1\61\4\247\15\61\1\0"+
    "\2\251\12\0\1\252\1\103\1\0\1\251\1\0\4\251"+
    "\10\0\1\50\5\0\2\251\12\0\1\252\2\0\1\251"+
    "\1\0\4\251\15\0\6\231\1\0\1\231\1\253\1\243"+
    "\1\253\30\231\1\107\2\254\12\107\1\255\1\143\1\107"+
    "\1\254\1\107\4\254\10\107\1\113\5\107\2\254\12\107"+
    "\1\256\2\107\1\254\1\107\4\254\15\107\1\0\2\225"+
    "\12\0\1\226\1\53\1\0\1\225\1\0\4\225\15\0"+
    "\1\61\2\257\12\61\1\260\1\120\1\76\1\257\1\61"+
    "\4\257\10\61\1\63\5\61\2\257\12\61\1\260\1\61"+
    "\1\76\1\257\1\61\4\257\15\61\1\0\2\261\12\0"+
    "\1\262\1\103\1\0\1\261\1\0\4\261\10\0\1\50"+
    "\5\0\2\261\12\0\1\262\2\0\1\261\1\0\4\261"+
    "\15\0\3\231\1\263\1\231\1\263\1\0\1\231\1\152"+
    "\1\243\1\151\3\231\1\264\14\231\1\265\7\231\1\107"+
    "\2\266\12\107\1\267\1\143\1\107\1\266\1\107\4\266"+
    "\10\107\1\113\5\107\2\266\12\107\1\270\2\107\1\266"+
    "\1\107\4\266\15\107\1\0\2\241\12\0\1\242\1\53"+
    "\1\0\1\241\1\0\4\241\15\0\1\61\2\271\12\61"+
    "\1\272\1\120\1\76\1\271\1\61\4\271\10\61\1\63"+
    "\5\61\2\271\12\61\1\272\1\61\1\76\1\271\1\61"+
    "\4\271\15\61\1\0\2\273\12\0\1\274\1\103\1\0"+
    "\1\273\1\0\4\273\10\0\1\50\5\0\2\273\12\0"+
    "\1\274\2\0\1\273\1\0\4\273\15\0\2\231\1\275"+
    "\1\263\1\231\1\263\1\0\1\231\1\152\1\243\1\151"+
    "\2\231\1\275\1\264\1\231\1\275\1\231\4\275\1\231"+
    "\1\275\3\231\1\265\15\231\1\0\1\231\1\152\1\243"+
    "\1\151\3\231\1\264\24\231\1\107\2\276\12\107\1\277"+
    "\1\143\1\107\1\276\1\107\4\276\10\107\1\113\5\107"+
    "\2\276\12\107\1\300\2\107\1\276\1\107\4\276\15\107"+
    "\1\0\2\251\12\0\1\252\1\53\1\0\1\251\1\0"+
    "\4\251\15\0\1\61\2\301\12\61\1\302\1\120\1\76"+
    "\1\301\1\61\4\301\10\61\1\63\5\61\2\301\12\61"+
    "\1\302\1\61\1\76\1\301\1\61\4\301\15\61\1\0"+
    "\2\303\12\0\1\304\1\103\1\0\1\303\1\0\4\303"+
    "\10\0\1\50\5\0\2\303\12\0\1\304\2\0\1\303"+
    "\1\0\4\303\15\0\1\231\2\275\1\305\1\231\1\305"+
    "\1\0\1\231\1\152\1\243\1\151\2\231\1\275\1\264"+
    "\1\231\1\275\1\231\4\275\1\231\2\275\1\231\1\306"+
    "\1\265\2\231\1\275\4\231\1\107\2\307\12\107\1\310"+
    "\1\143\1\107\1\307\1\107\4\307\10\107\1\113\5\107"+
    "\2\307\12\107\1\311\2\107\1\307\1\107\4\307\15\107"+
    "\1\0\2\261\12\0\1\262\1\53\1\0\1\261\1\0"+
    "\4\261\15\0\1\61\2\312\12\61\1\313\1\120\1\76"+
    "\1\312\1\61\4\312\10\61\1\63\5\61\2\312\12\61"+
    "\1\313\1\61\1\76\1\312\1\61\4\312\15\61\1\0"+
    "\2\314\12\0\1\315\1\103\1\0\1\314\1\0\4\314"+
    "\10\0\1\50\5\0\2\314\12\0\1\315\2\0\1\314"+
    "\1\0\4\314\15\0\2\231\1\275\1\305\1\231\1\305"+
    "\1\0\1\231\1\152\1\243\1\151\2\231\1\275\1\264"+
    "\1\231\1\275\1\231\4\275\1\231\1\275\2\231\1\306"+
    "\1\265\7\231\3\316\1\306\1\316\1\306\1\0\1\231"+
    "\1\253\1\317\1\253\1\231\2\316\1\231\12\316\2\231"+
    "\10\316\1\107\2\320\12\107\1\321\1\143\1\107\1\320"+
    "\1\107\4\320\10\107\1\113\5\107\2\320\12\107\1\322"+
    "\2\107\1\320\1\107\4\320\15\107\1\0\2\273\12\0"+
    "\1\274\1\53\1\0\1\273\1\0\4\273\15\0\1\61"+
    "\2\323\12\61\1\324\1\120\1\76\1\323\1\61\4\323"+
    "\10\61\1\63\5\61\2\323\12\61\1\324\1\61\1\76"+
    "\1\323\1\61\4\323\15\61\1\0\2\325\12\0\1\326"+
    "\1\103\1\0\1\325\1\0\4\325\10\0\1\50\5\0"+
    "\2\325\12\0\1\326\2\0\1\325\1\0\4\325\15\0"+
    "\3\316\1\263\1\316\1\263\1\0\1\231\1\152\1\317"+
    "\1\151\1\231\2\316\1\264\12\316\2\231\13\316\1\263"+
    "\1\316\1\263\1\0\1\231\1\253\1\317\1\253\1\231"+
    "\2\316\1\264\12\316\2\231\10\316\1\107\2\327\12\107"+
    "\1\330\1\143\1\107\1\327\1\107\4\327\10\107\1\113"+
    "\5\107\2\327\12\107\1\331\2\107\1\327\1\107\4\327"+
    "\15\107\1\0\2\303\12\0\1\304\1\53\1\0\1\303"+
    "\1\0\4\303\15\0\1\61\2\332\12\61\1\333\1\120"+
    "\1\76\1\332\1\61\4\332\10\61\1\63\5\61\2\332"+
    "\12\61\1\333\1\61\1\76\1\332\1\61\4\332\15\61"+
    "\1\0\2\334\12\0\1\335\1\103\1\0\1\334\1\0"+
    "\4\334\10\0\1\50\5\0\2\334\12\0\1\335\2\0"+
    "\1\334\1\0\4\334\15\0\1\107\2\336\12\107\1\337"+
    "\1\143\1\107\1\336\1\107\4\336\10\107\1\113\5\107"+
    "\2\336\12\107\1\340\2\107\1\336\1\107\4\336\15\107"+
    "\1\0\2\314\12\0\1\315\1\53\1\0\1\314\1\0"+
    "\4\314\15\0\1\61\2\341\12\61\1\342\1\120\1\76"+
    "\1\341\1\61\4\341\10\61\1\63\5\61\2\341\12\61"+
    "\1\342\1\61\1\76\1\341\1\61\4\341\15\61\1\0"+
    "\2\343\12\0\1\344\1\103\1\0\1\343\1\0\4\343"+
    "\10\0\1\50\5\0\2\343\12\0\1\344\2\0\1\343"+
    "\1\0\4\343\15\0\1\107\2\345\12\107\1\346\1\143"+
    "\1\107\1\345\1\107\4\345\10\107\1\113\5\107\2\345"+
    "\12\107\1\347\2\107\1\345\1\107\4\345\15\107\1\0"+
    "\2\325\12\0\1\326\1\53\1\0\1\325\1\0\4\325"+
    "\15\0\1\61\2\350\12\61\1\351\1\120\1\76\1\350"+
    "\1\61\4\350\10\61\1\63\5\61\2\350\12\61\1\351"+
    "\1\61\1\76\1\350\1\61\4\350\15\61\1\0\2\352"+
    "\12\0\1\353\1\103\1\0\1\352\1\0\4\352\10\0"+
    "\1\50\5\0\2\352\12\0\1\353\2\0\1\352\1\0"+
    "\4\352\15\0\1\107\2\354\12\107\1\355\1\143\1\107"+
    "\1\354\1\107\4\354\10\107\1\113\5\107\2\354\12\107"+
    "\1\356\2\107\1\354\1\107\4\354\15\107\1\0\2\334"+
    "\12\0\1\335\1\53\1\0\1\334\1\0\4\334\15\0"+
    "\1\61\2\357\12\61\1\360\1\120\1\76\1\357\1\61"+
    "\4\357\10\61\1\63\5\61\2\357\12\61\1\360\1\61"+
    "\1\76\1\357\1\61\4\357\15\61\1\0\2\361\12\0"+
    "\1\362\1\103\1\0\1\361\1\0\4\361\10\0\1\50"+
    "\5\0\2\361\12\0\1\362\2\0\1\361\1\0\4\361"+
    "\15\0\1\107\2\363\12\107\1\364\1\143\1\107\1\363"+
    "\1\107\4\363\10\107\1\113\5\107\2\363\12\107\1\365"+
    "\2\107\1\363\1\107\4\363\15\107\1\0\2\343\12\0"+
    "\1\344\1\53\1\0\1\343\1\0\4\343\15\0\1\61"+
    "\2\366\12\61\1\367\1\120\1\76\1\366\1\61\4\366"+
    "\10\61\1\63\5\61\2\366\12\61\1\367\1\61\1\76"+
    "\1\366\1\61\4\366\15\61\1\0\2\370\12\0\1\371"+
    "\1\103\1\0\1\370\1\0\4\370\10\0\1\50\5\0"+
    "\2\370\12\0\1\371\2\0\1\370\1\0\4\370\15\0"+
    "\1\107\2\372\12\107\1\373\1\143\1\107\1\372\1\107"+
    "\4\372\10\107\1\113\5\107\2\372\12\107\1\374\2\107"+
    "\1\372\1\107\4\372\15\107\1\0\2\352\12\0\1\353"+
    "\1\53\1\0\1\352\1\0\4\352\15\0\1\61\2\375"+
    "\12\61\1\376\1\120\1\76\1\375\1\61\4\375\10\61"+
    "\1\63\5\61\2\375\12\61\1\376\1\61\1\76\1\375"+
    "\1\61\4\375\15\61\1\0\2\377\12\0\1\u0100\1\103"+
    "\1\0\1\377\1\0\4\377\10\0\1\50\5\0\2\377"+
    "\12\0\1\u0100\2\0\1\377\1\0\4\377\15\0\1\107"+
    "\2\u0101\12\107\1\u0102\1\143\1\107\1\u0101\1\107\4\u0101"+
    "\10\107\1\113\5\107\2\u0101\12\107\1\u0103\2\107\1\u0101"+
    "\1\107\4\u0101\15\107\1\0\2\361\12\0\1\362\1\53"+
    "\1\0\1\361\1\0\4\361\15\0\1\61\2\u0104\12\61"+
    "\1\u0105\1\120\1\76\1\u0104\1\61\4\u0104\10\61\1\63"+
    "\5\61\2\u0104\12\61\1\u0105\1\61\1\76\1\u0104\1\61"+
    "\4\u0104\15\61\1\0\2\u0106\12\0\1\u0107\1\103\1\0"+
    "\1\u0106\1\0\4\u0106\10\0\1\50\5\0\2\u0106\12\0"+
    "\1\u0107\2\0\1\u0106\1\0\4\u0106\15\0\1\107\2\u0108"+
    "\12\107\1\u0109\1\143\1\107\1\u0108\1\107\4\u0108\10\107"+
    "\1\113\5\107\2\u0108\12\107\1\u010a\2\107\1\u0108\1\107"+
    "\4\u0108\15\107\1\0\2\370\12\0\1\371\1\53\1\0"+
    "\1\370\1\0\4\370\15\0\1\61\2\u010b\12\61\1\u010c"+
    "\1\120\1\76\1\u010b\1\61\4\u010b\10\61\1\63\5\61"+
    "\2\u010b\12\61\1\u010c\1\61\1\76\1\u010b\1\61\4\u010b"+
    "\15\61\1\0\2\u010d\12\0\1\u010e\1\103\1\0\1\u010d"+
    "\1\0\4\u010d\10\0\1\50\5\0\2\u010d\12\0\1\u010e"+
    "\2\0\1\u010d\1\0\4\u010d\15\0\1\107\2\u010f\12\107"+
    "\1\u0110\1\143\1\107\1\u010f\1\107\4\u010f\10\107\1\113"+
    "\5\107\2\u010f\12\107\1\u0111\2\107\1\u010f\1\107\4\u010f"+
    "\15\107\1\0\2\377\12\0\1\u0100\1\53\1\0\1\377"+
    "\1\0\4\377\15\0\1\61\2\u0112\12\61\1\u0113\1\120"+
    "\1\76\1\u0112\1\61\4\u0112\10\61\1\63\5\61\2\u0112"+
    "\12\61\1\u0113\1\61\1\76\1\u0112\1\61\4\u0112\15\61"+
    "\1\0\2\u0114\12\0\1\u0115\1\103\1\0\1\u0114\1\0"+
    "\4\u0114\10\0\1\50\5\0\2\u0114\12\0\1\u0115\2\0"+
    "\1\u0114\1\0\4\u0114\15\0\1\107\2\u0116\12\107\1\u0117"+
    "\1\143\1\107\1\u0116\1\107\4\u0116\10\107\1\113\5\107"+
    "\2\u0116\12\107\1\u0118\2\107\1\u0116\1\107\4\u0116\15\107"+
    "\1\0\2\u0106\12\0\1\u0107\1\53\1\0\1\u0106\1\0"+
    "\4\u0106\15\0\1\61\2\u0119\12\61\1\u011a\1\120\1\76"+
    "\1\u0119\1\61\4\u0119\10\61\1\63\5\61\2\u0119\12\61"+
    "\1\u011a\1\61\1\76\1\u0119\1\61\4\u0119\15\61\1\0"+
    "\2\u011b\12\0\1\u011c\1\103\1\0\1\u011b\1\0\4\u011b"+
    "\10\0\1\50\5\0\2\u011b\12\0\1\u011c\2\0\1\u011b"+
    "\1\0\4\u011b\15\0\1\107\2\u011d\12\107\1\u011e\1\143"+
    "\1\107\1\u011d\1\107\4\u011d\10\107\1\113\5\107\2\u011d"+
    "\12\107\1\u011f\2\107\1\u011d\1\107\4\u011d\15\107\1\0"+
    "\2\u010d\12\0\1\u010e\1\53\1\0\1\u010d\1\0\4\u010d"+
    "\15\0\1\61\2\u0120\12\61\1\u0121\1\120\1\76\1\u0120"+
    "\1\61\4\u0120\10\61\1\63\5\61\2\u0120\12\61\1\u0121"+
    "\1\61\1\76\1\u0120\1\61\4\u0120\15\61\1\0\2\u0122"+
    "\12\0\1\u0123\1\103\1\0\1\u0122\1\0\4\u0122\10\0"+
    "\1\50\5\0\2\u0122\12\0\1\u0123\2\0\1\u0122\1\0"+
    "\4\u0122\15\0\1\107\2\u0124\12\107\1\u0125\1\143\1\107"+
    "\1\u0124\1\107\4\u0124\10\107\1\113\5\107\2\u0124\12\107"+
    "\1\u0126\2\107\1\u0124\1\107\4\u0124\15\107\1\0\2\u0114"+
    "\12\0\1\u0115\1\53\1\0\1\u0114\1\0\4\u0114\15\0"+
    "\1\61\2\u0127\12\61\1\u0128\1\120\1\76\1\u0127\1\61"+
    "\4\u0127\10\61\1\63\5\61\2\u0127\12\61\1\u0128\1\61"+
    "\1\76\1\u0127\1\61\4\u0127\15\61\1\0\2\u0129\12\0"+
    "\1\u012a\1\103\1\0\1\u0129\1\0\4\u0129\10\0\1\50"+
    "\5\0\2\u0129\12\0\1\u012a\2\0\1\u0129\1\0\4\u0129"+
    "\15\0\1\107\2\u012b\12\107\1\u012c\1\143\1\107\1\u012b"+
    "\1\107\4\u012b\10\107\1\113\5\107\2\u012b\12\107\1\u012d"+
    "\2\107\1\u012b\1\107\4\u012b\15\107\1\0\2\u011b\12\0"+
    "\1\u011c\1\53\1\0\1\u011b\1\0\4\u011b\15\0\1\61"+
    "\2\u012e\12\61\1\u012f\1\120\1\76\1\u012e\1\61\4\u012e"+
    "\10\61\1\63\5\61\2\u012e\12\61\1\u012f\1\61\1\76"+
    "\1\u012e\1\61\4\u012e\15\61\1\0\2\u0130\12\0\1\u0131"+
    "\1\103\1\0\1\u0130\1\0\4\u0130\10\0\1\50\5\0"+
    "\2\u0130\12\0\1\u0131\2\0\1\u0130\1\0\4\u0130\15\0"+
    "\1\107\2\u0132\12\107\1\u0133\1\143\1\107\1\u0132\1\107"+
    "\4\u0132\10\107\1\113\5\107\2\u0132\12\107\1\u0134\2\107"+
    "\1\u0132\1\107\4\u0132\15\107\1\0\2\u0122\12\0\1\u0123"+
    "\1\53\1\0\1\u0122\1\0\4\u0122\15\0\1\61\2\u0135"+
    "\12\61\1\u0136\1\120\1\76\1\u0135\1\61\4\u0135\10\61"+
    "\1\63\5\61\2\u0135\12\61\1\u0136\1\61\1\76\1\u0135"+
    "\1\61\4\u0135\15\61\1\0\2\u0137\12\0\1\u0138\1\103"+
    "\1\0\1\u0137\1\0\4\u0137\10\0\1\50\5\0\2\u0137"+
    "\12\0\1\u0138\2\0\1\u0137\1\0\4\u0137\15\0\1\107"+
    "\2\u0139\12\107\1\u013a\1\143\1\107\1\u0139\1\107\4\u0139"+
    "\10\107\1\113\5\107\2\u0139\12\107\1\u013b\2\107\1\u0139"+
    "\1\107\4\u0139\15\107\1\0\2\u0129\12\0\1\u012a\1\53"+
    "\1\0\1\u0129\1\0\4\u0129\15\0\1\61\2\u013c\12\61"+
    "\1\u013d\1\120\1\76\1\u013c\1\61\4\u013c\10\61\1\63"+
    "\5\61\2\u013c\12\61\1\u013d\1\61\1\76\1\u013c\1\61"+
    "\4\u013c\15\61\1\0\2\u013e\12\0\1\u013f\1\103\1\0"+
    "\1\u013e\1\0\4\u013e\10\0\1\50\5\0\2\u013e\12\0"+
    "\1\u013f\2\0\1\u013e\1\0\4\u013e\15\0\1\107\2\u0140"+
    "\12\107\1\u0141\1\143\1\107\1\u0140\1\107\4\u0140\10\107"+
    "\1\113\5\107\2\u0140\12\107\1\u0142\2\107\1\u0140\1\107"+
    "\4\u0140\15\107\1\0\2\u0130\12\0\1\u0131\1\53\1\0"+
    "\1\u0130\1\0\4\u0130\15\0\1\61\2\u0143\12\61\1\u0144"+
    "\1\120\1\76\1\u0143\1\61\4\u0143\10\61\1\63\5\61"+
    "\2\u0143\12\61\1\u0144\1\61\1\76\1\u0143\1\61\4\u0143"+
    "\15\61\1\0\2\u0145\12\0\1\u0146\1\103\1\0\1\u0145"+
    "\1\0\4\u0145\10\0\1\50\5\0\2\u0145\12\0\1\u0146"+
    "\2\0\1\u0145\1\0\4\u0145\15\0\1\107\2\u0147\12\107"+
    "\1\u0148\1\143\1\107\1\u0147\1\107\4\u0147\10\107\1\113"+
    "\5\107\2\u0147\12\107\1\u0149\2\107\1\u0147\1\107\4\u0147"+
    "\15\107\1\0\2\u0137\12\0\1\u0138\1\53\1\0\1\u0137"+
    "\1\0\4\u0137\15\0\1\61\2\u014a\12\61\1\u014b\1\120"+
    "\1\76\1\u014a\1\61\4\u014a\10\61\1\63\5\61\2\u014a"+
    "\12\61\1\u014b\1\61\1\76\1\u014a\1\61\4\u014a\15\61"+
    "\1\0\2\u014c\12\0\1\u014d\1\103\1\0\1\u014c\1\0"+
    "\4\u014c\10\0\1\50\5\0\2\u014c\12\0\1\u014d\2\0"+
    "\1\u014c\1\0\4\u014c\15\0\1\107\2\u014e\12\107\1\u014f"+
    "\1\143\1\107\1\u014e\1\107\4\u014e\10\107\1\113\5\107"+
    "\2\u014e\12\107\1\u0150\2\107\1\u014e\1\107\4\u014e\15\107"+
    "\1\0\2\u013e\12\0\1\u013f\1\53\1\0\1\u013e\1\0"+
    "\4\u013e\15\0\1\61\2\u0151\12\61\1\u0152\1\120\1\76"+
    "\1\u0151\1\61\4\u0151\10\61\1\63\5\61\2\u0151\12\61"+
    "\1\u0152\1\61\1\76\1\u0151\1\61\4\u0151\15\61\1\0"+
    "\2\u0153\12\0\1\u0154\1\103\1\0\1\u0153\1\0\4\u0153"+
    "\10\0\1\50\5\0\2\u0153\12\0\1\u0154\2\0\1\u0153"+
    "\1\0\4\u0153\15\0\1\107\2\u0155\12\107\1\u0156\1\143"+
    "\1\107\1\u0155\1\107\4\u0155\10\107\1\113\5\107\2\u0155"+
    "\12\107\1\u0157\2\107\1\u0155\1\107\4\u0155\15\107\1\0"+
    "\2\u0145\12\0\1\u0146\1\53\1\0\1\u0145\1\0\4\u0145"+
    "\15\0\1\61\2\u0158\12\61\1\u0159\1\120\1\76\1\u0158"+
    "\1\61\4\u0158\10\61\1\63\5\61\2\u0158\12\61\1\u0159"+
    "\1\61\1\76\1\u0158\1\61\4\u0158\15\61\1\0\2\u015a"+
    "\12\0\1\u015b\1\103\1\0\1\u015a\1\0\4\u015a\10\0"+
    "\1\50\5\0\2\u015a\12\0\1\u015b\2\0\1\u015a\1\0"+
    "\4\u015a\15\0\1\107\2\u015c\12\107\1\u015d\1\143\1\107"+
    "\1\u015c\1\107\4\u015c\10\107\1\113\5\107\2\u015c\12\107"+
    "\1\u015e\2\107\1\u015c\1\107\4\u015c\15\107\1\0\2\u014c"+
    "\12\0\1\u014d\1\53\1\0\1\u014c\1\0\4\u014c\15\0"+
    "\1\61\2\u015f\12\61\1\u0160\1\120\1\76\1\u015f\1\61"+
    "\4\u015f\10\61\1\63\5\61\2\u015f\12\61\1\u0160\1\61"+
    "\1\76\1\u015f\1\61\4\u015f\15\61\1\0\2\u0161\12\0"+
    "\1\u0162\1\103\1\0\1\u0161\1\0\4\u0161\10\0\1\50"+
    "\5\0\2\u0161\12\0\1\u0162\2\0\1\u0161\1\0\4\u0161"+
    "\15\0\1\107\2\u0163\12\107\1\u0164\1\143\1\107\1\u0163"+
    "\1\107\4\u0163\10\107\1\113\5\107\2\u0163\12\107\1\u0165"+
    "\2\107\1\u0163\1\107\4\u0163\15\107\1\0\2\u0153\12\0"+
    "\1\u0154\1\53\1\0\1\u0153\1\0\4\u0153\15\0\1\61"+
    "\2\u0166\12\61\1\u0167\1\120\1\76\1\u0166\1\61\4\u0166"+
    "\10\61\1\63\5\61\2\u0166\12\61\1\u0167\1\61\1\76"+
    "\1\u0166\1\61\4\u0166\15\61\1\0\2\u0168\12\0\1\u0169"+
    "\1\103\1\0\1\u0168\1\0\4\u0168\10\0\1\50\5\0"+
    "\2\u0168\12\0\1\u0169\2\0\1\u0168\1\0\4\u0168\15\0"+
    "\1\107\2\u016a\12\107\1\u016b\1\143\1\107\1\u016a\1\107"+
    "\4\u016a\10\107\1\113\5\107\2\u016a\12\107\1\u016c\2\107"+
    "\1\u016a\1\107\4\u016a\15\107\1\0\2\u015a\12\0\1\u015b"+
    "\1\53\1\0\1\u015a\1\0\4\u015a\15\0\1\61\2\u016d"+
    "\12\61\1\u016e\1\120\1\76\1\u016d\1\61\4\u016d\10\61"+
    "\1\63\5\61\2\u016d\12\61\1\u016e\1\61\1\76\1\u016d"+
    "\1\61\4\u016d\15\61\1\0\2\u016f\12\0\1\u0170\1\103"+
    "\1\0\1\u016f\1\0\4\u016f\10\0\1\50\5\0\2\u016f"+
    "\12\0\1\u0170\2\0\1\u016f\1\0\4\u016f\15\0\1\107"+
    "\2\u0171\12\107\1\u0172\1\143\1\107\1\u0171\1\107\4\u0171"+
    "\10\107\1\113\5\107\2\u0171\12\107\1\u0173\2\107\1\u0171"+
    "\1\107\4\u0171\15\107\1\0\2\u0161\12\0\1\u0162\1\53"+
    "\1\0\1\u0161\1\0\4\u0161\15\0\1\61\2\u0174\12\61"+
    "\1\u0175\1\120\1\76\1\u0174\1\61\4\u0174\10\61\1\63"+
    "\5\61\2\u0174\12\61\1\u0175\1\61\1\76\1\u0174\1\61"+
    "\4\u0174\15\61\1\0\2\u0176\12\0\1\u0177\1\103\1\0"+
    "\1\u0176\1\0\4\u0176\10\0\1\50\5\0\2\u0176\12\0"+
    "\1\u0177\2\0\1\u0176\1\0\4\u0176\15\0\1\107\2\u0178"+
    "\12\107\1\u0179\1\143\1\107\1\u0178\1\107\4\u0178\10\107"+
    "\1\113\5\107\2\u0178\12\107\1\u017a\2\107\1\u0178\1\107"+
    "\4\u0178\15\107\1\0\2\u0168\12\0\1\u0169\1\53\1\0"+
    "\1\u0168\1\0\4\u0168\15\0\1\61\2\u017b\12\61\1\u017c"+
    "\1\120\1\76\1\u017b\1\61\4\u017b\10\61\1\63\5\61"+
    "\2\u017b\12\61\1\u017c\1\61\1\76\1\u017b\1\61\4\u017b"+
    "\15\61\1\0\2\u017d\12\0\1\u017e\1\103\1\0\1\u017d"+
    "\1\0\4\u017d\10\0\1\50\5\0\2\u017d\12\0\1\u017e"+
    "\2\0\1\u017d\1\0\4\u017d\15\0\1\107\2\u017f\12\107"+
    "\1\u0180\1\143\1\107\1\u017f\1\107\4\u017f\10\107\1\113"+
    "\5\107\2\u017f\12\107\1\u0181\2\107\1\u017f\1\107\4\u017f"+
    "\15\107\1\0\2\u016f\12\0\1\u0170\1\53\1\0\1\u016f"+
    "\1\0\4\u016f\15\0\1\61\2\u0182\12\61\1\u0183\1\120"+
    "\1\76\1\u0182\1\61\4\u0182\10\61\1\63\5\61\2\u0182"+
    "\12\61\1\u0183\1\61\1\76\1\u0182\1\61\4\u0182\15\61"+
    "\1\0\2\u0184\12\0\1\u0185\1\103\1\0\1\u0184\1\0"+
    "\4\u0184\10\0\1\50\5\0\2\u0184\12\0\1\u0185\2\0"+
    "\1\u0184\1\0\4\u0184\15\0\1\107\2\u0186\12\107\1\u0187"+
    "\1\143\1\107\1\u0186\1\107\4\u0186\10\107\1\113\5\107"+
    "\2\u0186\12\107\1\u0188\2\107\1\u0186\1\107\4\u0186\15\107"+
    "\1\0\2\u0176\12\0\1\u0177\1\53\1\0\1\u0176\1\0"+
    "\4\u0176\15\0\1\61\2\u0189\12\61\1\u018a\1\120\1\76"+
    "\1\u0189\1\61\4\u0189\10\61\1\63\5\61\2\u0189\12\61"+
    "\1\u018a\1\61\1\76\1\u0189\1\61\4\u0189\15\61\1\0"+
    "\2\u018b\12\0\1\u018c\1\103\1\0\1\u018b\1\0\4\u018b"+
    "\10\0\1\50\5\0\2\u018b\12\0\1\u018c\2\0\1\u018b"+
    "\1\0\4\u018b\15\0\1\107\2\u018d\12\107\1\u018e\1\143"+
    "\1\107\1\u018d\1\107\4\u018d\10\107\1\113\5\107\2\u018d"+
    "\12\107\1\u018f\2\107\1\u018d\1\107\4\u018d\15\107\1\0"+
    "\2\u017d\12\0\1\u017e\1\53\1\0\1\u017d\1\0\4\u017d"+
    "\15\0\1\61\2\u0190\12\61\1\u0191\1\120\1\76\1\u0190"+
    "\1\61\4\u0190\10\61\1\63\5\61\2\u0190\12\61\1\u0191"+
    "\1\61\1\76\1\u0190\1\61\4\u0190\15\61\1\0\2\u0192"+
    "\12\0\1\u0193\1\103\1\0\1\u0192\1\0\4\u0192\10\0"+
    "\1\50\5\0\2\u0192\12\0\1\u0193\2\0\1\u0192\1\0"+
    "\4\u0192\15\0\1\107\2\u0194\12\107\1\u0195\1\143\1\107"+
    "\1\u0194\1\107\4\u0194\10\107\1\113\5\107\2\u0194\12\107"+
    "\1\u0196\2\107\1\u0194\1\107\4\u0194\15\107\1\0\2\u0184"+
    "\12\0\1\u0185\1\53\1\0\1\u0184\1\0\4\u0184\15\0"+
    "\1\61\2\u0197\12\61\1\u0198\1\120\1\76\1\u0197\1\61"+
    "\4\u0197\10\61\1\63\5\61\2\u0197\12\61\1\u0198\1\61"+
    "\1\76\1\u0197\1\61\4\u0197\15\61\1\0\2\u0199\12\0"+
    "\1\u019a\1\103\1\0\1\u0199\1\0\4\u0199\10\0\1\50"+
    "\5\0\2\u0199\12\0\1\u019a\2\0\1\u0199\1\0\4\u0199"+
    "\15\0\1\107\2\u019b\12\107\1\u019c\1\143\1\107\1\u019b"+
    "\1\107\4\u019b\10\107\1\113\5\107\2\u019b\12\107\1\u019d"+
    "\2\107\1\u019b\1\107\4\u019b\15\107\1\0\2\u018b\12\0"+
    "\1\u018c\1\53\1\0\1\u018b\1\0\4\u018b\15\0\1\61"+
    "\2\u019e\12\61\1\u019f\1\120\1\76\1\u019e\1\61\4\u019e"+
    "\10\61\1\63\5\61\2\u019e\12\61\1\u019f\1\61\1\76"+
    "\1\u019e\1\61\4\u019e\15\61\1\0\2\u01a0\12\0\1\u01a1"+
    "\1\103\1\0\1\u01a0\1\0\4\u01a0\10\0\1\50\5\0"+
    "\2\u01a0\12\0\1\u01a1\2\0\1\u01a0\1\0\4\u01a0\15\0"+
    "\1\107\2\u01a2\12\107\1\u01a3\1\143\1\107\1\u01a2\1\107"+
    "\4\u01a2\10\107\1\113\5\107\2\u01a2\12\107\1\u01a4\2\107"+
    "\1\u01a2\1\107\4\u01a2\15\107\1\0\2\u0192\12\0\1\u0193"+
    "\1\53\1\0\1\u0192\1\0\4\u0192\15\0\1\61\2\u01a5"+
    "\12\61\1\u01a6\1\120\1\76\1\u01a5\1\61\4\u01a5\10\61"+
    "\1\63\5\61\2\u01a5\12\61\1\u01a6\1\61\1\76\1\u01a5"+
    "\1\61\4\u01a5\15\61\1\0\2\u01a7\12\0\1\u01a8\1\103"+
    "\1\0\1\u01a7\1\0\4\u01a7\10\0\1\50\5\0\2\u01a7"+
    "\12\0\1\u01a8\2\0\1\u01a7\1\0\4\u01a7\15\0\1\107"+
    "\2\u01a9\12\107\1\u01aa\1\143\1\107\1\u01a9\1\107\4\u01a9"+
    "\10\107\1\113\5\107\2\u01a9\12\107\1\u01ab\2\107\1\u01a9"+
    "\1\107\4\u01a9\15\107\1\0\2\u0199\12\0\1\u019a\1\53"+
    "\1\0\1\u0199\1\0\4\u0199\15\0\1\61\2\u01ac\12\61"+
    "\1\u01ad\1\120\1\76\1\u01ac\1\61\4\u01ac\10\61\1\63"+
    "\5\61\2\u01ac\12\61\1\u01ad\1\61\1\76\1\u01ac\1\61"+
    "\4\u01ac\15\61\1\0\2\u01ae\12\0\1\u01af\1\103\1\0"+
    "\1\u01ae\1\0\4\u01ae\10\0\1\50\5\0\2\u01ae\12\0"+
    "\1\u01af\2\0\1\u01ae\1\0\4\u01ae\15\0\1\107\2\u01b0"+
    "\12\107\1\u01b1\1\143\1\107\1\u01b0\1\107\4\u01b0\10\107"+
    "\1\113\5\107\2\u01b0\12\107\1\u01b2\2\107\1\u01b0\1\107"+
    "\4\u01b0\15\107\1\0\2\u01a0\12\0\1\u01a1\1\53\1\0"+
    "\1\u01a0\1\0\4\u01a0\15\0\1\61\2\u01b3\12\61\1\u01b4"+
    "\1\120\1\76\1\u01b3\1\61\4\u01b3\10\61\1\63\5\61"+
    "\2\u01b3\12\61\1\u01b4\1\61\1\76\1\u01b3\1\61\4\u01b3"+
    "\15\61\1\0\2\u01b5\12\0\1\u01b6\1\103\1\0\1\u01b5"+
    "\1\0\4\u01b5\10\0\1\50\5\0\2\u01b5\12\0\1\u01b6"+
    "\2\0\1\u01b5\1\0\4\u01b5\15\0\1\107\2\u01b7\12\107"+
    "\1\u01b8\1\143\1\107\1\u01b7\1\107\4\u01b7\10\107\1\113"+
    "\5\107\2\u01b7\12\107\1\u01b9\2\107\1\u01b7\1\107\4\u01b7"+
    "\15\107\1\0\2\u01a7\12\0\1\u01a8\1\53\1\0\1\u01a7"+
    "\1\0\4\u01a7\15\0\1\61\2\u01ba\12\61\1\u01bb\1\120"+
    "\1\76\1\u01ba\1\61\4\u01ba\10\61\1\63\5\61\2\u01ba"+
    "\12\61\1\u01bb\1\61\1\76\1\u01ba\1\61\4\u01ba\15\61"+
    "\1\0\2\u01bc\12\0\1\u01bd\1\103\1\0\1\u01bc\1\0"+
    "\4\u01bc\10\0\1\50\5\0\2\u01bc\12\0\1\u01bd\2\0"+
    "\1\u01bc\1\0\4\u01bc\15\0\1\107\2\u01be\12\107\1\u01bf"+
    "\1\143\1\107\1\u01be\1\107\4\u01be\10\107\1\113\5\107"+
    "\2\u01be\12\107\1\u01c0\2\107\1\u01be\1\107\4\u01be\15\107"+
    "\1\0\2\u01ae\12\0\1\u01af\1\53\1\0\1\u01ae\1\0"+
    "\4\u01ae\15\0\1\61\2\u01c1\12\61\1\u01c2\1\120\1\76"+
    "\1\u01c1\1\61\4\u01c1\10\61\1\63\5\61\2\u01c1\12\61"+
    "\1\u01c2\1\61\1\76\1\u01c1\1\61\4\u01c1\15\61\1\0"+
    "\2\u01c3\12\0\1\u01c4\1\103\1\0\1\u01c3\1\0\4\u01c3"+
    "\10\0\1\50\5\0\2\u01c3\12\0\1\u01c4\2\0\1\u01c3"+
    "\1\0\4\u01c3\15\0\1\107\2\u01c5\12\107\1\u01c6\1\143"+
    "\1\107\1\u01c5\1\107\4\u01c5\10\107\1\113\5\107\2\u01c5"+
    "\12\107\1\u01c7\2\107\1\u01c5\1\107\4\u01c5\15\107\1\0"+
    "\2\u01b5\12\0\1\u01b6\1\53\1\0\1\u01b5\1\0\4\u01b5"+
    "\15\0\1\61\2\u01c8\12\61\1\u01c9\1\120\1\76\1\u01c8"+
    "\1\61\4\u01c8\10\61\1\63\5\61\2\u01c8\12\61\1\u01c9"+
    "\1\61\1\76\1\u01c8\1\61\4\u01c8\15\61\1\0\2\u01ca"+
    "\12\0\1\u01cb\1\103\1\0\1\u01ca\1\0\4\u01ca\10\0"+
    "\1\50\5\0\2\u01ca\12\0\1\u01cb\2\0\1\u01ca\1\0"+
    "\4\u01ca\15\0\1\107\2\u01cc\12\107\1\u01cd\1\143\1\107"+
    "\1\u01cc\1\107\4\u01cc\10\107\1\113\5\107\2\u01cc\12\107"+
    "\1\u01ce\2\107\1\u01cc\1\107\4\u01cc\15\107\1\0\2\u01bc"+
    "\12\0\1\u01bd\1\53\1\0\1\u01bc\1\0\4\u01bc\15\0"+
    "\1\61\2\u01cf\12\61\1\u01d0\1\120\1\76\1\u01cf\1\61"+
    "\4\u01cf\10\61\1\63\5\61\2\u01cf\12\61\1\u01d0\1\61"+
    "\1\76\1\u01cf\1\61\4\u01cf\15\61\1\0\2\u01d1\12\0"+
    "\1\u01d2\1\103\1\0\1\u01d1\1\0\4\u01d1\10\0\1\50"+
    "\5\0\2\u01d1\12\0\1\u01d2\2\0\1\u01d1\1\0\4\u01d1"+
    "\15\0\1\107\2\u01d3\12\107\1\u01d4\1\143\1\107\1\u01d3"+
    "\1\107\4\u01d3\10\107\1\113\5\107\2\u01d3\12\107\1\u01d5"+
    "\2\107\1\u01d3\1\107\4\u01d3\15\107\1\0\2\u01c3\12\0"+
    "\1\u01c4\1\53\1\0\1\u01c3\1\0\4\u01c3\15\0\1\61"+
    "\2\u01d6\12\61\1\u01d7\1\120\1\76\1\u01d6\1\61\4\u01d6"+
    "\10\61\1\63\5\61\2\u01d6\12\61\1\u01d7\1\61\1\76"+
    "\1\u01d6\1\61\4\u01d6\15\61\1\0\2\u01d8\12\0\1\u01d9"+
    "\1\103\1\0\1\u01d8\1\0\4\u01d8\10\0\1\50\5\0"+
    "\2\u01d8\12\0\1\u01d9\2\0\1\u01d8\1\0\4\u01d8\15\0"+
    "\1\107\2\u01da\12\107\1\u01db\1\143\1\107\1\u01da\1\107"+
    "\4\u01da\10\107\1\113\5\107\2\u01da\12\107\1\u01dc\2\107"+
    "\1\u01da\1\107\4\u01da\15\107\1\0\2\u01ca\12\0\1\u01cb"+
    "\1\53\1\0\1\u01ca\1\0\4\u01ca\15\0\1\61\2\u01dd"+
    "\12\61\1\u01de\1\120\1\76\1\u01dd\1\61\4\u01dd\10\61"+
    "\1\63\5\61\2\u01dd\12\61\1\u01de\1\61\1\76\1\u01dd"+
    "\1\61\4\u01dd\15\61\1\0\2\u01df\12\0\1\u01e0\1\103"+
    "\1\0\1\u01df\1\0\4\u01df\10\0\1\50\5\0\2\u01df"+
    "\12\0\1\u01e0\2\0\1\u01df\1\0\4\u01df\15\0\1\107"+
    "\2\u01e1\12\107\1\u01e2\1\143\1\107\1\u01e1\1\107\4\u01e1"+
    "\10\107\1\113\5\107\2\u01e1\12\107\1\u01e3\2\107\1\u01e1"+
    "\1\107\4\u01e1\15\107\1\0\2\u01d1\12\0\1\u01d2\1\53"+
    "\1\0\1\u01d1\1\0\4\u01d1\15\0\1\61\2\u01e4\12\61"+
    "\1\u01e5\1\120\1\76\1\u01e4\1\61\4\u01e4\10\61\1\63"+
    "\5\61\2\u01e4\12\61\1\u01e5\1\61\1\76\1\u01e4\1\61"+
    "\4\u01e4\15\61\1\0\2\u01e6\12\0\1\u01e7\1\103\1\0"+
    "\1\u01e6\1\0\4\u01e6\10\0\1\50\5\0\2\u01e6\12\0"+
    "\1\u01e7\2\0\1\u01e6\1\0\4\u01e6\15\0\1\107\2\u01e8"+
    "\12\107\1\u01e9\1\143\1\107\1\u01e8\1\107\4\u01e8\10\107"+
    "\1\113\5\107\2\u01e8\12\107\1\u01ea\2\107\1\u01e8\1\107"+
    "\4\u01e8\15\107\1\0\2\u01d8\12\0\1\u01d9\1\53\1\0"+
    "\1\u01d8\1\0\4\u01d8\15\0\1\61\2\u01eb\12\61\1\u01ec"+
    "\1\120\1\76\1\u01eb\1\61\4\u01eb\10\61\1\63\5\61"+
    "\2\u01eb\12\61\1\u01ec\1\61\1\76\1\u01eb\1\61\4\u01eb"+
    "\15\61\1\0\2\u01ed\12\0\1\u01ee\1\103\1\0\1\u01ed"+
    "\1\0\4\u01ed\10\0\1\50\5\0\2\u01ed\12\0\1\u01ee"+
    "\2\0\1\u01ed\1\0\4\u01ed\15\0\1\107\2\u01ef\12\107"+
    "\1\u01f0\1\143\1\107\1\u01ef\1\107\4\u01ef\10\107\1\113"+
    "\5\107\2\u01ef\12\107\1\u01f1\2\107\1\u01ef\1\107\4\u01ef"+
    "\15\107\1\0\2\u01df\12\0\1\u01e0\1\53\1\0\1\u01df"+
    "\1\0\4\u01df\15\0\1\61\2\u01f2\12\61\1\u01f3\1\120"+
    "\1\76\1\u01f2\1\61\4\u01f2\10\61\1\63\5\61\2\u01f2"+
    "\12\61\1\u01f3\1\61\1\76\1\u01f2\1\61\4\u01f2\15\61"+
    "\1\0\2\u01f4\12\0\1\u01f5\1\103\1\0\1\u01f4\1\0"+
    "\4\u01f4\10\0\1\50\5\0\2\u01f4\12\0\1\u01f5\2\0"+
    "\1\u01f4\1\0\4\u01f4\15\0\1\107\2\u01f6\12\107\1\u01f7"+
    "\1\143\1\107\1\u01f6\1\107\4\u01f6\10\107\1\113\5\107"+
    "\2\u01f6\12\107\1\u01f8\2\107\1\u01f6\1\107\4\u01f6\15\107"+
    "\1\0\2\u01e6\12\0\1\u01e7\1\53\1\0\1\u01e6\1\0"+
    "\4\u01e6\15\0\1\61\2\u01f9\12\61\1\u01fa\1\120\1\76"+
    "\1\u01f9\1\61\4\u01f9\10\61\1\63\5\61\2\u01f9\12\61"+
    "\1\u01fa\1\61\1\76\1\u01f9\1\61\4\u01f9\15\61\1\0"+
    "\2\u01fb\12\0\1\u01fc\1\103\1\0\1\u01fb\1\0\4\u01fb"+
    "\10\0\1\50\5\0\2\u01fb\12\0\1\u01fc\2\0\1\u01fb"+
    "\1\0\4\u01fb\15\0\1\107\2\u01fd\12\107\1\u01fe\1\143"+
    "\1\107\1\u01fd\1\107\4\u01fd\10\107\1\113\5\107\2\u01fd"+
    "\12\107\1\u01ff\2\107\1\u01fd\1\107\4\u01fd\15\107\1\0"+
    "\2\u01ed\12\0\1\u01ee\1\53\1\0\1\u01ed\1\0\4\u01ed"+
    "\15\0\1\61\2\u0200\12\61\1\u0201\1\120\1\76\1\u0200"+
    "\1\61\4\u0200\10\61\1\63\5\61\2\u0200\12\61\1\u0201"+
    "\1\61\1\76\1\u0200\1\61\4\u0200\15\61\1\0\2\u0202"+
    "\12\0\1\u0203\1\103\1\0\1\u0202\1\0\4\u0202\10\0"+
    "\1\50\5\0\2\u0202\12\0\1\u0203\2\0\1\u0202\1\0"+
    "\4\u0202\15\0\1\107\2\u0204\12\107\1\u0205\1\143\1\107"+
    "\1\u0204\1\107\4\u0204\10\107\1\113\5\107\2\u0204\12\107"+
    "\1\u0206\2\107\1\u0204\1\107\4\u0204\15\107\1\0\2\u01f4"+
    "\12\0\1\u01f5\1\53\1\0\1\u01f4\1\0\4\u01f4\15\0"+
    "\1\61\2\u0207\12\61\1\u0208\1\120\1\76\1\u0207\1\61"+
    "\4\u0207\10\61\1\63\5\61\2\u0207\12\61\1\u0208\1\61"+
    "\1\76\1\u0207\1\61\4\u0207\15\61\1\0\2\u0209\12\0"+
    "\1\u020a\1\103\1\0\1\u0209\1\0\4\u0209\10\0\1\50"+
    "\5\0\2\u0209\12\0\1\u020a\2\0\1\u0209\1\0\4\u0209"+
    "\15\0\1\107\2\u020b\12\107\1\u020c\1\143\1\107\1\u020b"+
    "\1\107\4\u020b\10\107\1\113\5\107\2\u020b\12\107\1\u020d"+
    "\2\107\1\u020b\1\107\4\u020b\15\107\1\0\2\u01fb\12\0"+
    "\1\u01fc\1\53\1\0\1\u01fb\1\0\4\u01fb\15\0\1\61"+
    "\2\u020e\12\61\1\u020f\1\120\1\76\1\u020e\1\61\4\u020e"+
    "\10\61\1\63\5\61\2\u020e\12\61\1\u020f\1\61\1\76"+
    "\1\u020e\1\61\4\u020e\15\61\1\0\2\u0210\12\0\1\u0211"+
    "\1\103\1\0\1\u0210\1\0\4\u0210\10\0\1\50\5\0"+
    "\2\u0210\12\0\1\u0211\2\0\1\u0210\1\0\4\u0210\15\0"+
    "\1\107\2\u0212\12\107\1\u0213\1\143\1\107\1\u0212\1\107"+
    "\4\u0212\10\107\1\113\5\107\2\u0212\12\107\1\u0214\2\107"+
    "\1\u0212\1\107\4\u0212\15\107\1\0\2\u0202\12\0\1\u0203"+
    "\1\53\1\0\1\u0202\1\0\4\u0202\15\0\1\61\2\u0215"+
    "\12\61\1\u0216\1\120\1\76\1\u0215\1\61\4\u0215\10\61"+
    "\1\63\5\61\2\u0215\12\61\1\u0216\1\61\1\76\1\u0215"+
    "\1\61\4\u0215\15\61\1\0\2\u0217\12\0\1\u0218\1\103"+
    "\1\0\1\u0217\1\0\4\u0217\10\0\1\50\5\0\2\u0217"+
    "\12\0\1\u0218\2\0\1\u0217\1\0\4\u0217\15\0\1\107"+
    "\2\u0219\12\107\1\u021a\1\143\1\107\1\u0219\1\107\4\u0219"+
    "\10\107\1\113\5\107\2\u0219\12\107\1\u021b\2\107\1\u0219"+
    "\1\107\4\u0219\15\107\1\0\2\u0209\12\0\1\u020a\1\53"+
    "\1\0\1\u0209\1\0\4\u0209\15\0\1\61\2\u021c\12\61"+
    "\1\u021d\1\120\1\76\1\u021c\1\61\4\u021c\10\61\1\63"+
    "\5\61\2\u021c\12\61\1\u021d\1\61\1\76\1\u021c\1\61"+
    "\4\u021c\15\61\1\0\2\u021e\13\0\1\103\1\0\1\u021e"+
    "\1\0\4\u021e\10\0\1\50\5\0\2\u021e\15\0\1\u021e"+
    "\1\0\4\u021e\15\0\1\107\2\u021f\12\107\1\u0220\1\143"+
    "\1\107\1\u021f\1\107\4\u021f\10\107\1\113\5\107\2\u021f"+
    "\12\107\1\u0221\2\107\1\u021f\1\107\4\u021f\15\107\1\0"+
    "\2\u0210\12\0\1\u0211\1\53\1\0\1\u0210\1\0\4\u0210"+
    "\15\0\1\61\2\u0222\13\61\1\120\1\76\1\u0222\1\61"+
    "\4\u0222\10\61\1\63\5\61\2\u0222\14\61\1\76\1\u0222"+
    "\1\61\4\u0222\15\61\16\0\1\103\17\0\1\50\4\0"+
    "\1\107\2\u0223\12\107\1\u0224\1\143\1\107\1\u0223\1\107"+
    "\4\u0223\10\107\1\113\5\107\2\u0223\12\107\1\u0225\2\107"+
    "\1\u0223\1\107\4\u0223\15\107\1\0\2\u0217\12\0\1\u0218"+
    "\1\53\1\0\1\u0217\1\0\4\u0217\15\0\16\61\1\120"+
    "\1\76\16\61\1\63\4\61\1\107\2\u0226\12\107\1\126"+
    "\1\143\1\107\1\u0226\1\107\4\u0226\10\107\1\113\5\107"+
    "\2\u0226\12\107\1\71\2\107\1\u0226\1\107\4\u0226\15\107"+
    "\1\0\2\u021e\13\0\1\53\1\0\1\u021e\1\0\4\u021e"+
    "\15\0\15\107\1\126\1\143\17\107\1\113\4\107";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18340];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\2\1\2\11\3\1\1\11\2\1\3\11"+
    "\1\1\1\11\4\1\1\0\1\1\2\0\1\11\1\1"+
    "\7\0\2\1\3\0\1\11\12\0\1\1\14\0\1\11"+
    "\2\0\1\11\3\0\1\1\5\0\1\1\22\0\1\1"+
    "\20\0\1\1\2\0\1\1\74\0\1\1\u0172\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[550];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private static class Token extends MarkdownTokenTypes {}

  private Stack<Integer> stateStack = new Stack<Integer>();

  private boolean isHeader = false;

  private ParseDelimited parseDelimited = new ParseDelimited();

  private static class ParseDelimited {
    char exitChar = 0;
    IElementType returnType = null;
    boolean inlinesAllowed = true;
  }

  private static class LinkDef {
    boolean wasUrl;
    boolean wasParen;
  }

  private static class HtmlHelper {
    private static final String BLOCK_TAGS_STRING =
            "article, header, aside, hgroup, blockquote, hr, iframe, body, li, map, button, " +
            "object, canvas, ol, caption, output, col, p, colgroup, pre, dd, progress, div, " +
            "section, dl, table, td, dt, tbody, embed, textarea, fieldset, tfoot, figcaption, " +
            "th, figure, thead, footer, footer, tr, form, ul, h1, h2, h3, h4, h5, h6, video, " +
            "script, style";

    static final Set<String> BLOCK_TAGS = getBlockTagsSet();

    private static Set<String> getBlockTagsSet() {
      Set<String> result = new HashSet<String>();
      String[] tags = BLOCK_TAGS_STRING.split(", ");
      for (String tag : tags) {
        result.add(tag);
      }
      return result;
    }
  }

  private static IElementType getDelimiterTokenType(char c) {
    switch (c) {
      case '"': return Token.DOUBLE_QUOTE;
      case '\'': return Token.SINGLE_QUOTE;
      case '(': return Token.LPAREN;
      case ')': return Token.RPAREN;
      case '[': return Token.LBRACKET;
      case ']': return Token.RBRACKET;
      case '<': return Token.LT;
      case '>': return Token.GT;
      default: return Token.BAD_CHARACTER;
    }
  }

  private IElementType parseDelimited(IElementType contentsType, boolean allowInlines) {
    char first = yycharat(0);
    char last = yycharat(yylength() - 1);

    stateStack.push(yystate());

    parseDelimited.exitChar = last;
    parseDelimited.returnType = contentsType;
//    parseDelimited.inlinesAllowed = allowInlines;
    parseDelimited.inlinesAllowed = true;

    yybegin(PARSE_DELIMITED);

    yypushback(yylength() - 1);
    return getDelimiterTokenType(first);
  }

  private void processEol() {
    int newlinePos = 1;
    while (newlinePos < yylength() && yycharat(newlinePos) != '\n') {
      newlinePos++;
    }

    // there is always one at 0 so that means there are two at least
    if (newlinePos != yylength()) {
      yypushback(yylength() - newlinePos);
      return;
    }

    yybegin(YYINITIAL);
    yypushback(yylength() - 1);

    isHeader = false;
  }

  private void popState() {
    if (stateStack.isEmpty()) {
      yybegin(AFTER_LINE_START);
    }
    else {
      yybegin(stateStack.pop());
    }
  }

  private void resetState() {
    yypushback(yylength());

    popState();
  }

  private String getTagName() {
    if (yylength() > 1 && yycharat(1) == '/') {
      return yytext().toString().substring(2, yylength() - 1).trim();
    }
    return yytext().toString().substring(1);
  }

  private boolean isBlockTag(String tagName) {
    return HtmlHelper.BLOCK_TAGS.contains(tagName.toLowerCase());
  }

  private boolean canInline() {
    return yystate() == AFTER_LINE_START || yystate() == PARSE_DELIMITED && parseDelimited.inlinesAllowed;
  }

  private IElementType getReturnGeneralized(IElementType defaultType) {
    if (canInline()) {
      return defaultType;
    }
    return parseDelimited.returnType;
  }

  private int countChars(CharSequence s, char c) {
    int result = 0;
    for (int i = 0; i < s.length(); ++i) {
      if (s.charAt(i) == c)
        result++;
    }
    return result;
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MarkdownLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { resetState();
            }
          case 17: break;
          case 2: 
            { return Token.BLOCK_QUOTE;
            }
          case 18: break;
          case 3: 
            { return Token.TEXT;
            }
          case 19: break;
          case 4: 
            { return Token.WHITE_SPACE;
            }
          case 20: break;
          case 5: 
            { int lastSpaces = yytext().toString().indexOf("\n");
    if (lastSpaces >= 2) {
      yypushback(yylength() - lastSpaces);
      return Token.HARD_LINE_BREAK;
    }
    else if (lastSpaces > 0) {
      yypushback(yylength() - lastSpaces);
      return Token.WHITE_SPACE;
    }

    processEol();
    return Token.EOL;
            }
          case 21: break;
          case 6: 
            { return getDelimiterTokenType(yycharat(0));
            }
          case 22: break;
          case 7: 
            { return Token.EXCLAMATION_MARK;
            }
          case 23: break;
          case 8: 
            { return Token.COLON;
            }
          case 24: break;
          case 9: 
            { return getReturnGeneralized(Token.EMPH);
            }
          case 25: break;
          case 10: 
            { if (canInline()) {
      return Token.BACKTICK;
    }
    return parseDelimited.returnType;
            }
          case 26: break;
          case 11: 
            { if (yycharat(0) == parseDelimited.exitChar) {
      yybegin(stateStack.pop());
      return getDelimiterTokenType(yycharat(0));
    }
    return parseDelimited.returnType;
            }
          case 27: break;
          case 12: 
            { return getReturnGeneralized(Token.TEXT);
            }
          case 28: break;
          case 13: 
            { return getReturnGeneralized(Token.ESCAPED_BACKTICKS);
            }
          case 29: break;
          case 14: 
            { return Token.HTML_TAG;
            }
          case 30: break;
          case 15: 
            { return parseDelimited(Token.EMAIL_AUTOLINK, false);
            }
          case 31: break;
          case 16: 
            { return parseDelimited(Token.AUTOLINK, false);
            }
          case 32: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
