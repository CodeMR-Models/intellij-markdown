/* The following code was generated by JFlex 1.4.3 on 12/22/14 6:42 PM */

package org.intellij.markdown.lexer;

import org.intellij.markdown.MarkdownTokenTypes;
import org.intellij.markdown.IElementType;

import java.util.HashSet;
import java.util.Set;
import java.util.Stack;

/* Auto generated File */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/22/14 6:42 PM from the specification file
 * <tt>/Users/orangy/Projects/intellij-markdown/src/org/intellij/markdown/lexer/markdown.flex</tt>
 */
public class _MarkdownLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int CODE = 10;
  public static final int AFTER_LINE_START = 6;
  public static final int TAG_START = 4;
  public static final int HTML_BLOCK = 2;
  public static final int YYINITIAL = 0;
  public static final int PARSE_DELIMITED = 8;
  public static final int CODE_FENCE = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\4\1\40\1\41\1\5\22\0\1\3\1\12\1\6"+
    "\1\42\1\35\2\50\1\10\1\51\1\45\1\43\1\44\1\47\1\13"+
    "\1\34\1\31\12\1\1\25\1\0\1\11\1\30\1\14\1\15\1\33"+
    "\1\22\1\16\1\20\1\21\17\16\1\23\6\16\1\17\1\7\1\24"+
    "\1\32\1\26\1\27\32\2\1\36\1\32\1\37\1\46\6\0\1\40"+
    "\u1fa2\0\2\40\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\2\1\1\2\1\3\3\1\1\4\7\1\3\5"+
    "\1\6\2\7\1\10\1\11\3\12\1\13\1\14\1\15"+
    "\1\16\2\7\2\17\1\3\3\17\1\20\1\21\1\22"+
    "\2\23\2\22\11\0\1\24\1\25\3\0\1\26\2\27"+
    "\1\0\1\27\4\0\1\27\1\30\1\0\1\26\1\0"+
    "\1\26\2\0\2\31\1\5\2\31\2\0\1\32\1\33"+
    "\5\0\1\34\2\0\3\35\3\0\2\22\12\0\1\27"+
    "\6\0\1\32\3\0\1\36\12\0\1\37\2\22\5\0"+
    "\1\40\1\0\1\25\2\0\3\41\2\42\1\0\1\41"+
    "\12\0\1\34\1\0\4\43\2\0\1\40\3\0\1\41"+
    "\1\44\3\0\1\45\2\0\1\46\3\0\1\36\5\0"+
    "\1\45\26\0\1\45\22\0\1\36\2\0\1\36\76\0"+
    "\1\36\u0172\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[683];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\u0150\0\u017a\0\u01a4\0\u01ce\0\u01f8\0\u0222\0\u01ce\0\u024c"+
    "\0\u0276\0\u02a0\0\u01ce\0\u02ca\0\u02f4\0\u031e\0\u0348\0\u0372"+
    "\0\u039c\0\u03c6\0\u03f0\0\u041a\0\u0444\0\u01ce\0\u01ce\0\u046e"+
    "\0\u0498\0\u04c2\0\u01ce\0\u04ec\0\u0516\0\u01ce\0\u01ce\0\u01ce"+
    "\0\u0540\0\u056a\0\u0594\0\u01ce\0\u05be\0\u024c\0\u04ec\0\u0516"+
    "\0\u056a\0\u01ce\0\u05e8\0\u0612\0\u063c\0\u0666\0\u0690\0\u06ba"+
    "\0\u06e4\0\u070e\0\u0738\0\u0762\0\u078c\0\u07b6\0\u07e0\0\u080a"+
    "\0\u01f8\0\u01ce\0\u0834\0\u085e\0\u0888\0\u08b2\0\u08dc\0\u01ce"+
    "\0\u0906\0\u0930\0\u08dc\0\u095a\0\u0984\0\u09ae\0\u031e\0\u09ae"+
    "\0\u01ce\0\u09d8\0\u0a02\0\u0a2c\0\u01ce\0\u0a56\0\u041a\0\u01ce"+
    "\0\u0a80\0\u0aaa\0\u041a\0\u0ad4\0\u046e\0\u0afe\0\u01ce\0\u0b28"+
    "\0\u0b52\0\u0b7c\0\u0ba6\0\u0bd0\0\u0bfa\0\u0c24\0\u0c4e\0\u0c78"+
    "\0\u01ce\0\u0ca2\0\u0c78\0\u0594\0\u05be\0\u063c\0\u0ccc\0\u0cf6"+
    "\0\u0d20\0\u0d4a\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2\0\u0e1c\0\u08dc"+
    "\0\u0e46\0\u0e70\0\u0e70\0\u0e9a\0\u0ec4\0\u0eee\0\u0a02\0\u0f18"+
    "\0\u0f42\0\u0afe\0\u0f6c\0\u0f96\0\u0fc0\0\u01ce\0\u0fea\0\u1014"+
    "\0\u103e\0\u1068\0\u1092\0\u10bc\0\u10e6\0\u1110\0\u113a\0\u1164"+
    "\0\u01ce\0\u118e\0\u11b8\0\u0d20\0\u0d4a\0\u11e2\0\u120c\0\u1236"+
    "\0\u01ce\0\u1260\0\u01ce\0\u128a\0\u12b4\0\u01ce\0\u12de\0\u12b4"+
    "\0\u01ce\0\u1308\0\u1332\0\u0f18\0\u135c\0\u1386\0\u13b0\0\u13da"+
    "\0\u1404\0\u142e\0\u1458\0\u1482\0\u14ac\0\u14d6\0\u01ce\0\u1500"+
    "\0\u01ce\0\u152a\0\u0612\0\u1500\0\u1554\0\u157e\0\u1554\0\u15a8"+
    "\0\u15d2\0\u15fc\0\u128a\0\u01ce\0\u1626\0\u1650\0\u167a\0\u01ce"+
    "\0\u16a4\0\u16ce\0\u01ce\0\u16f8\0\u1722\0\u174c\0\u16f8\0\u1776"+
    "\0\u17a0\0\u17ca\0\u17f4\0\u181e\0\u10bc\0\u1848\0\u1872\0\u189c"+
    "\0\u18c6\0\u18f0\0\u191a\0\u1944\0\u196e\0\u1998\0\u19c2\0\u19ec"+
    "\0\u1a16\0\u1a40\0\u1a6a\0\u1a94\0\u1abe\0\u1ae8\0\u1b12\0\u1b3c"+
    "\0\u1b66\0\u1b90\0\u1bba\0\u16f8\0\u1be4\0\u1c0e\0\u1c38\0\u1c62"+
    "\0\u1c8c\0\u1cb6\0\u1ce0\0\u1d0a\0\u1d34\0\u1d5e\0\u1d88\0\u1db2"+
    "\0\u1ddc\0\u1e06\0\u1e30\0\u1e5a\0\u1e84\0\u1eae\0\u1944\0\u1ed8"+
    "\0\u1f02\0\u196e\0\u1f2c\0\u1f56\0\u1f80\0\u1faa\0\u1fd4\0\u1ffe"+
    "\0\u2028\0\u2052\0\u207c\0\u20a6\0\u20d0\0\u20fa\0\u2124\0\u214e"+
    "\0\u2178\0\u21a2\0\u21cc\0\u21f6\0\u2220\0\u224a\0\u2274\0\u229e"+
    "\0\u22c8\0\u22f2\0\u231c\0\u2346\0\u2370\0\u239a\0\u23c4\0\u23ee"+
    "\0\u2418\0\u2442\0\u246c\0\u2496\0\u24c0\0\u24ea\0\u2514\0\u253e"+
    "\0\u2568\0\u2592\0\u25bc\0\u25e6\0\u2610\0\u263a\0\u2664\0\u268e"+
    "\0\u26b8\0\u26e2\0\u270c\0\u2736\0\u2760\0\u278a\0\u27b4\0\u27de"+
    "\0\u2808\0\u2832\0\u285c\0\u2886\0\u28b0\0\u28da\0\u2904\0\u292e"+
    "\0\u24ea\0\u2958\0\u2982\0\u29ac\0\u29d6\0\u2a00\0\u2a2a\0\u2a54"+
    "\0\u2a7e\0\u2aa8\0\u2ad2\0\u2afc\0\u2b26\0\u2b50\0\u2b7a\0\u2ba4"+
    "\0\u2bce\0\u2bf8\0\u2c22\0\u2c4c\0\u2c76\0\u2ca0\0\u2cca\0\u2cf4"+
    "\0\u2d1e\0\u2d48\0\u2d72\0\u2d9c\0\u2dc6\0\u2df0\0\u2e1a\0\u2e44"+
    "\0\u2e6e\0\u2e98\0\u2ec2\0\u2eec\0\u2f16\0\u2f40\0\u2f6a\0\u2f94"+
    "\0\u2fbe\0\u2fe8\0\u3012\0\u303c\0\u3066\0\u3090\0\u30ba\0\u30e4"+
    "\0\u310e\0\u3138\0\u3162\0\u318c\0\u31b6\0\u31e0\0\u320a\0\u3234"+
    "\0\u325e\0\u3288\0\u32b2\0\u32dc\0\u3306\0\u3330\0\u335a\0\u3384"+
    "\0\u33ae\0\u33d8\0\u3402\0\u342c\0\u3456\0\u3480\0\u34aa\0\u34d4"+
    "\0\u34fe\0\u3528\0\u3552\0\u357c\0\u35a6\0\u35d0\0\u35fa\0\u3624"+
    "\0\u364e\0\u3678\0\u36a2\0\u36cc\0\u36f6\0\u3720\0\u374a\0\u3774"+
    "\0\u379e\0\u37c8\0\u37f2\0\u381c\0\u3846\0\u3870\0\u389a\0\u38c4"+
    "\0\u38ee\0\u3918\0\u3942\0\u396c\0\u3996\0\u39c0\0\u39ea\0\u3a14"+
    "\0\u3a3e\0\u3a68\0\u3a92\0\u3abc\0\u3ae6\0\u3b10\0\u3b3a\0\u3b64"+
    "\0\u3b8e\0\u3bb8\0\u3be2\0\u3c0c\0\u3c36\0\u3c60\0\u3c8a\0\u3cb4"+
    "\0\u3cde\0\u3d08\0\u3d32\0\u3d5c\0\u3d86\0\u3db0\0\u3dda\0\u3e04"+
    "\0\u3e2e\0\u3e58\0\u3e82\0\u3eac\0\u3ed6\0\u3f00\0\u3f2a\0\u3f54"+
    "\0\u3f7e\0\u3fa8\0\u3fd2\0\u3ffc\0\u4026\0\u4050\0\u407a\0\u40a4"+
    "\0\u40ce\0\u40f8\0\u4122\0\u414c\0\u4176\0\u41a0\0\u41ca\0\u41f4"+
    "\0\u421e\0\u4248\0\u4272\0\u429c\0\u42c6\0\u42f0\0\u431a\0\u4344"+
    "\0\u436e\0\u4398\0\u43c2\0\u43ec\0\u4416\0\u4440\0\u446a\0\u4494"+
    "\0\u44be\0\u44e8\0\u4512\0\u453c\0\u4566\0\u4590\0\u45ba\0\u45e4"+
    "\0\u460e\0\u4638\0\u4662\0\u468c\0\u46b6\0\u46e0\0\u470a\0\u4734"+
    "\0\u475e\0\u4788\0\u47b2\0\u47dc\0\u4806\0\u4830\0\u485a\0\u4884"+
    "\0\u48ae\0\u48d8\0\u4902\0\u492c\0\u4956\0\u4980\0\u49aa\0\u49d4"+
    "\0\u49fe\0\u4a28\0\u4a52\0\u4a7c\0\u4aa6\0\u4ad0\0\u4afa\0\u4b24"+
    "\0\u4b4e\0\u4b78\0\u4ba2\0\u4bcc\0\u4bf6\0\u4c20\0\u4c4a\0\u4c74"+
    "\0\u4c9e\0\u4cc8\0\u4cf2\0\u4d1c\0\u4d46\0\u4d70\0\u4d9a\0\u4dc4"+
    "\0\u4dee\0\u4e18\0\u4e42\0\u4e6c\0\u4e96\0\u4ec0\0\u4eea\0\u4f14"+
    "\0\u4f3e\0\u4f68\0\u4f92\0\u4fbc\0\u4fe6\0\u5010\0\u503a\0\u5064"+
    "\0\u508e\0\u50b8\0\u50e2\0\u510c\0\u5136\0\u5160\0\u518a\0\u51b4"+
    "\0\u51de\0\u5208\0\u5232\0\u525c\0\u5286\0\u52b0\0\u52da\0\u5304"+
    "\0\u532e\0\u5358\0\u5382\0\u53ac\0\u53d6\0\u5400\0\u542a\0\u5454"+
    "\0\u547e\0\u54a8\0\u54d2\0\u54fc\0\u5526\0\u5550\0\u557a\0\u55a4"+
    "\0\u55ce\0\u55f8\0\u5622\0\u564c\0\u5676\0\u56a0\0\u56ca\0\u56f4"+
    "\0\u571e\0\u5748\0\u5772\0\u579c\0\u57c6\0\u57f0\0\u581a\0\u5844"+
    "\0\u586e\0\u5898\0\u58c2\0\u58ec\0\u5916\0\u5940\0\u596a\0\u5994"+
    "\0\u59be\0\u59e8\0\u5a12\0\u5a3c\0\u5a66\0\u5a90\0\u5aba\0\u5ae4"+
    "\0\u5b0e\0\u5b38\0\u5b62\0\u5b8c\0\u5bb6\0\u5be0\0\u5c0a\0\u5c34"+
    "\0\u5c5e\0\u5c88\0\u5cb2\0\u5cdc\0\u5d06\0\u5d30\0\u5d5a\0\u5d84"+
    "\0\u5dae\0\u5dd8\0\u5e02\0\u5e2c\0\u5e56\0\u5e80\0\u5eaa\0\u5ed4"+
    "\0\u5efe\0\u5f28\0\u5f52\0\u5f7c\0\u5fa6\0\u5fd0\0\u5ffa\0\u6024"+
    "\0\u604e\0\u6078\0\u60a2\0\u60cc\0\u60f6\0\u6120\0\u614a\0\u6174"+
    "\0\u619e\0\u61c8\0\u61f2\0\u621c\0\u6246\0\u6270\0\u629a\0\u62c4"+
    "\0\u62ee\0\u6318\0\u6342\0\u636c\0\u6396\0\u63c0\0\u63ea\0\u6414"+
    "\0\u643e\0\u6468\0\u6492\0\u64bc\0\u64e6\0\u6510\0\u653a\0\u6564"+
    "\0\u658e\0\u65b8\0\u65e2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[683];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\1\15\1\14\1\16\1\17\1\20\3\14\1\21"+
    "\1\14\1\22\1\23\11\14\1\24\1\25\1\26\10\14"+
    "\1\16\1\27\1\30\1\31\1\14\1\32\3\14\4\33"+
    "\1\34\1\35\44\33\4\36\1\0\45\36\1\37\2\40"+
    "\1\41\2\42\1\43\1\44\1\43\1\45\1\46\1\37"+
    "\1\43\1\37\1\40\1\43\4\40\1\43\1\47\1\50"+
    "\1\51\5\37\1\52\3\37\1\41\1\53\1\50\1\37"+
    "\1\43\3\37\1\43\3\54\1\55\1\17\1\56\1\54"+
    "\1\57\1\54\1\60\14\54\1\50\1\51\5\54\1\61"+
    "\3\54\1\55\1\54\1\50\6\54\4\62\2\63\44\62"+
    "\3\64\1\62\1\65\1\66\21\64\1\67\11\64\1\62"+
    "\4\64\1\70\3\64\13\0\1\71\14\0\1\72\25\0"+
    "\1\73\1\74\32\0\2\74\37\0\1\75\16\0\1\76"+
    "\7\0\1\77\1\100\117\0\1\101\32\0\1\102\10\0"+
    "\1\102\7\0\1\16\1\17\1\56\33\0\1\16\14\0"+
    "\1\17\47\0\1\103\7\0\1\104\2\0\1\105\1\103"+
    "\1\0\4\103\5\0\1\106\23\0\1\107\1\110\1\111"+
    "\5\0\1\112\24\0\1\110\1\113\36\0\1\114\52\0"+
    "\1\115\25\0\1\116\1\110\1\111\22\0\1\117\7\0"+
    "\1\110\1\120\13\0\1\121\35\0\1\121\1\122\12\0"+
    "\1\123\35\0\1\123\1\0\1\124\11\0\1\125\35\0"+
    "\1\125\56\0\1\126\3\0\4\33\1\0\45\33\3\0"+
    "\1\127\1\130\1\131\33\0\1\127\10\0\3\33\1\132"+
    "\1\133\1\134\33\33\1\132\10\33\1\0\2\40\1\135"+
    "\12\0\1\40\1\0\4\40\15\0\1\135\13\0\1\41"+
    "\2\42\20\0\1\136\12\0\1\41\1\0\1\136\11\0"+
    "\3\42\33\0\1\42\17\0\1\137\1\0\4\137\2\0"+
    "\1\137\4\0\3\137\1\140\1\0\1\137\1\0\5\137"+
    "\2\0\10\137\1\0\1\141\1\142\5\0\1\141\1\0"+
    "\1\143\1\141\1\0\1\144\1\142\1\0\4\142\2\0"+
    "\3\141\1\145\1\141\1\0\4\141\2\0\3\141\1\0"+
    "\1\141\1\0\1\141\30\0\1\51\23\0\2\146\13\0"+
    "\1\146\1\0\4\146\2\0\1\146\5\0\2\146\1\147"+
    "\16\0\1\150\1\151\1\152\32\0\1\151\1\153\1\154"+
    "\12\0\1\155\22\0\1\136\12\0\1\155\1\0\1\136"+
    "\11\0\3\63\33\0\1\63\10\0\3\64\3\0\33\64"+
    "\1\0\10\64\3\0\1\156\10\0\1\65\24\0\1\156"+
    "\13\0\1\156\1\65\7\0\1\65\24\0\1\156\10\0"+
    "\3\64\3\0\21\64\1\157\11\64\1\0\13\64\3\0"+
    "\33\64\1\0\4\64\1\160\3\64\13\0\1\71\66\0"+
    "\1\72\24\0\1\74\1\0\1\74\33\0\1\74\13\0"+
    "\1\74\35\0\1\74\37\0\1\161\70\0\1\162\3\0"+
    "\4\100\1\0\22\100\1\0\26\100\2\0\21\100\1\0"+
    "\22\100\1\0\2\103\13\0\1\103\1\0\4\103\41\0"+
    "\1\163\2\0\1\164\1\165\4\164\26\0\15\105\1\166"+
    "\34\105\2\0\1\167\13\0\1\167\1\0\4\167\31\0"+
    "\1\170\1\110\1\111\5\0\1\171\24\0\1\110\1\113"+
    "\14\0\1\110\50\0\1\172\1\110\1\111\5\0\1\112"+
    "\24\0\1\110\1\173\36\0\1\174\52\0\1\175\25\0"+
    "\1\116\1\110\1\111\32\0\1\110\1\120\13\0\1\121"+
    "\35\0\1\121\1\176\12\0\1\177\35\0\1\177\1\0"+
    "\1\124\11\0\1\124\35\0\1\124\1\0\1\200\54\0"+
    "\1\201\7\0\1\130\45\0\3\33\1\132\1\130\1\134"+
    "\33\33\1\132\14\33\1\130\45\33\3\0\1\202\35\0"+
    "\1\202\37\0\1\140\23\0\2\141\5\0\1\141\1\0"+
    "\2\141\1\0\2\141\1\0\4\141\2\0\5\141\1\203"+
    "\4\141\2\0\3\141\1\0\1\141\1\0\1\141\2\0"+
    "\1\204\1\142\1\205\4\0\1\141\1\0\2\141\1\206"+
    "\1\141\1\142\1\0\4\142\1\0\1\207\3\141\1\210"+
    "\1\141\1\203\4\141\1\0\1\205\3\141\1\0\1\141"+
    "\1\0\1\141\2\0\2\141\5\0\1\141\1\0\1\141"+
    "\1\211\1\0\1\141\1\212\1\213\4\212\2\0\5\141"+
    "\1\203\4\141\2\0\3\141\1\0\1\141\1\0\1\141"+
    "\1\0\1\214\2\144\5\214\1\144\1\214\2\144\1\214"+
    "\1\215\1\144\1\214\4\144\2\214\5\144\1\216\4\144"+
    "\2\214\3\144\1\214\1\144\1\214\1\144\1\214\1\0"+
    "\1\141\1\217\5\0\1\141\1\0\2\141\1\0\1\141"+
    "\1\217\1\0\4\217\2\0\5\141\1\203\4\141\2\0"+
    "\3\141\1\0\1\141\1\0\1\141\2\0\2\146\13\0"+
    "\1\146\1\0\4\146\2\0\1\146\5\0\2\146\14\0"+
    "\4\220\2\0\31\220\1\0\12\220\3\0\1\150\1\151"+
    "\1\152\32\0\1\151\1\153\14\0\1\221\45\0\3\64"+
    "\3\0\21\64\1\222\11\64\1\0\13\64\3\0\33\64"+
    "\1\0\4\64\1\223\3\64\27\0\1\224\70\0\1\225"+
    "\16\0\1\226\41\0\1\227\12\0\1\164\1\0\4\164"+
    "\15\0\1\227\30\0\1\230\31\0\14\105\1\231\35\105"+
    "\1\0\2\167\1\232\10\0\1\233\1\0\1\167\1\0"+
    "\4\167\15\0\1\232\13\0\1\171\7\0\1\234\25\0"+
    "\1\171\13\0\1\172\1\110\1\111\5\0\1\234\24\0"+
    "\1\110\1\173\13\0\1\235\1\236\1\237\20\0\1\174"+
    "\11\0\1\236\1\240\10\0\4\201\1\241\1\242\21\201"+
    "\1\175\22\201\3\0\1\121\35\0\1\121\1\243\12\0"+
    "\1\200\1\236\1\237\32\0\1\236\1\244\1\0\1\200"+
    "\6\0\4\201\1\241\1\242\21\201\1\0\22\201\1\0"+
    "\2\245\13\0\1\245\1\0\4\245\27\0\2\204\1\205"+
    "\4\0\1\141\1\0\2\141\1\206\1\141\1\204\1\0"+
    "\4\204\2\0\3\141\1\210\1\141\1\203\4\141\1\0"+
    "\1\205\3\141\1\0\1\141\1\0\1\141\3\0\1\246"+
    "\1\205\7\0\1\246\1\206\1\0\1\246\1\0\4\246"+
    "\1\0\1\246\3\0\1\247\7\0\1\205\10\0\3\250"+
    "\2\0\4\250\1\0\2\250\1\0\24\250\1\0\10\250"+
    "\1\0\2\141\5\0\1\141\1\0\2\141\1\206\2\141"+
    "\1\0\4\141\2\0\5\141\1\203\4\141\2\0\3\141"+
    "\1\0\1\141\1\0\1\141\2\0\2\141\5\0\1\141"+
    "\1\0\1\141\1\251\1\0\2\141\1\0\4\141\2\0"+
    "\5\141\1\203\4\141\2\0\3\141\1\0\1\141\1\0"+
    "\1\141\2\0\2\141\1\252\4\0\1\141\1\0\2\141"+
    "\1\0\1\141\1\212\1\0\4\212\2\0\5\141\1\203"+
    "\4\141\1\0\1\252\3\141\1\0\1\141\1\0\1\141"+
    "\21\0\1\253\31\0\15\214\1\254\35\214\2\144\5\214"+
    "\1\144\1\214\2\144\1\206\2\144\1\214\4\144\2\214"+
    "\5\144\1\216\4\144\2\214\3\144\1\214\1\144\1\214"+
    "\1\144\2\214\2\255\12\214\1\254\1\255\1\214\4\255"+
    "\26\214\1\0\2\217\1\256\4\0\1\141\1\0\2\141"+
    "\1\206\1\141\1\217\1\0\4\217\2\0\5\141\1\203"+
    "\4\141\1\0\1\256\3\141\1\0\1\141\1\0\1\141"+
    "\1\0\4\220\2\0\31\220\1\257\12\220\3\64\1\260"+
    "\1\261\1\262\21\64\1\222\10\64\1\263\1\264\13\64"+
    "\1\260\1\261\1\262\32\64\1\263\1\264\4\64\1\223"+
    "\3\64\13\265\1\266\1\267\35\265\3\270\1\271\10\270"+
    "\1\0\24\270\1\271\10\270\21\0\1\272\33\0\1\232"+
    "\10\0\1\233\24\0\1\232\13\0\1\234\1\236\1\237"+
    "\5\0\1\234\24\0\1\236\1\273\13\0\1\235\1\236"+
    "\1\237\32\0\1\236\1\240\14\0\1\274\51\0\1\241"+
    "\50\0\1\121\35\0\1\121\1\275\10\0\2\276\10\0"+
    "\1\277\1\300\1\0\1\276\1\0\4\276\10\0\1\203"+
    "\16\0\2\246\1\301\7\0\1\246\1\206\1\0\1\246"+
    "\1\0\4\246\1\0\2\246\1\0\1\302\1\247\2\0"+
    "\1\246\4\0\1\301\24\0\1\206\35\0\3\250\2\0"+
    "\4\250\1\0\2\250\1\303\24\250\1\0\10\250\1\304"+
    "\2\305\5\304\1\305\1\304\1\305\1\306\1\307\2\305"+
    "\1\304\4\305\2\304\5\305\1\310\4\305\2\304\3\305"+
    "\1\304\1\305\1\304\1\305\1\304\3\247\1\311\10\247"+
    "\1\0\24\247\1\311\10\247\21\0\1\312\30\0\14\214"+
    "\1\206\36\214\2\313\10\214\1\314\1\315\1\254\1\313"+
    "\1\214\4\313\10\214\1\216\15\214\3\0\1\256\10\0"+
    "\1\206\24\0\1\256\13\0\1\260\1\261\1\262\32\0"+
    "\1\261\1\264\14\0\1\261\45\0\13\265\1\316\51\265"+
    "\1\270\1\267\35\265\14\0\1\231\35\0\3\270\1\271"+
    "\10\270\1\231\24\270\1\271\10\270\22\0\1\317\32\0"+
    "\1\121\35\0\1\121\1\320\10\0\2\321\10\0\1\322"+
    "\1\300\1\0\1\321\1\0\4\321\10\0\1\203\16\0"+
    "\2\321\10\0\1\322\2\0\1\321\1\0\4\321\30\0"+
    "\1\246\1\301\7\0\1\246\1\206\1\0\1\246\1\0"+
    "\4\246\1\0\1\246\2\0\1\302\1\247\7\0\1\301"+
    "\10\0\3\323\1\302\2\0\1\324\1\323\1\325\1\0"+
    "\2\323\1\0\12\323\2\0\10\323\1\302\10\323\13\304"+
    "\1\326\37\304\2\305\5\304\1\305\1\304\1\305\1\327"+
    "\1\304\2\305\1\304\4\305\2\304\5\305\1\310\4\305"+
    "\2\304\3\305\1\304\1\305\1\304\1\305\2\304\2\305"+
    "\5\304\1\305\1\304\1\305\1\210\1\307\2\305\1\304"+
    "\4\305\2\304\5\305\1\310\4\305\2\304\3\305\1\304"+
    "\1\305\1\304\1\305\2\304\2\330\10\304\1\326\2\304"+
    "\1\330\1\304\4\330\26\304\3\247\1\311\10\247\1\206"+
    "\24\247\1\311\10\247\22\0\1\331\27\0\1\214\2\332"+
    "\10\214\1\333\1\315\1\254\1\332\1\214\4\332\10\214"+
    "\1\216\16\214\2\332\10\214\1\333\1\214\1\254\1\332"+
    "\1\214\4\332\26\214\13\265\1\270\36\265\23\0\1\334"+
    "\31\0\1\121\35\0\1\121\11\0\2\335\10\0\1\336"+
    "\1\300\1\0\1\335\1\0\4\335\10\0\1\203\16\0"+
    "\2\335\10\0\1\336\2\0\1\335\1\0\4\335\26\0"+
    "\3\323\1\205\3\0\1\323\2\0\2\323\1\206\12\323"+
    "\2\0\10\323\1\205\10\323\4\324\1\0\1\324\1\337"+
    "\1\340\42\324\4\325\1\0\2\325\1\341\1\337\41\325"+
    "\13\304\1\247\37\304\2\305\5\304\1\305\1\304\1\305"+
    "\1\210\1\304\2\305\1\304\4\305\2\304\5\305\1\310"+
    "\4\305\2\304\3\305\1\304\1\305\1\304\1\305\2\304"+
    "\2\342\10\304\1\343\1\344\1\304\1\342\1\304\4\342"+
    "\10\304\1\310\15\304\23\0\1\345\26\0\1\214\2\346"+
    "\10\214\1\347\1\315\1\254\1\346\1\214\4\346\10\214"+
    "\1\216\16\214\2\346\10\214\1\347\1\214\1\254\1\346"+
    "\1\214\4\346\26\214\22\0\1\350\30\0\2\351\10\0"+
    "\1\352\1\300\1\0\1\351\1\0\4\351\10\0\1\203"+
    "\16\0\2\351\10\0\1\352\2\0\1\351\1\0\4\351"+
    "\31\0\1\205\10\0\1\206\14\0\1\247\7\0\1\205"+
    "\10\0\4\324\1\0\1\324\1\353\1\340\42\324\4\325"+
    "\1\0\2\325\1\341\1\354\41\325\1\304\2\355\10\304"+
    "\1\356\1\344\1\304\1\355\1\304\4\355\10\304\1\310"+
    "\16\304\2\355\10\304\1\357\2\304\1\355\1\304\4\355"+
    "\26\304\22\0\1\360\27\0\1\214\2\361\10\214\1\362"+
    "\1\315\1\254\1\361\1\214\4\361\10\214\1\216\16\214"+
    "\2\361\10\214\1\362\1\214\1\254\1\361\1\214\4\361"+
    "\26\214\17\0\1\363\33\0\2\364\10\0\1\365\1\300"+
    "\1\0\1\364\1\0\4\364\10\0\1\203\16\0\2\364"+
    "\10\0\1\365\2\0\1\364\1\0\4\364\26\0\3\324"+
    "\1\366\1\0\1\324\1\337\1\340\4\324\1\367\14\324"+
    "\1\370\7\324\1\366\10\324\3\325\1\371\1\0\2\325"+
    "\1\341\1\337\3\325\1\372\14\325\1\373\7\325\1\371"+
    "\10\325\1\304\2\374\10\304\1\375\1\344\1\304\1\374"+
    "\1\304\4\374\10\304\1\310\16\304\2\374\10\304\1\376"+
    "\2\304\1\374\1\304\4\374\26\304\1\0\2\335\10\0"+
    "\1\336\1\206\1\0\1\335\1\0\4\335\45\0\1\377"+
    "\32\0\1\214\2\u0100\10\214\1\u0101\1\315\1\254\1\u0100"+
    "\1\214\4\u0100\10\214\1\216\16\214\2\u0100\10\214\1\u0101"+
    "\1\214\1\254\1\u0100\1\214\4\u0100\26\214\24\363\1\u0102"+
    "\25\363\1\0\2\u0103\10\0\1\u0104\1\300\1\0\1\u0103"+
    "\1\0\4\u0103\10\0\1\203\16\0\2\u0103\10\0\1\u0104"+
    "\2\0\1\u0103\1\0\4\u0103\26\0\2\324\1\u0105\1\366"+
    "\1\0\1\324\1\337\1\340\3\324\1\u0105\1\367\1\324"+
    "\1\u0105\1\324\4\u0105\1\324\1\u0105\3\324\1\370\7\324"+
    "\1\366\14\324\1\0\1\324\1\337\1\340\4\324\1\367"+
    "\35\324\2\325\1\u0106\1\371\1\0\2\325\1\341\1\337"+
    "\2\325\1\u0106\1\372\1\325\1\u0106\1\325\4\u0106\1\325"+
    "\1\u0106\3\325\1\373\7\325\1\371\14\325\1\0\2\325"+
    "\1\341\1\337\3\325\1\372\35\325\1\304\2\u0107\10\304"+
    "\1\u0108\1\344\1\304\1\u0107\1\304\4\u0107\10\304\1\310"+
    "\16\304\2\u0107\10\304\1\u0109\2\304\1\u0107\1\304\4\u0107"+
    "\26\304\1\0\2\351\10\0\1\352\1\206\1\0\1\351"+
    "\1\0\4\351\26\0\24\377\1\u010a\25\377\1\214\2\u010b"+
    "\10\214\1\u010c\1\315\1\254\1\u010b\1\214\4\u010b\10\214"+
    "\1\216\16\214\2\u010b\10\214\1\u010c\1\214\1\254\1\u010b"+
    "\1\214\4\u010b\26\214\24\363\1\u010d\25\363\1\0\2\u010e"+
    "\10\0\1\u010f\1\300\1\0\1\u010e\1\0\4\u010e\10\0"+
    "\1\203\16\0\2\u010e\10\0\1\u010f\2\0\1\u010e\1\0"+
    "\4\u010e\26\0\1\324\2\u0105\1\u0110\1\0\1\324\1\337"+
    "\1\340\3\324\1\u0105\1\367\1\324\1\u0105\1\324\4\u0105"+
    "\1\324\2\u0105\1\324\1\u0111\1\370\2\324\1\u0105\4\324"+
    "\1\u0110\10\324\1\325\2\u0106\1\u0112\1\0\2\325\1\341"+
    "\1\337\2\325\1\u0106\1\372\1\325\1\u0106\1\325\4\u0106"+
    "\1\325\2\u0106\1\325\1\u0113\1\373\2\325\1\u0106\4\325"+
    "\1\u0112\10\325\1\304\2\u0114\10\304\1\u0115\1\344\1\304"+
    "\1\u0114\1\304\4\u0114\10\304\1\310\16\304\2\u0114\10\304"+
    "\1\u0116\2\304\1\u0114\1\304\4\u0114\26\304\1\0\2\364"+
    "\10\0\1\365\1\206\1\0\1\364\1\0\4\364\26\0"+
    "\24\377\1\u0117\25\377\1\214\2\u0118\10\214\1\u0119\1\315"+
    "\1\254\1\u0118\1\214\4\u0118\10\214\1\216\16\214\2\u0118"+
    "\10\214\1\u0119\1\214\1\254\1\u0118\1\214\4\u0118\26\214"+
    "\14\363\1\231\35\363\1\0\2\u011a\10\0\1\u011b\1\300"+
    "\1\0\1\u011a\1\0\4\u011a\10\0\1\203\16\0\2\u011a"+
    "\10\0\1\u011b\2\0\1\u011a\1\0\4\u011a\26\0\2\324"+
    "\1\u0105\1\u0110\1\0\1\324\1\337\1\340\3\324\1\u0105"+
    "\1\367\1\324\1\u0105\1\324\4\u0105\1\324\1\u0105\2\324"+
    "\1\u0111\1\370\7\324\1\u0110\10\324\3\u011c\1\u0111\1\0"+
    "\1\324\1\353\1\u011d\1\u011e\1\324\2\u011c\1\324\12\u011c"+
    "\2\324\10\u011c\1\u0111\10\u011c\2\325\1\u0106\1\u0112\1\0"+
    "\2\325\1\341\1\337\2\325\1\u0106\1\372\1\325\1\u0106"+
    "\1\325\4\u0106\1\325\1\u0106\2\325\1\u0113\1\373\7\325"+
    "\1\u0112\10\325\3\u011f\1\u0113\1\0\1\325\1\u011e\1\u0120"+
    "\1\354\1\325\2\u011f\1\325\12\u011f\2\325\10\u011f\1\u0113"+
    "\10\u011f\1\304\2\u0121\10\304\1\u0122\1\344\1\304\1\u0121"+
    "\1\304\4\u0121\10\304\1\310\16\304\2\u0121\10\304\1\u0123"+
    "\2\304\1\u0121\1\304\4\u0121\26\304\1\0\2\u0103\10\0"+
    "\1\u0104\1\206\1\0\1\u0103\1\0\4\u0103\26\0\14\377"+
    "\1\206\35\377\1\214\2\u0124\10\214\1\u0125\1\315\1\254"+
    "\1\u0124\1\214\4\u0124\10\214\1\216\16\214\2\u0124\10\214"+
    "\1\u0125\1\214\1\254\1\u0124\1\214\4\u0124\26\214\1\0"+
    "\2\u0126\10\0\1\u0127\1\300\1\0\1\u0126\1\0\4\u0126"+
    "\10\0\1\203\16\0\2\u0126\10\0\1\u0127\2\0\1\u0126"+
    "\1\0\4\u0126\26\0\3\u011c\1\366\1\0\1\324\1\337"+
    "\1\u011d\2\324\2\u011c\1\367\12\u011c\2\324\10\u011c\1\366"+
    "\13\u011c\1\366\1\0\1\324\1\353\1\u011d\2\324\2\u011c"+
    "\1\367\12\u011c\2\324\10\u011c\1\366\10\u011c\4\u011e\1\0"+
    "\1\u011e\1\354\1\u0128\1\353\41\u011e\3\u011f\1\371\1\0"+
    "\2\325\1\u0120\1\337\1\325\2\u011f\1\372\12\u011f\2\325"+
    "\10\u011f\1\371\13\u011f\1\371\1\0\2\325\1\u0120\1\354"+
    "\1\325\2\u011f\1\372\12\u011f\2\325\10\u011f\1\371\10\u011f"+
    "\1\304\2\u0129\10\304\1\u012a\1\344\1\304\1\u0129\1\304"+
    "\4\u0129\10\304\1\310\16\304\2\u0129\10\304\1\u012b\2\304"+
    "\1\u0129\1\304\4\u0129\26\304\1\0\2\u010e\10\0\1\u010f"+
    "\1\206\1\0\1\u010e\1\0\4\u010e\26\0\1\214\2\u012c"+
    "\10\214\1\u012d\1\315\1\254\1\u012c\1\214\4\u012c\10\214"+
    "\1\216\16\214\2\u012c\10\214\1\u012d\1\214\1\254\1\u012c"+
    "\1\214\4\u012c\26\214\1\0\2\u012e\10\0\1\u012f\1\300"+
    "\1\0\1\u012e\1\0\4\u012e\10\0\1\203\16\0\2\u012e"+
    "\10\0\1\u012f\2\0\1\u012e\1\0\4\u012e\26\0\4\u011e"+
    "\1\0\1\u011e\1\u0130\1\u0128\1\u0130\41\u011e\1\304\2\u0131"+
    "\10\304\1\u0132\1\344\1\304\1\u0131\1\304\4\u0131\10\304"+
    "\1\310\16\304\2\u0131\10\304\1\u0133\2\304\1\u0131\1\304"+
    "\4\u0131\26\304\1\0\2\u011a\10\0\1\u011b\1\206\1\0"+
    "\1\u011a\1\0\4\u011a\26\0\1\214\2\u0134\10\214\1\u0135"+
    "\1\315\1\254\1\u0134\1\214\4\u0134\10\214\1\216\16\214"+
    "\2\u0134\10\214\1\u0135\1\214\1\254\1\u0134\1\214\4\u0134"+
    "\26\214\1\0\2\u0136\10\0\1\u0137\1\300\1\0\1\u0136"+
    "\1\0\4\u0136\10\0\1\203\16\0\2\u0136\10\0\1\u0137"+
    "\2\0\1\u0136\1\0\4\u0136\26\0\3\u011e\1\u0138\1\0"+
    "\1\u011e\1\354\1\u0128\1\353\3\u011e\1\u0139\14\u011e\1\u013a"+
    "\7\u011e\1\u0138\10\u011e\1\304\2\u013b\10\304\1\u013c\1\344"+
    "\1\304\1\u013b\1\304\4\u013b\10\304\1\310\16\304\2\u013b"+
    "\10\304\1\u013d\2\304\1\u013b\1\304\4\u013b\26\304\1\0"+
    "\2\u0126\10\0\1\u0127\1\206\1\0\1\u0126\1\0\4\u0126"+
    "\26\0\1\214\2\u013e\10\214\1\u013f\1\315\1\254\1\u013e"+
    "\1\214\4\u013e\10\214\1\216\16\214\2\u013e\10\214\1\u013f"+
    "\1\214\1\254\1\u013e\1\214\4\u013e\26\214\1\0\2\u0140"+
    "\10\0\1\u0141\1\300\1\0\1\u0140\1\0\4\u0140\10\0"+
    "\1\203\16\0\2\u0140\10\0\1\u0141\2\0\1\u0140\1\0"+
    "\4\u0140\26\0\2\u011e\1\u0142\1\u0138\1\0\1\u011e\1\354"+
    "\1\u0128\1\353\2\u011e\1\u0142\1\u0139\1\u011e\1\u0142\1\u011e"+
    "\4\u0142\1\u011e\1\u0142\3\u011e\1\u013a\7\u011e\1\u0138\14\u011e"+
    "\1\0\1\u011e\1\354\1\u0128\1\353\3\u011e\1\u0139\35\u011e"+
    "\1\304\2\u0143\10\304\1\u0144\1\344\1\304\1\u0143\1\304"+
    "\4\u0143\10\304\1\310\16\304\2\u0143\10\304\1\u0145\2\304"+
    "\1\u0143\1\304\4\u0143\26\304\1\0\2\u012e\10\0\1\u012f"+
    "\1\206\1\0\1\u012e\1\0\4\u012e\26\0\1\214\2\u0146"+
    "\10\214\1\u0147\1\315\1\254\1\u0146\1\214\4\u0146\10\214"+
    "\1\216\16\214\2\u0146\10\214\1\u0147\1\214\1\254\1\u0146"+
    "\1\214\4\u0146\26\214\1\0\2\u0148\10\0\1\u0149\1\300"+
    "\1\0\1\u0148\1\0\4\u0148\10\0\1\203\16\0\2\u0148"+
    "\10\0\1\u0149\2\0\1\u0148\1\0\4\u0148\26\0\1\u011e"+
    "\2\u0142\1\u014a\1\0\1\u011e\1\354\1\u0128\1\353\2\u011e"+
    "\1\u0142\1\u0139\1\u011e\1\u0142\1\u011e\4\u0142\1\u011e\2\u0142"+
    "\1\u011e\1\u014b\1\u013a\2\u011e\1\u0142\4\u011e\1\u014a\10\u011e"+
    "\1\304\2\u014c\10\304\1\u014d\1\344\1\304\1\u014c\1\304"+
    "\4\u014c\10\304\1\310\16\304\2\u014c\10\304\1\u014e\2\304"+
    "\1\u014c\1\304\4\u014c\26\304\1\0\2\u0136\10\0\1\u0137"+
    "\1\206\1\0\1\u0136\1\0\4\u0136\26\0\1\214\2\u014f"+
    "\10\214\1\u0150\1\315\1\254\1\u014f\1\214\4\u014f\10\214"+
    "\1\216\16\214\2\u014f\10\214\1\u0150\1\214\1\254\1\u014f"+
    "\1\214\4\u014f\26\214\1\0\2\u0151\10\0\1\u0152\1\300"+
    "\1\0\1\u0151\1\0\4\u0151\10\0\1\203\16\0\2\u0151"+
    "\10\0\1\u0152\2\0\1\u0151\1\0\4\u0151\26\0\2\u011e"+
    "\1\u0142\1\u014a\1\0\1\u011e\1\354\1\u0128\1\353\2\u011e"+
    "\1\u0142\1\u0139\1\u011e\1\u0142\1\u011e\4\u0142\1\u011e\1\u0142"+
    "\2\u011e\1\u014b\1\u013a\7\u011e\1\u014a\10\u011e\3\u0153\1\u014b"+
    "\1\0\1\u011e\1\u0130\1\u0154\1\u0130\1\u011e\2\u0153\1\u011e"+
    "\12\u0153\2\u011e\10\u0153\1\u014b\10\u0153\1\304\2\u0155\10\304"+
    "\1\u0156\1\344\1\304\1\u0155\1\304\4\u0155\10\304\1\310"+
    "\16\304\2\u0155\10\304\1\u0157\2\304\1\u0155\1\304\4\u0155"+
    "\26\304\1\0\2\u0140\10\0\1\u0141\1\206\1\0\1\u0140"+
    "\1\0\4\u0140\26\0\1\214\2\u0158\10\214\1\u0159\1\315"+
    "\1\254\1\u0158\1\214\4\u0158\10\214\1\216\16\214\2\u0158"+
    "\10\214\1\u0159\1\214\1\254\1\u0158\1\214\4\u0158\26\214"+
    "\1\0\2\u015a\10\0\1\u015b\1\300\1\0\1\u015a\1\0"+
    "\4\u015a\10\0\1\203\16\0\2\u015a\10\0\1\u015b\2\0"+
    "\1\u015a\1\0\4\u015a\26\0\3\u0153\1\u0138\1\0\1\u011e"+
    "\1\354\1\u0154\1\353\1\u011e\2\u0153\1\u0139\12\u0153\2\u011e"+
    "\10\u0153\1\u0138\13\u0153\1\u0138\1\0\1\u011e\1\u0130\1\u0154"+
    "\1\u0130\1\u011e\2\u0153\1\u0139\12\u0153\2\u011e\10\u0153\1\u0138"+
    "\10\u0153\1\304\2\u015c\10\304\1\u015d\1\344\1\304\1\u015c"+
    "\1\304\4\u015c\10\304\1\310\16\304\2\u015c\10\304\1\u015e"+
    "\2\304\1\u015c\1\304\4\u015c\26\304\1\0\2\u0148\10\0"+
    "\1\u0149\1\206\1\0\1\u0148\1\0\4\u0148\26\0\1\214"+
    "\2\u015f\10\214\1\u0160\1\315\1\254\1\u015f\1\214\4\u015f"+
    "\10\214\1\216\16\214\2\u015f\10\214\1\u0160\1\214\1\254"+
    "\1\u015f\1\214\4\u015f\26\214\1\0\2\u0161\10\0\1\u0162"+
    "\1\300\1\0\1\u0161\1\0\4\u0161\10\0\1\203\16\0"+
    "\2\u0161\10\0\1\u0162\2\0\1\u0161\1\0\4\u0161\26\0"+
    "\1\304\2\u0163\10\304\1\u0164\1\344\1\304\1\u0163\1\304"+
    "\4\u0163\10\304\1\310\16\304\2\u0163\10\304\1\u0165\2\304"+
    "\1\u0163\1\304\4\u0163\26\304\1\0\2\u0151\10\0\1\u0152"+
    "\1\206\1\0\1\u0151\1\0\4\u0151\26\0\1\214\2\u0166"+
    "\10\214\1\u0167\1\315\1\254\1\u0166\1\214\4\u0166\10\214"+
    "\1\216\16\214\2\u0166\10\214\1\u0167\1\214\1\254\1\u0166"+
    "\1\214\4\u0166\26\214\1\0\2\u0168\10\0\1\u0169\1\300"+
    "\1\0\1\u0168\1\0\4\u0168\10\0\1\203\16\0\2\u0168"+
    "\10\0\1\u0169\2\0\1\u0168\1\0\4\u0168\26\0\1\304"+
    "\2\u016a\10\304\1\u016b\1\344\1\304\1\u016a\1\304\4\u016a"+
    "\10\304\1\310\16\304\2\u016a\10\304\1\u016c\2\304\1\u016a"+
    "\1\304\4\u016a\26\304\1\0\2\u015a\10\0\1\u015b\1\206"+
    "\1\0\1\u015a\1\0\4\u015a\26\0\1\214\2\u016d\10\214"+
    "\1\u016e\1\315\1\254\1\u016d\1\214\4\u016d\10\214\1\216"+
    "\16\214\2\u016d\10\214\1\u016e\1\214\1\254\1\u016d\1\214"+
    "\4\u016d\26\214\1\0\2\u016f\10\0\1\u0170\1\300\1\0"+
    "\1\u016f\1\0\4\u016f\10\0\1\203\16\0\2\u016f\10\0"+
    "\1\u0170\2\0\1\u016f\1\0\4\u016f\26\0\1\304\2\u0171"+
    "\10\304\1\u0172\1\344\1\304\1\u0171\1\304\4\u0171\10\304"+
    "\1\310\16\304\2\u0171\10\304\1\u0173\2\304\1\u0171\1\304"+
    "\4\u0171\26\304\1\0\2\u0161\10\0\1\u0162\1\206\1\0"+
    "\1\u0161\1\0\4\u0161\26\0\1\214\2\u0174\10\214\1\u0175"+
    "\1\315\1\254\1\u0174\1\214\4\u0174\10\214\1\216\16\214"+
    "\2\u0174\10\214\1\u0175\1\214\1\254\1\u0174\1\214\4\u0174"+
    "\26\214\1\0\2\u0176\10\0\1\u0177\1\300\1\0\1\u0176"+
    "\1\0\4\u0176\10\0\1\203\16\0\2\u0176\10\0\1\u0177"+
    "\2\0\1\u0176\1\0\4\u0176\26\0\1\304\2\u0178\10\304"+
    "\1\u0179\1\344\1\304\1\u0178\1\304\4\u0178\10\304\1\310"+
    "\16\304\2\u0178\10\304\1\u017a\2\304\1\u0178\1\304\4\u0178"+
    "\26\304\1\0\2\u0168\10\0\1\u0169\1\206\1\0\1\u0168"+
    "\1\0\4\u0168\26\0\1\214\2\u017b\10\214\1\u017c\1\315"+
    "\1\254\1\u017b\1\214\4\u017b\10\214\1\216\16\214\2\u017b"+
    "\10\214\1\u017c\1\214\1\254\1\u017b\1\214\4\u017b\26\214"+
    "\1\0\2\u017d\10\0\1\u017e\1\300\1\0\1\u017d\1\0"+
    "\4\u017d\10\0\1\203\16\0\2\u017d\10\0\1\u017e\2\0"+
    "\1\u017d\1\0\4\u017d\26\0\1\304\2\u017f\10\304\1\u0180"+
    "\1\344\1\304\1\u017f\1\304\4\u017f\10\304\1\310\16\304"+
    "\2\u017f\10\304\1\u0181\2\304\1\u017f\1\304\4\u017f\26\304"+
    "\1\0\2\u016f\10\0\1\u0170\1\206\1\0\1\u016f\1\0"+
    "\4\u016f\26\0\1\214\2\u0182\10\214\1\u0183\1\315\1\254"+
    "\1\u0182\1\214\4\u0182\10\214\1\216\16\214\2\u0182\10\214"+
    "\1\u0183\1\214\1\254\1\u0182\1\214\4\u0182\26\214\1\0"+
    "\2\u0184\10\0\1\u0185\1\300\1\0\1\u0184\1\0\4\u0184"+
    "\10\0\1\203\16\0\2\u0184\10\0\1\u0185\2\0\1\u0184"+
    "\1\0\4\u0184\26\0\1\304\2\u0186\10\304\1\u0187\1\344"+
    "\1\304\1\u0186\1\304\4\u0186\10\304\1\310\16\304\2\u0186"+
    "\10\304\1\u0188\2\304\1\u0186\1\304\4\u0186\26\304\1\0"+
    "\2\u0176\10\0\1\u0177\1\206\1\0\1\u0176\1\0\4\u0176"+
    "\26\0\1\214\2\u0189\10\214\1\u018a\1\315\1\254\1\u0189"+
    "\1\214\4\u0189\10\214\1\216\16\214\2\u0189\10\214\1\u018a"+
    "\1\214\1\254\1\u0189\1\214\4\u0189\26\214\1\0\2\u018b"+
    "\10\0\1\u018c\1\300\1\0\1\u018b\1\0\4\u018b\10\0"+
    "\1\203\16\0\2\u018b\10\0\1\u018c\2\0\1\u018b\1\0"+
    "\4\u018b\26\0\1\304\2\u018d\10\304\1\u018e\1\344\1\304"+
    "\1\u018d\1\304\4\u018d\10\304\1\310\16\304\2\u018d\10\304"+
    "\1\u018f\2\304\1\u018d\1\304\4\u018d\26\304\1\0\2\u017d"+
    "\10\0\1\u017e\1\206\1\0\1\u017d\1\0\4\u017d\26\0"+
    "\1\214\2\u0190\10\214\1\u0191\1\315\1\254\1\u0190\1\214"+
    "\4\u0190\10\214\1\216\16\214\2\u0190\10\214\1\u0191\1\214"+
    "\1\254\1\u0190\1\214\4\u0190\26\214\1\0\2\u0192\10\0"+
    "\1\u0193\1\300\1\0\1\u0192\1\0\4\u0192\10\0\1\203"+
    "\16\0\2\u0192\10\0\1\u0193\2\0\1\u0192\1\0\4\u0192"+
    "\26\0\1\304\2\u0194\10\304\1\u0195\1\344\1\304\1\u0194"+
    "\1\304\4\u0194\10\304\1\310\16\304\2\u0194\10\304\1\u0196"+
    "\2\304\1\u0194\1\304\4\u0194\26\304\1\0\2\u0184\10\0"+
    "\1\u0185\1\206\1\0\1\u0184\1\0\4\u0184\26\0\1\214"+
    "\2\u0197\10\214\1\u0198\1\315\1\254\1\u0197\1\214\4\u0197"+
    "\10\214\1\216\16\214\2\u0197\10\214\1\u0198\1\214\1\254"+
    "\1\u0197\1\214\4\u0197\26\214\1\0\2\u0199\10\0\1\u019a"+
    "\1\300\1\0\1\u0199\1\0\4\u0199\10\0\1\203\16\0"+
    "\2\u0199\10\0\1\u019a\2\0\1\u0199\1\0\4\u0199\26\0"+
    "\1\304\2\u019b\10\304\1\u019c\1\344\1\304\1\u019b\1\304"+
    "\4\u019b\10\304\1\310\16\304\2\u019b\10\304\1\u019d\2\304"+
    "\1\u019b\1\304\4\u019b\26\304\1\0\2\u018b\10\0\1\u018c"+
    "\1\206\1\0\1\u018b\1\0\4\u018b\26\0\1\214\2\u019e"+
    "\10\214\1\u019f\1\315\1\254\1\u019e\1\214\4\u019e\10\214"+
    "\1\216\16\214\2\u019e\10\214\1\u019f\1\214\1\254\1\u019e"+
    "\1\214\4\u019e\26\214\1\0\2\u01a0\10\0\1\u01a1\1\300"+
    "\1\0\1\u01a0\1\0\4\u01a0\10\0\1\203\16\0\2\u01a0"+
    "\10\0\1\u01a1\2\0\1\u01a0\1\0\4\u01a0\26\0\1\304"+
    "\2\u01a2\10\304\1\u01a3\1\344\1\304\1\u01a2\1\304\4\u01a2"+
    "\10\304\1\310\16\304\2\u01a2\10\304\1\u01a4\2\304\1\u01a2"+
    "\1\304\4\u01a2\26\304\1\0\2\u0192\10\0\1\u0193\1\206"+
    "\1\0\1\u0192\1\0\4\u0192\26\0\1\214\2\u01a5\10\214"+
    "\1\u01a6\1\315\1\254\1\u01a5\1\214\4\u01a5\10\214\1\216"+
    "\16\214\2\u01a5\10\214\1\u01a6\1\214\1\254\1\u01a5\1\214"+
    "\4\u01a5\26\214\1\0\2\u01a7\10\0\1\u01a8\1\300\1\0"+
    "\1\u01a7\1\0\4\u01a7\10\0\1\203\16\0\2\u01a7\10\0"+
    "\1\u01a8\2\0\1\u01a7\1\0\4\u01a7\26\0\1\304\2\u01a9"+
    "\10\304\1\u01aa\1\344\1\304\1\u01a9\1\304\4\u01a9\10\304"+
    "\1\310\16\304\2\u01a9\10\304\1\u01ab\2\304\1\u01a9\1\304"+
    "\4\u01a9\26\304\1\0\2\u0199\10\0\1\u019a\1\206\1\0"+
    "\1\u0199\1\0\4\u0199\26\0\1\214\2\u01ac\10\214\1\u01ad"+
    "\1\315\1\254\1\u01ac\1\214\4\u01ac\10\214\1\216\16\214"+
    "\2\u01ac\10\214\1\u01ad\1\214\1\254\1\u01ac\1\214\4\u01ac"+
    "\26\214\1\0\2\u01ae\10\0\1\u01af\1\300\1\0\1\u01ae"+
    "\1\0\4\u01ae\10\0\1\203\16\0\2\u01ae\10\0\1\u01af"+
    "\2\0\1\u01ae\1\0\4\u01ae\26\0\1\304\2\u01b0\10\304"+
    "\1\u01b1\1\344\1\304\1\u01b0\1\304\4\u01b0\10\304\1\310"+
    "\16\304\2\u01b0\10\304\1\u01b2\2\304\1\u01b0\1\304\4\u01b0"+
    "\26\304\1\0\2\u01a0\10\0\1\u01a1\1\206\1\0\1\u01a0"+
    "\1\0\4\u01a0\26\0\1\214\2\u01b3\10\214\1\u01b4\1\315"+
    "\1\254\1\u01b3\1\214\4\u01b3\10\214\1\216\16\214\2\u01b3"+
    "\10\214\1\u01b4\1\214\1\254\1\u01b3\1\214\4\u01b3\26\214"+
    "\1\0\2\u01b5\10\0\1\u01b6\1\300\1\0\1\u01b5\1\0"+
    "\4\u01b5\10\0\1\203\16\0\2\u01b5\10\0\1\u01b6\2\0"+
    "\1\u01b5\1\0\4\u01b5\26\0\1\304\2\u01b7\10\304\1\u01b8"+
    "\1\344\1\304\1\u01b7\1\304\4\u01b7\10\304\1\310\16\304"+
    "\2\u01b7\10\304\1\u01b9\2\304\1\u01b7\1\304\4\u01b7\26\304"+
    "\1\0\2\u01a7\10\0\1\u01a8\1\206\1\0\1\u01a7\1\0"+
    "\4\u01a7\26\0\1\214\2\u01ba\10\214\1\u01bb\1\315\1\254"+
    "\1\u01ba\1\214\4\u01ba\10\214\1\216\16\214\2\u01ba\10\214"+
    "\1\u01bb\1\214\1\254\1\u01ba\1\214\4\u01ba\26\214\1\0"+
    "\2\u01bc\10\0\1\u01bd\1\300\1\0\1\u01bc\1\0\4\u01bc"+
    "\10\0\1\203\16\0\2\u01bc\10\0\1\u01bd\2\0\1\u01bc"+
    "\1\0\4\u01bc\26\0\1\304\2\u01be\10\304\1\u01bf\1\344"+
    "\1\304\1\u01be\1\304\4\u01be\10\304\1\310\16\304\2\u01be"+
    "\10\304\1\u01c0\2\304\1\u01be\1\304\4\u01be\26\304\1\0"+
    "\2\u01ae\10\0\1\u01af\1\206\1\0\1\u01ae\1\0\4\u01ae"+
    "\26\0\1\214\2\u01c1\10\214\1\u01c2\1\315\1\254\1\u01c1"+
    "\1\214\4\u01c1\10\214\1\216\16\214\2\u01c1\10\214\1\u01c2"+
    "\1\214\1\254\1\u01c1\1\214\4\u01c1\26\214\1\0\2\u01c3"+
    "\10\0\1\u01c4\1\300\1\0\1\u01c3\1\0\4\u01c3\10\0"+
    "\1\203\16\0\2\u01c3\10\0\1\u01c4\2\0\1\u01c3\1\0"+
    "\4\u01c3\26\0\1\304\2\u01c5\10\304\1\u01c6\1\344\1\304"+
    "\1\u01c5\1\304\4\u01c5\10\304\1\310\16\304\2\u01c5\10\304"+
    "\1\u01c7\2\304\1\u01c5\1\304\4\u01c5\26\304\1\0\2\u01b5"+
    "\10\0\1\u01b6\1\206\1\0\1\u01b5\1\0\4\u01b5\26\0"+
    "\1\214\2\u01c8\10\214\1\u01c9\1\315\1\254\1\u01c8\1\214"+
    "\4\u01c8\10\214\1\216\16\214\2\u01c8\10\214\1\u01c9\1\214"+
    "\1\254\1\u01c8\1\214\4\u01c8\26\214\1\0\2\u01ca\10\0"+
    "\1\u01cb\1\300\1\0\1\u01ca\1\0\4\u01ca\10\0\1\203"+
    "\16\0\2\u01ca\10\0\1\u01cb\2\0\1\u01ca\1\0\4\u01ca"+
    "\26\0\1\304\2\u01cc\10\304\1\u01cd\1\344\1\304\1\u01cc"+
    "\1\304\4\u01cc\10\304\1\310\16\304\2\u01cc\10\304\1\u01ce"+
    "\2\304\1\u01cc\1\304\4\u01cc\26\304\1\0\2\u01bc\10\0"+
    "\1\u01bd\1\206\1\0\1\u01bc\1\0\4\u01bc\26\0\1\214"+
    "\2\u01cf\10\214\1\u01d0\1\315\1\254\1\u01cf\1\214\4\u01cf"+
    "\10\214\1\216\16\214\2\u01cf\10\214\1\u01d0\1\214\1\254"+
    "\1\u01cf\1\214\4\u01cf\26\214\1\0\2\u01d1\10\0\1\u01d2"+
    "\1\300\1\0\1\u01d1\1\0\4\u01d1\10\0\1\203\16\0"+
    "\2\u01d1\10\0\1\u01d2\2\0\1\u01d1\1\0\4\u01d1\26\0"+
    "\1\304\2\u01d3\10\304\1\u01d4\1\344\1\304\1\u01d3\1\304"+
    "\4\u01d3\10\304\1\310\16\304\2\u01d3\10\304\1\u01d5\2\304"+
    "\1\u01d3\1\304\4\u01d3\26\304\1\0\2\u01c3\10\0\1\u01c4"+
    "\1\206\1\0\1\u01c3\1\0\4\u01c3\26\0\1\214\2\u01d6"+
    "\10\214\1\u01d7\1\315\1\254\1\u01d6\1\214\4\u01d6\10\214"+
    "\1\216\16\214\2\u01d6\10\214\1\u01d7\1\214\1\254\1\u01d6"+
    "\1\214\4\u01d6\26\214\1\0\2\u01d8\10\0\1\u01d9\1\300"+
    "\1\0\1\u01d8\1\0\4\u01d8\10\0\1\203\16\0\2\u01d8"+
    "\10\0\1\u01d9\2\0\1\u01d8\1\0\4\u01d8\26\0\1\304"+
    "\2\u01da\10\304\1\u01db\1\344\1\304\1\u01da\1\304\4\u01da"+
    "\10\304\1\310\16\304\2\u01da\10\304\1\u01dc\2\304\1\u01da"+
    "\1\304\4\u01da\26\304\1\0\2\u01ca\10\0\1\u01cb\1\206"+
    "\1\0\1\u01ca\1\0\4\u01ca\26\0\1\214\2\u01dd\10\214"+
    "\1\u01de\1\315\1\254\1\u01dd\1\214\4\u01dd\10\214\1\216"+
    "\16\214\2\u01dd\10\214\1\u01de\1\214\1\254\1\u01dd\1\214"+
    "\4\u01dd\26\214\1\0\2\u01df\10\0\1\u01e0\1\300\1\0"+
    "\1\u01df\1\0\4\u01df\10\0\1\203\16\0\2\u01df\10\0"+
    "\1\u01e0\2\0\1\u01df\1\0\4\u01df\26\0\1\304\2\u01e1"+
    "\10\304\1\u01e2\1\344\1\304\1\u01e1\1\304\4\u01e1\10\304"+
    "\1\310\16\304\2\u01e1\10\304\1\u01e3\2\304\1\u01e1\1\304"+
    "\4\u01e1\26\304\1\0\2\u01d1\10\0\1\u01d2\1\206\1\0"+
    "\1\u01d1\1\0\4\u01d1\26\0\1\214\2\u01e4\10\214\1\u01e5"+
    "\1\315\1\254\1\u01e4\1\214\4\u01e4\10\214\1\216\16\214"+
    "\2\u01e4\10\214\1\u01e5\1\214\1\254\1\u01e4\1\214\4\u01e4"+
    "\26\214\1\0\2\u01e6\10\0\1\u01e7\1\300\1\0\1\u01e6"+
    "\1\0\4\u01e6\10\0\1\203\16\0\2\u01e6\10\0\1\u01e7"+
    "\2\0\1\u01e6\1\0\4\u01e6\26\0\1\304\2\u01e8\10\304"+
    "\1\u01e9\1\344\1\304\1\u01e8\1\304\4\u01e8\10\304\1\310"+
    "\16\304\2\u01e8\10\304\1\u01ea\2\304\1\u01e8\1\304\4\u01e8"+
    "\26\304\1\0\2\u01d8\10\0\1\u01d9\1\206\1\0\1\u01d8"+
    "\1\0\4\u01d8\26\0\1\214\2\u01eb\10\214\1\u01ec\1\315"+
    "\1\254\1\u01eb\1\214\4\u01eb\10\214\1\216\16\214\2\u01eb"+
    "\10\214\1\u01ec\1\214\1\254\1\u01eb\1\214\4\u01eb\26\214"+
    "\1\0\2\u01ed\10\0\1\u01ee\1\300\1\0\1\u01ed\1\0"+
    "\4\u01ed\10\0\1\203\16\0\2\u01ed\10\0\1\u01ee\2\0"+
    "\1\u01ed\1\0\4\u01ed\26\0\1\304\2\u01ef\10\304\1\u01f0"+
    "\1\344\1\304\1\u01ef\1\304\4\u01ef\10\304\1\310\16\304"+
    "\2\u01ef\10\304\1\u01f1\2\304\1\u01ef\1\304\4\u01ef\26\304"+
    "\1\0\2\u01df\10\0\1\u01e0\1\206\1\0\1\u01df\1\0"+
    "\4\u01df\26\0\1\214\2\u01f2\10\214\1\u01f3\1\315\1\254"+
    "\1\u01f2\1\214\4\u01f2\10\214\1\216\16\214\2\u01f2\10\214"+
    "\1\u01f3\1\214\1\254\1\u01f2\1\214\4\u01f2\26\214\1\0"+
    "\2\u01f4\10\0\1\u01f5\1\300\1\0\1\u01f4\1\0\4\u01f4"+
    "\10\0\1\203\16\0\2\u01f4\10\0\1\u01f5\2\0\1\u01f4"+
    "\1\0\4\u01f4\26\0\1\304\2\u01f6\10\304\1\u01f7\1\344"+
    "\1\304\1\u01f6\1\304\4\u01f6\10\304\1\310\16\304\2\u01f6"+
    "\10\304\1\u01f8\2\304\1\u01f6\1\304\4\u01f6\26\304\1\0"+
    "\2\u01e6\10\0\1\u01e7\1\206\1\0\1\u01e6\1\0\4\u01e6"+
    "\26\0\1\214\2\u01f9\10\214\1\u01fa\1\315\1\254\1\u01f9"+
    "\1\214\4\u01f9\10\214\1\216\16\214\2\u01f9\10\214\1\u01fa"+
    "\1\214\1\254\1\u01f9\1\214\4\u01f9\26\214\1\0\2\u01fb"+
    "\10\0\1\u01fc\1\300\1\0\1\u01fb\1\0\4\u01fb\10\0"+
    "\1\203\16\0\2\u01fb\10\0\1\u01fc\2\0\1\u01fb\1\0"+
    "\4\u01fb\26\0\1\304\2\u01fd\10\304\1\u01fe\1\344\1\304"+
    "\1\u01fd\1\304\4\u01fd\10\304\1\310\16\304\2\u01fd\10\304"+
    "\1\u01ff\2\304\1\u01fd\1\304\4\u01fd\26\304\1\0\2\u01ed"+
    "\10\0\1\u01ee\1\206\1\0\1\u01ed\1\0\4\u01ed\26\0"+
    "\1\214\2\u0200\10\214\1\u0201\1\315\1\254\1\u0200\1\214"+
    "\4\u0200\10\214\1\216\16\214\2\u0200\10\214\1\u0201\1\214"+
    "\1\254\1\u0200\1\214\4\u0200\26\214\1\0\2\u0202\10\0"+
    "\1\u0203\1\300\1\0\1\u0202\1\0\4\u0202\10\0\1\203"+
    "\16\0\2\u0202\10\0\1\u0203\2\0\1\u0202\1\0\4\u0202"+
    "\26\0\1\304\2\u0204\10\304\1\u0205\1\344\1\304\1\u0204"+
    "\1\304\4\u0204\10\304\1\310\16\304\2\u0204\10\304\1\u0206"+
    "\2\304\1\u0204\1\304\4\u0204\26\304\1\0\2\u01f4\10\0"+
    "\1\u01f5\1\206\1\0\1\u01f4\1\0\4\u01f4\26\0\1\214"+
    "\2\u0207\10\214\1\u0208\1\315\1\254\1\u0207\1\214\4\u0207"+
    "\10\214\1\216\16\214\2\u0207\10\214\1\u0208\1\214\1\254"+
    "\1\u0207\1\214\4\u0207\26\214\1\0\2\u0209\10\0\1\u020a"+
    "\1\300\1\0\1\u0209\1\0\4\u0209\10\0\1\203\16\0"+
    "\2\u0209\10\0\1\u020a\2\0\1\u0209\1\0\4\u0209\26\0"+
    "\1\304\2\u020b\10\304\1\u020c\1\344\1\304\1\u020b\1\304"+
    "\4\u020b\10\304\1\310\16\304\2\u020b\10\304\1\u020d\2\304"+
    "\1\u020b\1\304\4\u020b\26\304\1\0\2\u01fb\10\0\1\u01fc"+
    "\1\206\1\0\1\u01fb\1\0\4\u01fb\26\0\1\214\2\u020e"+
    "\10\214\1\u020f\1\315\1\254\1\u020e\1\214\4\u020e\10\214"+
    "\1\216\16\214\2\u020e\10\214\1\u020f\1\214\1\254\1\u020e"+
    "\1\214\4\u020e\26\214\1\0\2\u0210\10\0\1\u0211\1\300"+
    "\1\0\1\u0210\1\0\4\u0210\10\0\1\203\16\0\2\u0210"+
    "\10\0\1\u0211\2\0\1\u0210\1\0\4\u0210\26\0\1\304"+
    "\2\u0212\10\304\1\u0213\1\344\1\304\1\u0212\1\304\4\u0212"+
    "\10\304\1\310\16\304\2\u0212\10\304\1\u0214\2\304\1\u0212"+
    "\1\304\4\u0212\26\304\1\0\2\u0202\10\0\1\u0203\1\206"+
    "\1\0\1\u0202\1\0\4\u0202\26\0\1\214\2\u0215\10\214"+
    "\1\u0216\1\315\1\254\1\u0215\1\214\4\u0215\10\214\1\216"+
    "\16\214\2\u0215\10\214\1\u0216\1\214\1\254\1\u0215\1\214"+
    "\4\u0215\26\214\1\0\2\u0217\10\0\1\u0218\1\300\1\0"+
    "\1\u0217\1\0\4\u0217\10\0\1\203\16\0\2\u0217\10\0"+
    "\1\u0218\2\0\1\u0217\1\0\4\u0217\26\0\1\304\2\u0219"+
    "\10\304\1\u021a\1\344\1\304\1\u0219\1\304\4\u0219\10\304"+
    "\1\310\16\304\2\u0219\10\304\1\u021b\2\304\1\u0219\1\304"+
    "\4\u0219\26\304\1\0\2\u0209\10\0\1\u020a\1\206\1\0"+
    "\1\u0209\1\0\4\u0209\26\0\1\214\2\u021c\10\214\1\u021d"+
    "\1\315\1\254\1\u021c\1\214\4\u021c\10\214\1\216\16\214"+
    "\2\u021c\10\214\1\u021d\1\214\1\254\1\u021c\1\214\4\u021c"+
    "\26\214\1\0\2\u021e\10\0\1\u021f\1\300\1\0\1\u021e"+
    "\1\0\4\u021e\10\0\1\203\16\0\2\u021e\10\0\1\u021f"+
    "\2\0\1\u021e\1\0\4\u021e\26\0\1\304\2\u0220\10\304"+
    "\1\u0221\1\344\1\304\1\u0220\1\304\4\u0220\10\304\1\310"+
    "\16\304\2\u0220\10\304\1\u0222\2\304\1\u0220\1\304\4\u0220"+
    "\26\304\1\0\2\u0210\10\0\1\u0211\1\206\1\0\1\u0210"+
    "\1\0\4\u0210\26\0\1\214\2\u0223\10\214\1\u0224\1\315"+
    "\1\254\1\u0223\1\214\4\u0223\10\214\1\216\16\214\2\u0223"+
    "\10\214\1\u0224\1\214\1\254\1\u0223\1\214\4\u0223\26\214"+
    "\1\0\2\u0225\10\0\1\u0226\1\300\1\0\1\u0225\1\0"+
    "\4\u0225\10\0\1\203\16\0\2\u0225\10\0\1\u0226\2\0"+
    "\1\u0225\1\0\4\u0225\26\0\1\304\2\u0227\10\304\1\u0228"+
    "\1\344\1\304\1\u0227\1\304\4\u0227\10\304\1\310\16\304"+
    "\2\u0227\10\304\1\u0229\2\304\1\u0227\1\304\4\u0227\26\304"+
    "\1\0\2\u0217\10\0\1\u0218\1\206\1\0\1\u0217\1\0"+
    "\4\u0217\26\0\1\214\2\u022a\10\214\1\u022b\1\315\1\254"+
    "\1\u022a\1\214\4\u022a\10\214\1\216\16\214\2\u022a\10\214"+
    "\1\u022b\1\214\1\254\1\u022a\1\214\4\u022a\26\214\1\0"+
    "\2\u022c\10\0\1\u022d\1\300\1\0\1\u022c\1\0\4\u022c"+
    "\10\0\1\203\16\0\2\u022c\10\0\1\u022d\2\0\1\u022c"+
    "\1\0\4\u022c\26\0\1\304\2\u022e\10\304\1\u022f\1\344"+
    "\1\304\1\u022e\1\304\4\u022e\10\304\1\310\16\304\2\u022e"+
    "\10\304\1\u0230\2\304\1\u022e\1\304\4\u022e\26\304\1\0"+
    "\2\u021e\10\0\1\u021f\1\206\1\0\1\u021e\1\0\4\u021e"+
    "\26\0\1\214\2\u0231\10\214\1\u0232\1\315\1\254\1\u0231"+
    "\1\214\4\u0231\10\214\1\216\16\214\2\u0231\10\214\1\u0232"+
    "\1\214\1\254\1\u0231\1\214\4\u0231\26\214\1\0\2\u0233"+
    "\10\0\1\u0234\1\300\1\0\1\u0233\1\0\4\u0233\10\0"+
    "\1\203\16\0\2\u0233\10\0\1\u0234\2\0\1\u0233\1\0"+
    "\4\u0233\26\0\1\304\2\u0235\10\304\1\u0236\1\344\1\304"+
    "\1\u0235\1\304\4\u0235\10\304\1\310\16\304\2\u0235\10\304"+
    "\1\u0237\2\304\1\u0235\1\304\4\u0235\26\304\1\0\2\u0225"+
    "\10\0\1\u0226\1\206\1\0\1\u0225\1\0\4\u0225\26\0"+
    "\1\214\2\u0238\10\214\1\u0239\1\315\1\254\1\u0238\1\214"+
    "\4\u0238\10\214\1\216\16\214\2\u0238\10\214\1\u0239\1\214"+
    "\1\254\1\u0238\1\214\4\u0238\26\214\1\0\2\u023a\10\0"+
    "\1\u023b\1\300\1\0\1\u023a\1\0\4\u023a\10\0\1\203"+
    "\16\0\2\u023a\10\0\1\u023b\2\0\1\u023a\1\0\4\u023a"+
    "\26\0\1\304\2\u023c\10\304\1\u023d\1\344\1\304\1\u023c"+
    "\1\304\4\u023c\10\304\1\310\16\304\2\u023c\10\304\1\u023e"+
    "\2\304\1\u023c\1\304\4\u023c\26\304\1\0\2\u022c\10\0"+
    "\1\u022d\1\206\1\0\1\u022c\1\0\4\u022c\26\0\1\214"+
    "\2\u023f\10\214\1\u0240\1\315\1\254\1\u023f\1\214\4\u023f"+
    "\10\214\1\216\16\214\2\u023f\10\214\1\u0240\1\214\1\254"+
    "\1\u023f\1\214\4\u023f\26\214\1\0\2\u0241\10\0\1\u0242"+
    "\1\300\1\0\1\u0241\1\0\4\u0241\10\0\1\203\16\0"+
    "\2\u0241\10\0\1\u0242\2\0\1\u0241\1\0\4\u0241\26\0"+
    "\1\304\2\u0243\10\304\1\u0244\1\344\1\304\1\u0243\1\304"+
    "\4\u0243\10\304\1\310\16\304\2\u0243\10\304\1\u0245\2\304"+
    "\1\u0243\1\304\4\u0243\26\304\1\0\2\u0233\10\0\1\u0234"+
    "\1\206\1\0\1\u0233\1\0\4\u0233\26\0\1\214\2\u0246"+
    "\10\214\1\u0247\1\315\1\254\1\u0246\1\214\4\u0246\10\214"+
    "\1\216\16\214\2\u0246\10\214\1\u0247\1\214\1\254\1\u0246"+
    "\1\214\4\u0246\26\214\1\0\2\u0248\10\0\1\u0249\1\300"+
    "\1\0\1\u0248\1\0\4\u0248\10\0\1\203\16\0\2\u0248"+
    "\10\0\1\u0249\2\0\1\u0248\1\0\4\u0248\26\0\1\304"+
    "\2\u024a\10\304\1\u024b\1\344\1\304\1\u024a\1\304\4\u024a"+
    "\10\304\1\310\16\304\2\u024a\10\304\1\u024c\2\304\1\u024a"+
    "\1\304\4\u024a\26\304\1\0\2\u023a\10\0\1\u023b\1\206"+
    "\1\0\1\u023a\1\0\4\u023a\26\0\1\214\2\u024d\10\214"+
    "\1\u024e\1\315\1\254\1\u024d\1\214\4\u024d\10\214\1\216"+
    "\16\214\2\u024d\10\214\1\u024e\1\214\1\254\1\u024d\1\214"+
    "\4\u024d\26\214\1\0\2\u024f\10\0\1\u0250\1\300\1\0"+
    "\1\u024f\1\0\4\u024f\10\0\1\203\16\0\2\u024f\10\0"+
    "\1\u0250\2\0\1\u024f\1\0\4\u024f\26\0\1\304\2\u0251"+
    "\10\304\1\u0252\1\344\1\304\1\u0251\1\304\4\u0251\10\304"+
    "\1\310\16\304\2\u0251\10\304\1\u0253\2\304\1\u0251\1\304"+
    "\4\u0251\26\304\1\0\2\u0241\10\0\1\u0242\1\206\1\0"+
    "\1\u0241\1\0\4\u0241\26\0\1\214\2\u0254\10\214\1\u0255"+
    "\1\315\1\254\1\u0254\1\214\4\u0254\10\214\1\216\16\214"+
    "\2\u0254\10\214\1\u0255\1\214\1\254\1\u0254\1\214\4\u0254"+
    "\26\214\1\0\2\u0256\10\0\1\u0257\1\300\1\0\1\u0256"+
    "\1\0\4\u0256\10\0\1\203\16\0\2\u0256\10\0\1\u0257"+
    "\2\0\1\u0256\1\0\4\u0256\26\0\1\304\2\u0258\10\304"+
    "\1\u0259\1\344\1\304\1\u0258\1\304\4\u0258\10\304\1\310"+
    "\16\304\2\u0258\10\304\1\u025a\2\304\1\u0258\1\304\4\u0258"+
    "\26\304\1\0\2\u0248\10\0\1\u0249\1\206\1\0\1\u0248"+
    "\1\0\4\u0248\26\0\1\214\2\u025b\10\214\1\u025c\1\315"+
    "\1\254\1\u025b\1\214\4\u025b\10\214\1\216\16\214\2\u025b"+
    "\10\214\1\u025c\1\214\1\254\1\u025b\1\214\4\u025b\26\214"+
    "\1\0\2\u025d\10\0\1\u025e\1\300\1\0\1\u025d\1\0"+
    "\4\u025d\10\0\1\203\16\0\2\u025d\10\0\1\u025e\2\0"+
    "\1\u025d\1\0\4\u025d\26\0\1\304\2\u025f\10\304\1\u0260"+
    "\1\344\1\304\1\u025f\1\304\4\u025f\10\304\1\310\16\304"+
    "\2\u025f\10\304\1\u0261\2\304\1\u025f\1\304\4\u025f\26\304"+
    "\1\0\2\u024f\10\0\1\u0250\1\206\1\0\1\u024f\1\0"+
    "\4\u024f\26\0\1\214\2\u0262\10\214\1\u0263\1\315\1\254"+
    "\1\u0262\1\214\4\u0262\10\214\1\216\16\214\2\u0262\10\214"+
    "\1\u0263\1\214\1\254\1\u0262\1\214\4\u0262\26\214\1\0"+
    "\2\u0264\10\0\1\u0265\1\300\1\0\1\u0264\1\0\4\u0264"+
    "\10\0\1\203\16\0\2\u0264\10\0\1\u0265\2\0\1\u0264"+
    "\1\0\4\u0264\26\0\1\304\2\u0266\10\304\1\u0267\1\344"+
    "\1\304\1\u0266\1\304\4\u0266\10\304\1\310\16\304\2\u0266"+
    "\10\304\1\u0268\2\304\1\u0266\1\304\4\u0266\26\304\1\0"+
    "\2\u0256\10\0\1\u0257\1\206\1\0\1\u0256\1\0\4\u0256"+
    "\26\0\1\214\2\u0269\10\214\1\u026a\1\315\1\254\1\u0269"+
    "\1\214\4\u0269\10\214\1\216\16\214\2\u0269\10\214\1\u026a"+
    "\1\214\1\254\1\u0269\1\214\4\u0269\26\214\1\0\2\u026b"+
    "\10\0\1\u026c\1\300\1\0\1\u026b\1\0\4\u026b\10\0"+
    "\1\203\16\0\2\u026b\10\0\1\u026c\2\0\1\u026b\1\0"+
    "\4\u026b\26\0\1\304\2\u026d\10\304\1\u026e\1\344\1\304"+
    "\1\u026d\1\304\4\u026d\10\304\1\310\16\304\2\u026d\10\304"+
    "\1\u026f\2\304\1\u026d\1\304\4\u026d\26\304\1\0\2\u025d"+
    "\10\0\1\u025e\1\206\1\0\1\u025d\1\0\4\u025d\26\0"+
    "\1\214\2\u0270\10\214\1\u0271\1\315\1\254\1\u0270\1\214"+
    "\4\u0270\10\214\1\216\16\214\2\u0270\10\214\1\u0271\1\214"+
    "\1\254\1\u0270\1\214\4\u0270\26\214\1\0\2\u0272\10\0"+
    "\1\u0273\1\300\1\0\1\u0272\1\0\4\u0272\10\0\1\203"+
    "\16\0\2\u0272\10\0\1\u0273\2\0\1\u0272\1\0\4\u0272"+
    "\26\0\1\304\2\u0274\10\304\1\u0275\1\344\1\304\1\u0274"+
    "\1\304\4\u0274\10\304\1\310\16\304\2\u0274\10\304\1\u0276"+
    "\2\304\1\u0274\1\304\4\u0274\26\304\1\0\2\u0264\10\0"+
    "\1\u0265\1\206\1\0\1\u0264\1\0\4\u0264\26\0\1\214"+
    "\2\u0277\10\214\1\u0278\1\315\1\254\1\u0277\1\214\4\u0277"+
    "\10\214\1\216\16\214\2\u0277\10\214\1\u0278\1\214\1\254"+
    "\1\u0277\1\214\4\u0277\26\214\1\0\2\u0279\10\0\1\u027a"+
    "\1\300\1\0\1\u0279\1\0\4\u0279\10\0\1\203\16\0"+
    "\2\u0279\10\0\1\u027a\2\0\1\u0279\1\0\4\u0279\26\0"+
    "\1\304\2\u027b\10\304\1\u027c\1\344\1\304\1\u027b\1\304"+
    "\4\u027b\10\304\1\310\16\304\2\u027b\10\304\1\u027d\2\304"+
    "\1\u027b\1\304\4\u027b\26\304\1\0\2\u026b\10\0\1\u026c"+
    "\1\206\1\0\1\u026b\1\0\4\u026b\26\0\1\214\2\u027e"+
    "\10\214\1\u027f\1\315\1\254\1\u027e\1\214\4\u027e\10\214"+
    "\1\216\16\214\2\u027e\10\214\1\u027f\1\214\1\254\1\u027e"+
    "\1\214\4\u027e\26\214\1\0\2\u0280\10\0\1\u0281\1\300"+
    "\1\0\1\u0280\1\0\4\u0280\10\0\1\203\16\0\2\u0280"+
    "\10\0\1\u0281\2\0\1\u0280\1\0\4\u0280\26\0\1\304"+
    "\2\u0282\10\304\1\u0283\1\344\1\304\1\u0282\1\304\4\u0282"+
    "\10\304\1\310\16\304\2\u0282\10\304\1\u0284\2\304\1\u0282"+
    "\1\304\4\u0282\26\304\1\0\2\u0272\10\0\1\u0273\1\206"+
    "\1\0\1\u0272\1\0\4\u0272\26\0\1\214\2\u0285\10\214"+
    "\1\u0286\1\315\1\254\1\u0285\1\214\4\u0285\10\214\1\216"+
    "\16\214\2\u0285\10\214\1\u0286\1\214\1\254\1\u0285\1\214"+
    "\4\u0285\26\214\1\0\2\u0287\10\0\1\u0288\1\300\1\0"+
    "\1\u0287\1\0\4\u0287\10\0\1\203\16\0\2\u0287\10\0"+
    "\1\u0288\2\0\1\u0287\1\0\4\u0287\26\0\1\304\2\u0289"+
    "\10\304\1\u028a\1\344\1\304\1\u0289\1\304\4\u0289\10\304"+
    "\1\310\16\304\2\u0289\10\304\1\u028b\2\304\1\u0289\1\304"+
    "\4\u0289\26\304\1\0\2\u0279\10\0\1\u027a\1\206\1\0"+
    "\1\u0279\1\0\4\u0279\26\0\1\214\2\u028c\10\214\1\u028d"+
    "\1\315\1\254\1\u028c\1\214\4\u028c\10\214\1\216\16\214"+
    "\2\u028c\10\214\1\u028d\1\214\1\254\1\u028c\1\214\4\u028c"+
    "\26\214\1\0\2\u028e\10\0\1\u028f\1\300\1\0\1\u028e"+
    "\1\0\4\u028e\10\0\1\203\16\0\2\u028e\10\0\1\u028f"+
    "\2\0\1\u028e\1\0\4\u028e\26\0\1\304\2\u0290\10\304"+
    "\1\u0291\1\344\1\304\1\u0290\1\304\4\u0290\10\304\1\310"+
    "\16\304\2\u0290\10\304\1\u0292\2\304\1\u0290\1\304\4\u0290"+
    "\26\304\1\0\2\u0280\10\0\1\u0281\1\206\1\0\1\u0280"+
    "\1\0\4\u0280\26\0\1\214\2\u0293\10\214\1\u0294\1\315"+
    "\1\254\1\u0293\1\214\4\u0293\10\214\1\216\16\214\2\u0293"+
    "\10\214\1\u0294\1\214\1\254\1\u0293\1\214\4\u0293\26\214"+
    "\1\0\2\u0295\10\0\1\u0296\1\300\1\0\1\u0295\1\0"+
    "\4\u0295\10\0\1\203\16\0\2\u0295\10\0\1\u0296\2\0"+
    "\1\u0295\1\0\4\u0295\26\0\1\304\2\u0297\10\304\1\u0298"+
    "\1\344\1\304\1\u0297\1\304\4\u0297\10\304\1\310\16\304"+
    "\2\u0297\10\304\1\u0299\2\304\1\u0297\1\304\4\u0297\26\304"+
    "\1\0\2\u0287\10\0\1\u0288\1\206\1\0\1\u0287\1\0"+
    "\4\u0287\26\0\1\214\2\u029a\10\214\1\u029b\1\315\1\254"+
    "\1\u029a\1\214\4\u029a\10\214\1\216\16\214\2\u029a\10\214"+
    "\1\u029b\1\214\1\254\1\u029a\1\214\4\u029a\26\214\1\0"+
    "\2\u029c\10\0\1\u029d\1\300\1\0\1\u029c\1\0\4\u029c"+
    "\10\0\1\203\16\0\2\u029c\10\0\1\u029d\2\0\1\u029c"+
    "\1\0\4\u029c\26\0\1\304\2\u029e\10\304\1\u029f\1\344"+
    "\1\304\1\u029e\1\304\4\u029e\10\304\1\310\16\304\2\u029e"+
    "\10\304\1\u02a0\2\304\1\u029e\1\304\4\u029e\26\304\1\0"+
    "\2\u028e\10\0\1\u028f\1\206\1\0\1\u028e\1\0\4\u028e"+
    "\26\0\1\214\2\u02a1\10\214\1\u02a2\1\315\1\254\1\u02a1"+
    "\1\214\4\u02a1\10\214\1\216\16\214\2\u02a1\10\214\1\u02a2"+
    "\1\214\1\254\1\u02a1\1\214\4\u02a1\26\214\1\0\2\u02a3"+
    "\11\0\1\300\1\0\1\u02a3\1\0\4\u02a3\10\0\1\203"+
    "\16\0\2\u02a3\13\0\1\u02a3\1\0\4\u02a3\26\0\1\304"+
    "\2\u02a4\10\304\1\u02a5\1\344\1\304\1\u02a4\1\304\4\u02a4"+
    "\10\304\1\310\16\304\2\u02a4\10\304\1\u02a6\2\304\1\u02a4"+
    "\1\304\4\u02a4\26\304\1\0\2\u0295\10\0\1\u0296\1\206"+
    "\1\0\1\u0295\1\0\4\u0295\26\0\1\214\2\u02a7\11\214"+
    "\1\315\1\254\1\u02a7\1\214\4\u02a7\10\214\1\216\16\214"+
    "\2\u02a7\12\214\1\254\1\u02a7\1\214\4\u02a7\26\214\14\0"+
    "\1\300\17\0\1\203\15\0\1\304\2\u02a8\10\304\1\u02a9"+
    "\1\344\1\304\1\u02a8\1\304\4\u02a8\10\304\1\310\16\304"+
    "\2\u02a8\10\304\1\u02aa\2\304\1\u02a8\1\304\4\u02a8\26\304"+
    "\1\0\2\u029c\10\0\1\u029d\1\206\1\0\1\u029c\1\0"+
    "\4\u029c\26\0\14\214\1\315\1\254\16\214\1\216\15\214"+
    "\1\304\2\u02ab\10\304\1\326\1\344\1\304\1\u02ab\1\304"+
    "\4\u02ab\10\304\1\310\16\304\2\u02ab\10\304\1\247\2\304"+
    "\1\u02ab\1\304\4\u02ab\26\304\1\0\2\u02a3\11\0\1\206"+
    "\1\0\1\u02a3\1\0\4\u02a3\26\0\13\304\1\326\1\344"+
    "\17\304\1\310\15\304";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26124];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\11\2\1\1\11\3\1\1\11\12\1\2\11"+
    "\3\1\1\11\2\1\3\11\3\1\1\11\5\1\1\11"+
    "\12\1\2\0\2\1\1\0\1\11\1\1\3\0\1\1"+
    "\1\11\1\1\1\0\1\1\4\0\1\1\1\11\1\0"+
    "\1\1\1\0\1\11\2\0\1\11\4\1\2\0\1\11"+
    "\1\1\5\0\1\1\2\0\1\11\2\1\3\0\2\1"+
    "\12\0\1\1\6\0\1\1\3\0\1\11\12\0\1\11"+
    "\4\1\3\0\1\11\1\0\1\11\2\0\1\11\2\1"+
    "\1\11\1\1\1\0\1\1\12\0\1\11\1\0\1\11"+
    "\3\1\2\0\1\1\3\0\1\1\1\11\3\0\1\11"+
    "\2\0\1\11\3\0\1\1\5\0\1\1\26\0\1\1"+
    "\22\0\1\1\2\0\1\1\76\0\1\1\u0172\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[683];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
  private static class Token implements MarkdownTokenTypes {}

  private int yycolumn = 0;

  private Stack<Integer> stateStack = new Stack<Integer>();

  private boolean isHeader = false;

  private int currentIndent = 0;

  private Paragraph paragraph = new Paragraph();
  private BlockQuotes blockQuotes = new BlockQuotes();
  private CodeFence codeFence = new CodeFence();
  private ParseDelimited parseDelimited = new ParseDelimited();

  private static class ParseDelimited {
    char exitChar = 0;
    IElementType returnType = null;
    boolean inlinesAllowed = true;
  }

  private static class Paragraph {
    boolean currentLineIsNotBlank = false;
    int lineCount = 0;
  }

  private static class BlockQuotes {
    int level = 0;
    int currentLineLevel = 0;

    void processMarker() {
      currentLineLevel++;
      adjustLevel();
    }

    void adjustLevel() {
      level = Math.max(level, currentLineLevel);
    }

    void resetLevel() {
      level = 0;
    }
  }

  private static class LinkDef {
    boolean wasUrl;
    boolean wasParen;
  }

  private static class CodeFence {
    char fenceChar;
    int fenceLength;
    boolean typeWasRead;
    // for code span
    int spanLength;
  }

  private static class HtmlHelper {
    private static final String BLOCK_TAGS_STRING =
            "article, header, aside, hgroup, blockquote, hr, iframe, body, li, map, button, " +
            "object, canvas, ol, caption, output, col, p, colgroup, pre, dd, progress, div, " +
            "section, dl, table, td, dt, tbody, embed, textarea, fieldset, tfoot, figcaption, " +
            "th, figure, thead, footer, footer, tr, form, ul, h1, h2, h3, h4, h5, h6, video, " +
            "script, style";

    static final Set<String> BLOCK_TAGS = getBlockTagsSet();

    private static Set<String> getBlockTagsSet() {
      Set<String> result = new HashSet<String>();
      String[] tags = BLOCK_TAGS_STRING.split(", ");
      for (String tag : tags) {
        result.add(tag);
      }
      return result;
    }
  }

  private static IElementType getDelimiterTokenType(char c) {
    switch (c) {
      case '"': return Token.DOUBLE_QUOTE;
      case '\'': return Token.SINGLE_QUOTE;
      case '(': return Token.LPAREN;
      case ')': return Token.RPAREN;
      case '[': return Token.LBRACKET;
      case ']': return Token.RBRACKET;
      case '<': return Token.LT;
      case '>': return Token.GT;
      default: return Token.BAD_CHARACTER;
    }
  }

  private IElementType parseDelimited(IElementType contentsType, boolean allowInlines) {
    char first = yycharat(0);
    char last = yycharat(yylength() - 1);

    stateStack.push(yystate());

    parseDelimited.exitChar = last;
    parseDelimited.returnType = contentsType;
//    parseDelimited.inlinesAllowed = allowInlines;
    parseDelimited.inlinesAllowed = true;

    yybegin(PARSE_DELIMITED);

    yypushback(yylength() - 1);
    return getDelimiterTokenType(first);
  }

  private void increaseIndent(int delta) {
    currentIndent = Math.max(currentIndent, (yycolumn & 0xffffc) + delta);
  }

  private void recalcIndent() {
    int newIndent = yylength() - 1;
    if (newIndent < currentIndent) {
      currentIndent = newIndent & 0xfffc;
    }
  }

  private boolean isFourIndent() {
    return yycolumn >= currentIndent + 2 * blockQuotes.level + 4;
  }

  private void updateParagraphInfoOnNewline() {
    if (paragraph.currentLineIsNotBlank) {
      paragraph.lineCount++;
      paragraph.currentLineIsNotBlank = false;
    }
    else {
      endParagraph();
      blockQuotes.resetLevel();
    }
  }

  private void endParagraph() {
    paragraph.lineCount = 0;
  }

  private void processEol() {
    updateParagraphInfoOnNewline();

    int newlinePos = 1;
    while (newlinePos < yylength() && yycharat(newlinePos) != '\n') {
      newlinePos++;
    }

    // there is always one at 0 so that means there are two at least
    if (newlinePos != yylength()) {
      yypushback(yylength() - newlinePos);
      return;
    }

    recalcIndent();
    yybegin(YYINITIAL);
    yypushback(yylength() - 1);

    isHeader = false;
    blockQuotes.currentLineLevel = 0;
  }

  private void popState() {
    if (stateStack.isEmpty()) {
      yybegin(AFTER_LINE_START);
    }
    else {
      yybegin(stateStack.pop());
    }
  }

  private void resetState() {
    yypushback(yylength());

    popState();
  }

  private String getTagName() {
    if (yylength() > 1 && yycharat(1) == '/') {
      return yytext().toString().substring(2, yylength() - 1).trim();
    }
    return yytext().toString().substring(1);
  }

  private boolean isBlockTag(String tagName) {
    return HtmlHelper.BLOCK_TAGS.contains(tagName.toLowerCase());
  }

  private boolean canInline() {
    return yystate() == AFTER_LINE_START || yystate() == PARSE_DELIMITED && parseDelimited.inlinesAllowed;
  }

  private IElementType getReturnGeneralized(IElementType defaultType) {
    if (canInline()) {
      return defaultType;
    }
    return parseDelimited.returnType;
  }

  private int countChars(CharSequence s, char c) {
    int result = 0;
    for (int i = 0; i < s.length(); ++i) {
      if (s.charAt(i) == c)
        result++;
    }
    return result;
  }



  public _MarkdownLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _MarkdownLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 106) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(String buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch ((zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL] : zzBufferL.charAt(zzCurrentPosL))) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { int lastSpaces = yytext().toString().indexOf("\n");
    if (lastSpaces >= 2) {
      yypushback(yylength() - lastSpaces);
      return Token.HARD_LINE_BREAK;
    }
    else if (lastSpaces > 0) {
      yypushback(yylength() - lastSpaces);
      return Token.WHITE_SPACE;
    }

    processEol();
    return Token.EOL;
          }
        case 39: break;
        case 32: 
          { if (isFourIndent()) {
      resetState();
    }
    else {
      endParagraph();
      yybegin(HTML_BLOCK);
      yypushback(yylength());
    }
          }
        case 40: break;
        case 35: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 9;
            int zzFPos = zzStartRead;
            if (zzFin.length <= (zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())) { zzFin = new boolean[(zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzFPos++] : zzBufferL.charAt(zzFPos++));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 8;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[--zzFPos] : zzBufferL.charAt(--zzFPos));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { if (yycharat(0) == codeFence.fenceChar && yylength() >= codeFence.fenceLength) {
      yybegin(YYINITIAL);
      return Token.CODE_FENCE_END;
    }
    return Token.CODE;
          }
        case 41: break;
        case 37: 
          { return parseDelimited(Token.EMAIL_AUTOLINK, false);
          }
        case 42: break;
        case 36: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { if (isFourIndent()) {
      resetState();
    }
    else {
      endParagraph();
      return Token.HORIZONTAL_RULE;
    }
          }
        case 43: break;
        case 33: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { if (isFourIndent()) {
      resetState();
    }
    else {
      endParagraph();
      return Token.HORIZONTAL_RULE;
    }
          }
        case 44: break;
        case 11: 
          { return Token.EXCLAMATION_MARK;
          }
        case 45: break;
        case 30: 
          { return Token.HTML_TAG;
          }
        case 46: break;
        case 24: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { if (isFourIndent()) {
      resetState();
    }
    else {
      isHeader = true;
      endParagraph();
      yybegin(AFTER_LINE_START);

      return Token.ATX_HEADER;
    }
          }
        case 47: break;
        case 34: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 9;
            int zzFPos = zzStartRead;
            if (zzFin.length <= (zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())) { zzFin = new boolean[(zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzFPos++] : zzBufferL.charAt(zzFPos++));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 10;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[--zzFPos] : zzBufferL.charAt(--zzFPos));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { if (isFourIndent()) {
      resetState();
    }
    else {
      endParagraph();

      codeFence.fenceChar = yycharat(0);
      codeFence.fenceLength = yylength();
      codeFence.typeWasRead = false;

      yybegin(CODE_FENCE);
      return Token.CODE_FENCE_START;
    }
          }
        case 48: break;
        case 25: 
          { yybegin(YYINITIAL);
    yypushback(yylength());
          }
        case 49: break;
        case 14: 
          { if (canInline()) {
      return Token.BACKTICK;
    }
    return parseDelimited.returnType;
          }
        case 50: break;
        case 22: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { increaseIndent(4);
    return Token.LIST_BULLET;
          }
        case 51: break;
        case 27: 
          { return getReturnGeneralized(Token.ESCAPED_BACKTICKS);
          }
        case 52: break;
        case 38: 
          { return parseDelimited(Token.AUTOLINK, false);
          }
        case 53: break;
        case 16: 
          { return Token.CODE;
          }
        case 54: break;
        case 26: 
          { return getReturnGeneralized(Token.TEXT);
          }
        case 55: break;
        case 7: 
          { return Token.TEXT;
          }
        case 56: break;
        case 6: 
          { return Token.BAD_CHARACTER;
          }
        case 57: break;
        case 1: 
          { paragraph.currentLineIsNotBlank = true;
    resetState();
          }
        case 58: break;
        case 13: 
          { return getReturnGeneralized(Token.EMPH);
          }
        case 59: break;
        case 29: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { if (isHeader) {
      return Token.ATX_HEADER;
    }
    return Token.TEXT;
          }
        case 60: break;
        case 31: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { if (isHeader) {
      return Token.ATX_HEADER;
    }
    return Token.TEXT;
          }
        case 61: break;
        case 5: 
          { return Token.HTML_BLOCK;
          }
        case 62: break;
        case 23: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 7;
            int zzFPos = zzStartRead;
            if (zzFin.length <= (zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())) { zzFin = new boolean[(zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzFPos++] : zzBufferL.charAt(zzFPos++));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 8;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[--zzFPos] : zzBufferL.charAt(--zzFPos));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { if (isFourIndent()) {
      resetState();
    }
    else if (paragraph.lineCount == 1 && blockQuotes.level == blockQuotes.currentLineLevel) {
      return yycharat(0) == '=' ? Token.SETEXT_1 : Token.SETEXT_2;
    }
    else if (yycharat(0) == '-' && yylength() >= 3) {
      endParagraph();
      return Token.HORIZONTAL_RULE;
    }
    else {
      resetState();
    }
          }
        case 63: break;
        case 20: 
          { increaseIndent(4);
    return Token.LIST_NUMBER;
          }
        case 64: break;
        case 2: 
          { if (paragraph.lineCount == 0 && yycolumn + yylength() >= currentIndent + 2 * blockQuotes.currentLineLevel + 4) {
      blockQuotes.resetLevel();
      yybegin(CODE);
    }
    return Token.WHITE_SPACE;
          }
        case 65: break;
        case 10: 
          { return getDelimiterTokenType(yycharat(0));
          }
        case 66: break;
        case 15: 
          { if (yycharat(0) == parseDelimited.exitChar) {
      yybegin(stateStack.pop());
      return getDelimiterTokenType(yycharat(0));
    }
    return parseDelimited.returnType;
          }
        case 67: break;
        case 4: 
          { blockQuotes.processMarker();
    return Token.BLOCK_QUOTE;
          }
        case 68: break;
        case 3: 
          { resetState();
          }
        case 69: break;
        case 19: 
          { int newLevel = countChars(yytext(), '>');
    if (newLevel < blockQuotes.level) {
      yypushback(yylength() - 1);
      processEol();
      return Token.EOL;
    }
    else {
      codeFence.typeWasRead = true;
      return Token.CODE;
    }
          }
        case 70: break;
        case 12: 
          { return Token.COLON;
          }
        case 71: break;
        case 8: 
          { return Token.WHITE_SPACE;
          }
        case 72: break;
        case 28: 
          { return Token.SECTION_ID;
          }
        case 73: break;
        case 18: 
          { if (!codeFence.typeWasRead) {
      codeFence.typeWasRead = true;
      return Token.FENCE_LANG;
    }
    return Token.CODE;
          }
        case 74: break;
        case 17: 
          { processEol();
    return Token.EOL;
          }
        case 75: break;
        case 21: 
          { if (isFourIndent()) {
      resetState();
    }
    else {
      String tagName = getTagName();
      if (isBlockTag(tagName)) {
        endParagraph();
        yybegin(HTML_BLOCK);
        yypushback(yylength());
      } else {
        resetState();
      }
    }
          }
        case 76: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
