/* The following code was generated by JFlex 1.4.3 on 8/20/15 5:34 PM */

package org.intellij.markdown.lexer;

import org.intellij.markdown.IElementType;
import org.intellij.markdown.MarkdownTokenTypes;

import java.util.HashSet;
import java.util.Set;
import java.util.Stack;

/* Auto generated File */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/20/15 5:34 PM from the specification file
 * <tt>/Users/valich/work/intellij-markdown/src/org/intellij/markdown/lexer/markdown.flex</tt>
 */
public class _MarkdownLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int CODE = 8;
  public static final int AFTER_LINE_START = 4;
  public static final int TAG_START = 2;
  public static final int YYINITIAL = 0;
  public static final int PARSE_DELIMITED = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\4\1\0\1\3\1\5\22\0\1\3\1\12\1\6"+
    "\4\36\1\10\1\40\1\40\1\37\1\36\1\35\1\13\1\34\1\31"+
    "\12\1\1\25\1\0\1\11\1\30\1\14\1\15\1\33\1\22\1\16"+
    "\1\20\1\21\17\16\1\23\6\16\1\17\1\7\1\24\1\32\1\26"+
    "\1\27\32\2\1\36\1\32\2\36\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\3\1\1\2\2\3\1\4\1\5\1\6\1\3"+
    "\1\6\1\7\1\10\1\11\1\12\4\13\3\0\1\14"+
    "\1\15\7\0\1\14\3\0\1\16\26\0\1\17\2\0"+
    "\1\20\3\0\1\16\5\0\1\17\22\0\1\17\20\0"+
    "\1\16\2\0\1\16\74\0\1\16\u0172\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[546];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\102\0\143\0\204\0\245\0\306\0\204"+
    "\0\204\0\347\0\u0108\0\u0129\0\204\0\u014a\0\u016b\0\204"+
    "\0\204\0\204\0\u018c\0\204\0\u01ad\0\u014a\0\u016b\0\u01ce"+
    "\0\347\0\u01ef\0\204\0\u0210\0\u0231\0\u0252\0\u0273\0\u0294"+
    "\0\u02b5\0\u01ad\0\u02d6\0\u01ef\0\u02f7\0\u0318\0\u0339\0\204"+
    "\0\u035a\0\u037b\0\u039c\0\u03bd\0\u03de\0\u03ff\0\u0420\0\u0441"+
    "\0\u0462\0\u0483\0\u04a4\0\u04c5\0\u04e6\0\u0507\0\u0528\0\u0549"+
    "\0\u056a\0\u058b\0\u05ac\0\u05cd\0\u05ee\0\u060f\0\204\0\u0630"+
    "\0\u0651\0\204\0\u0672\0\u0693\0\u06b4\0\u0672\0\u06d5\0\u06f6"+
    "\0\u0717\0\u0738\0\u0759\0\u03ff\0\u077a\0\u079b\0\u07bc\0\u07dd"+
    "\0\u07fe\0\u081f\0\u0840\0\u0861\0\u0882\0\u08a3\0\u08c4\0\u08e5"+
    "\0\u0906\0\u0927\0\u0948\0\u0969\0\u098a\0\u09ab\0\u0672\0\u09cc"+
    "\0\u09ed\0\u0a0e\0\u0a2f\0\u0a50\0\u0a71\0\u0a92\0\u0ab3\0\u0ad4"+
    "\0\u0af5\0\u0b16\0\u0b37\0\u0b58\0\u0b79\0\u0b9a\0\u0bbb\0\u07dd"+
    "\0\u0bdc\0\u0bfd\0\u07fe\0\u0c1e\0\u0c3f\0\u0c60\0\u0c81\0\u0ca2"+
    "\0\u0cc3\0\u0ce4\0\u0d05\0\u0d26\0\u0d47\0\u0d68\0\u0d89\0\u0daa"+
    "\0\u0dcb\0\u0dec\0\u0e0d\0\u0e2e\0\u0e4f\0\u0e70\0\u0e91\0\u0eb2"+
    "\0\u0ed3\0\u0ef4\0\u0f15\0\u0f36\0\u0f57\0\u0f78\0\u0f99\0\u0fba"+
    "\0\u0fdb\0\u0ffc\0\u101d\0\u103e\0\u105f\0\u1080\0\u10a1\0\u10c2"+
    "\0\u10e3\0\u1104\0\u1125\0\u1146\0\u1167\0\u1188\0\u11a9\0\u11ca"+
    "\0\u11eb\0\u120c\0\u122d\0\u124e\0\u126f\0\u1290\0\u12b1\0\u12d2"+
    "\0\u12f3\0\u1314\0\u1335\0\u1356\0\u1377\0\u1398\0\u13b9\0\u105f"+
    "\0\u13da\0\u13fb\0\u141c\0\u143d\0\u145e\0\u147f\0\u14a0\0\u14c1"+
    "\0\u14e2\0\u1503\0\u1524\0\u1545\0\u1566\0\u1587\0\u15a8\0\u15c9"+
    "\0\u15ea\0\u160b\0\u162c\0\u164d\0\u166e\0\u168f\0\u16b0\0\u16d1"+
    "\0\u16f2\0\u1713\0\u1734\0\u1755\0\u1776\0\u1797\0\u17b8\0\u17d9"+
    "\0\u17fa\0\u181b\0\u183c\0\u185d\0\u187e\0\u189f\0\u18c0\0\u18e1"+
    "\0\u1902\0\u1923\0\u1944\0\u1965\0\u1986\0\u19a7\0\u19c8\0\u19e9"+
    "\0\u1a0a\0\u1a2b\0\u1a4c\0\u1a6d\0\u1a8e\0\u1aaf\0\u1ad0\0\u1af1"+
    "\0\u1b12\0\u1b33\0\u1b54\0\u1b75\0\u1b96\0\u1bb7\0\u1bd8\0\u1bf9"+
    "\0\u1c1a\0\u1c3b\0\u1c5c\0\u1c7d\0\u1c9e\0\u1cbf\0\u1ce0\0\u1d01"+
    "\0\u1d22\0\u1d43\0\u1d64\0\u1d85\0\u1da6\0\u1dc7\0\u1de8\0\u1e09"+
    "\0\u1e2a\0\u1e4b\0\u1e6c\0\u1e8d\0\u1eae\0\u1ecf\0\u1ef0\0\u1f11"+
    "\0\u1f32\0\u1f53\0\u1f74\0\u1f95\0\u1fb6\0\u1fd7\0\u1ff8\0\u2019"+
    "\0\u203a\0\u205b\0\u207c\0\u209d\0\u20be\0\u20df\0\u2100\0\u2121"+
    "\0\u2142\0\u2163\0\u2184\0\u21a5\0\u21c6\0\u21e7\0\u2208\0\u2229"+
    "\0\u224a\0\u226b\0\u228c\0\u22ad\0\u22ce\0\u22ef\0\u2310\0\u2331"+
    "\0\u2352\0\u2373\0\u2394\0\u23b5\0\u23d6\0\u23f7\0\u2418\0\u2439"+
    "\0\u245a\0\u247b\0\u249c\0\u24bd\0\u24de\0\u24ff\0\u2520\0\u2541"+
    "\0\u2562\0\u2583\0\u25a4\0\u25c5\0\u25e6\0\u2607\0\u2628\0\u2649"+
    "\0\u266a\0\u268b\0\u26ac\0\u26cd\0\u26ee\0\u270f\0\u2730\0\u2751"+
    "\0\u2772\0\u2793\0\u27b4\0\u27d5\0\u27f6\0\u2817\0\u2838\0\u2859"+
    "\0\u287a\0\u289b\0\u28bc\0\u28dd\0\u28fe\0\u291f\0\u2940\0\u2961"+
    "\0\u2982\0\u29a3\0\u29c4\0\u29e5\0\u2a06\0\u2a27\0\u2a48\0\u2a69"+
    "\0\u2a8a\0\u2aab\0\u2acc\0\u2aed\0\u2b0e\0\u2b2f\0\u2b50\0\u2b71"+
    "\0\u2b92\0\u2bb3\0\u2bd4\0\u2bf5\0\u2c16\0\u2c37\0\u2c58\0\u2c79"+
    "\0\u2c9a\0\u2cbb\0\u2cdc\0\u2cfd\0\u2d1e\0\u2d3f\0\u2d60\0\u2d81"+
    "\0\u2da2\0\u2dc3\0\u2de4\0\u2e05\0\u2e26\0\u2e47\0\u2e68\0\u2e89"+
    "\0\u2eaa\0\u2ecb\0\u2eec\0\u2f0d\0\u2f2e\0\u2f4f\0\u2f70\0\u2f91"+
    "\0\u2fb2\0\u2fd3\0\u2ff4\0\u3015\0\u3036\0\u3057\0\u3078\0\u3099"+
    "\0\u30ba\0\u30db\0\u30fc\0\u311d\0\u313e\0\u315f\0\u3180\0\u31a1"+
    "\0\u31c2\0\u31e3\0\u3204\0\u3225\0\u3246\0\u3267\0\u3288\0\u32a9"+
    "\0\u32ca\0\u32eb\0\u330c\0\u332d\0\u334e\0\u336f\0\u3390\0\u33b1"+
    "\0\u33d2\0\u33f3\0\u3414\0\u3435\0\u3456\0\u3477\0\u3498\0\u34b9"+
    "\0\u34da\0\u34fb\0\u351c\0\u353d\0\u355e\0\u357f\0\u35a0\0\u35c1"+
    "\0\u35e2\0\u3603\0\u3624\0\u3645\0\u3666\0\u3687\0\u36a8\0\u36c9"+
    "\0\u36ea\0\u370b\0\u372c\0\u374d\0\u376e\0\u378f\0\u37b0\0\u37d1"+
    "\0\u37f2\0\u3813\0\u3834\0\u3855\0\u3876\0\u3897\0\u38b8\0\u38d9"+
    "\0\u38fa\0\u391b\0\u393c\0\u395d\0\u397e\0\u399f\0\u39c0\0\u39e1"+
    "\0\u3a02\0\u3a23\0\u3a44\0\u3a65\0\u3a86\0\u3aa7\0\u3ac8\0\u3ae9"+
    "\0\u3b0a\0\u3b2b\0\u3b4c\0\u3b6d\0\u3b8e\0\u3baf\0\u3bd0\0\u3bf1"+
    "\0\u3c12\0\u3c33\0\u3c54\0\u3c75\0\u3c96\0\u3cb7\0\u3cd8\0\u3cf9"+
    "\0\u3d1a\0\u3d3b\0\u3d5c\0\u3d7d\0\u3d9e\0\u3dbf\0\u3de0\0\u3e01"+
    "\0\u3e22\0\u3e43\0\u3e64\0\u3e85\0\u3ea6\0\u3ec7\0\u3ee8\0\u3f09"+
    "\0\u3f2a\0\u3f4b\0\u3f6c\0\u3f8d\0\u3fae\0\u3fcf\0\u3ff0\0\u4011"+
    "\0\u4032\0\u4053\0\u4074\0\u4095\0\u40b6\0\u40d7\0\u40f8\0\u4119"+
    "\0\u413a\0\u415b\0\u417c\0\u419d\0\u41be\0\u41df\0\u4200\0\u4221"+
    "\0\u4242\0\u4263\0\u4284\0\u42a5\0\u42c6\0\u42e7\0\u4308\0\u4329"+
    "\0\u434a\0\u436b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[546];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\5\1\6\1\5\1\7\6\5\1\10\24\5\4\11"+
    "\1\0\35\11\2\12\1\13\2\14\1\15\1\16\1\15"+
    "\1\17\1\20\1\11\1\15\1\11\1\12\1\15\4\12"+
    "\1\15\1\21\1\22\1\23\7\11\1\22\1\15\3\24"+
    "\1\25\1\5\1\7\1\24\1\26\1\24\1\27\14\24"+
    "\1\22\1\23\7\24\1\22\1\24\44\0\1\30\1\5"+
    "\1\7\6\0\1\10\30\0\1\5\35\0\2\12\1\31"+
    "\12\0\1\12\1\0\4\12\20\0\1\13\2\14\20\0"+
    "\1\32\10\0\1\32\4\0\3\14\41\0\7\33\2\0"+
    "\1\33\4\0\3\33\1\34\1\0\1\33\1\0\6\33"+
    "\1\0\1\35\1\36\5\0\1\35\1\0\1\37\1\35"+
    "\1\0\1\40\1\36\1\0\4\36\2\0\3\35\1\41"+
    "\1\35\1\0\1\35\1\0\2\35\30\0\1\23\14\0"+
    "\1\42\22\0\1\32\10\0\1\32\4\0\1\43\1\5"+
    "\1\7\6\0\1\10\27\0\1\44\64\0\1\34\12\0"+
    "\2\35\5\0\1\35\1\0\2\35\1\0\2\35\1\0"+
    "\4\35\2\0\5\35\1\45\1\35\1\0\2\35\2\0"+
    "\1\46\1\36\1\47\4\0\1\35\1\0\2\35\1\50"+
    "\1\35\1\36\1\0\4\36\1\0\1\51\3\35\1\52"+
    "\1\35\1\45\1\35\1\0\2\35\2\0\2\35\5\0"+
    "\1\35\1\0\1\35\1\53\1\0\1\35\1\54\1\55"+
    "\4\54\2\0\5\35\1\45\1\35\1\0\2\35\1\0"+
    "\1\56\2\40\5\56\1\40\1\56\2\40\1\56\1\57"+
    "\1\40\1\56\4\40\2\56\5\40\1\60\1\40\1\56"+
    "\2\40\1\56\1\0\1\35\1\61\5\0\1\35\1\0"+
    "\2\35\1\0\1\35\1\61\1\0\4\61\2\0\5\35"+
    "\1\45\1\35\1\0\2\35\4\0\1\62\1\5\1\7"+
    "\6\0\1\10\25\0\2\63\13\0\1\63\1\0\4\63"+
    "\16\0\2\46\1\47\4\0\1\35\1\0\2\35\1\50"+
    "\1\35\1\46\1\0\4\46\2\0\3\35\1\52\1\35"+
    "\1\45\1\35\1\0\2\35\3\0\1\64\1\47\7\0"+
    "\1\64\1\50\1\0\1\64\1\0\4\64\1\0\1\64"+
    "\3\0\1\65\7\0\3\66\2\0\4\66\1\0\2\66"+
    "\1\0\24\66\1\0\2\35\5\0\1\35\1\0\2\35"+
    "\1\50\2\35\1\0\4\35\2\0\5\35\1\45\1\35"+
    "\1\0\2\35\2\0\2\35\5\0\1\35\1\0\1\35"+
    "\1\67\1\0\2\35\1\0\4\35\2\0\5\35\1\45"+
    "\1\35\1\0\2\35\2\0\2\35\1\70\4\0\1\35"+
    "\1\0\2\35\1\0\1\35\1\54\1\0\4\54\2\0"+
    "\5\35\1\45\1\35\1\0\2\35\21\0\1\71\20\0"+
    "\15\56\1\72\24\56\2\40\5\56\1\40\1\56\2\40"+
    "\1\50\2\40\1\56\4\40\2\56\5\40\1\60\1\40"+
    "\1\56\2\40\2\56\2\73\12\56\1\72\1\73\1\56"+
    "\4\73\15\56\1\0\2\61\1\74\4\0\1\35\1\0"+
    "\2\35\1\50\1\35\1\61\1\0\4\61\2\0\5\35"+
    "\1\45\1\35\1\0\2\35\4\0\1\62\1\5\1\7"+
    "\34\0\2\75\10\0\1\76\1\77\1\0\1\75\1\0"+
    "\4\75\10\0\1\45\5\0\2\64\1\100\7\0\1\64"+
    "\1\50\1\0\1\64\1\0\4\64\1\0\2\64\1\0"+
    "\1\101\1\65\2\0\1\64\20\0\1\50\24\0\3\66"+
    "\2\0\4\66\1\0\2\66\1\102\24\66\1\103\2\104"+
    "\5\103\1\104\1\103\1\104\1\105\1\106\2\104\1\103"+
    "\4\104\2\103\5\104\1\107\1\104\1\103\2\104\1\103"+
    "\3\65\1\110\10\65\1\0\24\65\21\0\1\111\17\0"+
    "\14\56\1\50\25\56\2\112\10\56\1\113\1\114\1\72"+
    "\1\112\1\56\4\112\10\56\1\60\4\56\3\0\1\74"+
    "\10\0\1\50\25\0\2\115\10\0\1\116\1\77\1\0"+
    "\1\115\1\0\4\115\10\0\1\45\5\0\2\115\10\0"+
    "\1\116\2\0\1\115\1\0\4\115\17\0\1\64\1\100"+
    "\7\0\1\64\1\50\1\0\1\64\1\0\4\64\1\0"+
    "\1\64\2\0\1\101\1\65\7\0\3\117\1\101\2\0"+
    "\1\120\1\117\1\121\1\0\2\117\1\0\12\117\2\0"+
    "\10\117\13\103\1\122\26\103\2\104\5\103\1\104\1\103"+
    "\1\104\1\123\1\103\2\104\1\103\4\104\2\103\5\104"+
    "\1\107\1\104\1\103\2\104\2\103\2\104\5\103\1\104"+
    "\1\103\1\104\1\52\1\106\2\104\1\103\4\104\2\103"+
    "\5\104\1\107\1\104\1\103\2\104\2\103\2\124\10\103"+
    "\1\122\2\103\1\124\1\103\4\124\15\103\3\65\1\110"+
    "\10\65\1\50\24\65\22\0\1\125\16\0\1\56\2\126"+
    "\10\56\1\127\1\114\1\72\1\126\1\56\4\126\10\56"+
    "\1\60\5\56\2\126\10\56\1\127\1\56\1\72\1\126"+
    "\1\56\4\126\15\56\1\0\2\130\10\0\1\131\1\77"+
    "\1\0\1\130\1\0\4\130\10\0\1\45\5\0\2\130"+
    "\10\0\1\131\2\0\1\130\1\0\4\130\15\0\3\117"+
    "\1\47\3\0\1\117\2\0\2\117\1\50\12\117\2\0"+
    "\10\117\4\120\1\0\1\120\1\132\1\133\31\120\4\121"+
    "\1\0\2\121\1\134\1\132\30\121\13\103\1\65\26\103"+
    "\2\104\5\103\1\104\1\103\1\104\1\52\1\103\2\104"+
    "\1\103\4\104\2\103\5\104\1\107\1\104\1\103\2\104"+
    "\2\103\2\135\10\103\1\136\1\137\1\103\1\135\1\103"+
    "\4\135\10\103\1\107\4\103\23\0\1\140\15\0\1\56"+
    "\2\141\10\56\1\142\1\114\1\72\1\141\1\56\4\141"+
    "\10\56\1\60\5\56\2\141\10\56\1\142\1\56\1\72"+
    "\1\141\1\56\4\141\15\56\1\0\2\143\10\0\1\144"+
    "\1\77\1\0\1\143\1\0\4\143\10\0\1\45\5\0"+
    "\2\143\10\0\1\144\2\0\1\143\1\0\4\143\20\0"+
    "\1\47\10\0\1\50\14\0\1\65\7\0\4\120\1\0"+
    "\1\120\1\145\1\133\31\120\4\121\1\0\2\121\1\134"+
    "\1\146\30\121\1\103\2\147\10\103\1\150\1\137\1\103"+
    "\1\147\1\103\4\147\10\103\1\107\5\103\2\147\10\103"+
    "\1\151\2\103\1\147\1\103\4\147\15\103\22\0\1\152"+
    "\16\0\1\56\2\153\10\56\1\154\1\114\1\72\1\153"+
    "\1\56\4\153\10\56\1\60\5\56\2\153\10\56\1\154"+
    "\1\56\1\72\1\153\1\56\4\153\15\56\1\0\2\155"+
    "\10\0\1\156\1\77\1\0\1\155\1\0\4\155\10\0"+
    "\1\45\5\0\2\155\10\0\1\156\2\0\1\155\1\0"+
    "\4\155\15\0\3\120\1\157\1\0\1\120\1\132\1\133"+
    "\4\120\1\160\14\120\1\161\7\120\3\121\1\162\1\0"+
    "\2\121\1\134\1\132\3\121\1\163\14\121\1\164\7\121"+
    "\1\103\2\165\10\103\1\166\1\137\1\103\1\165\1\103"+
    "\4\165\10\103\1\107\5\103\2\165\10\103\1\167\2\103"+
    "\1\165\1\103\4\165\15\103\1\0\2\130\10\0\1\131"+
    "\1\50\1\0\1\130\1\0\4\130\34\0\1\170\21\0"+
    "\1\56\2\171\10\56\1\172\1\114\1\72\1\171\1\56"+
    "\4\171\10\56\1\60\5\56\2\171\10\56\1\172\1\56"+
    "\1\72\1\171\1\56\4\171\15\56\1\0\2\173\10\0"+
    "\1\174\1\77\1\0\1\173\1\0\4\173\10\0\1\45"+
    "\5\0\2\173\10\0\1\174\2\0\1\173\1\0\4\173"+
    "\15\0\2\120\1\175\1\157\1\0\1\120\1\132\1\133"+
    "\3\120\1\175\1\160\1\120\1\175\1\120\4\175\1\120"+
    "\1\175\3\120\1\161\13\120\1\0\1\120\1\132\1\133"+
    "\4\120\1\160\24\120\2\121\1\176\1\162\1\0\2\121"+
    "\1\134\1\132\2\121\1\176\1\163\1\121\1\176\1\121"+
    "\4\176\1\121\1\176\3\121\1\164\13\121\1\0\2\121"+
    "\1\134\1\132\3\121\1\163\24\121\1\103\2\177\10\103"+
    "\1\200\1\137\1\103\1\177\1\103\4\177\10\103\1\107"+
    "\5\103\2\177\10\103\1\201\2\103\1\177\1\103\4\177"+
    "\15\103\1\0\2\143\10\0\1\144\1\50\1\0\1\143"+
    "\1\0\4\143\15\0\24\170\1\202\14\170\1\56\2\203"+
    "\10\56\1\204\1\114\1\72\1\203\1\56\4\203\10\56"+
    "\1\60\5\56\2\203\10\56\1\204\1\56\1\72\1\203"+
    "\1\56\4\203\15\56\1\0\2\205\10\0\1\206\1\77"+
    "\1\0\1\205\1\0\4\205\10\0\1\45\5\0\2\205"+
    "\10\0\1\206\2\0\1\205\1\0\4\205\15\0\1\120"+
    "\2\175\1\207\1\0\1\120\1\132\1\133\3\120\1\175"+
    "\1\160\1\120\1\175\1\120\4\175\1\120\2\175\1\120"+
    "\1\210\1\161\2\120\1\175\4\120\1\121\2\176\1\211"+
    "\1\0\2\121\1\134\1\132\2\121\1\176\1\163\1\121"+
    "\1\176\1\121\4\176\1\121\2\176\1\121\1\212\1\164"+
    "\2\121\1\176\4\121\1\103\2\213\10\103\1\214\1\137"+
    "\1\103\1\213\1\103\4\213\10\103\1\107\5\103\2\213"+
    "\10\103\1\215\2\103\1\213\1\103\4\213\15\103\1\0"+
    "\2\155\10\0\1\156\1\50\1\0\1\155\1\0\4\155"+
    "\15\0\24\170\1\216\14\170\1\56\2\217\10\56\1\220"+
    "\1\114\1\72\1\217\1\56\4\217\10\56\1\60\5\56"+
    "\2\217\10\56\1\220\1\56\1\72\1\217\1\56\4\217"+
    "\15\56\1\0\2\221\10\0\1\222\1\77\1\0\1\221"+
    "\1\0\4\221\10\0\1\45\5\0\2\221\10\0\1\222"+
    "\2\0\1\221\1\0\4\221\15\0\2\120\1\175\1\207"+
    "\1\0\1\120\1\132\1\133\3\120\1\175\1\160\1\120"+
    "\1\175\1\120\4\175\1\120\1\175\2\120\1\210\1\161"+
    "\7\120\3\223\1\210\1\0\1\120\1\145\1\224\1\225"+
    "\1\120\2\223\1\120\12\223\2\120\10\223\2\121\1\176"+
    "\1\211\1\0\2\121\1\134\1\132\2\121\1\176\1\163"+
    "\1\121\1\176\1\121\4\176\1\121\1\176\2\121\1\212"+
    "\1\164\7\121\3\226\1\212\1\0\1\121\1\225\1\227"+
    "\1\146\1\121\2\226\1\121\12\226\2\121\10\226\1\103"+
    "\2\230\10\103\1\231\1\137\1\103\1\230\1\103\4\230"+
    "\10\103\1\107\5\103\2\230\10\103\1\232\2\103\1\230"+
    "\1\103\4\230\15\103\1\0\2\173\10\0\1\174\1\50"+
    "\1\0\1\173\1\0\4\173\15\0\14\170\1\50\24\170"+
    "\1\56\2\233\10\56\1\234\1\114\1\72\1\233\1\56"+
    "\4\233\10\56\1\60\5\56\2\233\10\56\1\234\1\56"+
    "\1\72\1\233\1\56\4\233\15\56\1\0\2\235\10\0"+
    "\1\236\1\77\1\0\1\235\1\0\4\235\10\0\1\45"+
    "\5\0\2\235\10\0\1\236\2\0\1\235\1\0\4\235"+
    "\15\0\3\223\1\157\1\0\1\120\1\132\1\224\2\120"+
    "\2\223\1\160\12\223\2\120\13\223\1\157\1\0\1\120"+
    "\1\145\1\224\2\120\2\223\1\160\12\223\2\120\10\223"+
    "\4\225\1\0\1\225\1\146\1\237\1\145\30\225\3\226"+
    "\1\162\1\0\2\121\1\227\1\132\1\121\2\226\1\163"+
    "\12\226\2\121\13\226\1\162\1\0\2\121\1\227\1\146"+
    "\1\121\2\226\1\163\12\226\2\121\10\226\1\103\2\240"+
    "\10\103\1\241\1\137\1\103\1\240\1\103\4\240\10\103"+
    "\1\107\5\103\2\240\10\103\1\242\2\103\1\240\1\103"+
    "\4\240\15\103\1\0\2\205\10\0\1\206\1\50\1\0"+
    "\1\205\1\0\4\205\15\0\1\56\2\243\10\56\1\244"+
    "\1\114\1\72\1\243\1\56\4\243\10\56\1\60\5\56"+
    "\2\243\10\56\1\244\1\56\1\72\1\243\1\56\4\243"+
    "\15\56\1\0\2\245\10\0\1\246\1\77\1\0\1\245"+
    "\1\0\4\245\10\0\1\45\5\0\2\245\10\0\1\246"+
    "\2\0\1\245\1\0\4\245\15\0\4\225\1\0\1\225"+
    "\1\247\1\237\1\247\30\225\1\103\2\250\10\103\1\251"+
    "\1\137\1\103\1\250\1\103\4\250\10\103\1\107\5\103"+
    "\2\250\10\103\1\252\2\103\1\250\1\103\4\250\15\103"+
    "\1\0\2\221\10\0\1\222\1\50\1\0\1\221\1\0"+
    "\4\221\15\0\1\56\2\253\10\56\1\254\1\114\1\72"+
    "\1\253\1\56\4\253\10\56\1\60\5\56\2\253\10\56"+
    "\1\254\1\56\1\72\1\253\1\56\4\253\15\56\1\0"+
    "\2\255\10\0\1\256\1\77\1\0\1\255\1\0\4\255"+
    "\10\0\1\45\5\0\2\255\10\0\1\256\2\0\1\255"+
    "\1\0\4\255\15\0\3\225\1\257\1\0\1\225\1\146"+
    "\1\237\1\145\3\225\1\260\14\225\1\261\7\225\1\103"+
    "\2\262\10\103\1\263\1\137\1\103\1\262\1\103\4\262"+
    "\10\103\1\107\5\103\2\262\10\103\1\264\2\103\1\262"+
    "\1\103\4\262\15\103\1\0\2\235\10\0\1\236\1\50"+
    "\1\0\1\235\1\0\4\235\15\0\1\56\2\265\10\56"+
    "\1\266\1\114\1\72\1\265\1\56\4\265\10\56\1\60"+
    "\5\56\2\265\10\56\1\266\1\56\1\72\1\265\1\56"+
    "\4\265\15\56\1\0\2\267\10\0\1\270\1\77\1\0"+
    "\1\267\1\0\4\267\10\0\1\45\5\0\2\267\10\0"+
    "\1\270\2\0\1\267\1\0\4\267\15\0\2\225\1\271"+
    "\1\257\1\0\1\225\1\146\1\237\1\145\2\225\1\271"+
    "\1\260\1\225\1\271\1\225\4\271\1\225\1\271\3\225"+
    "\1\261\13\225\1\0\1\225\1\146\1\237\1\145\3\225"+
    "\1\260\24\225\1\103\2\272\10\103\1\273\1\137\1\103"+
    "\1\272\1\103\4\272\10\103\1\107\5\103\2\272\10\103"+
    "\1\274\2\103\1\272\1\103\4\272\15\103\1\0\2\245"+
    "\10\0\1\246\1\50\1\0\1\245\1\0\4\245\15\0"+
    "\1\56\2\275\10\56\1\276\1\114\1\72\1\275\1\56"+
    "\4\275\10\56\1\60\5\56\2\275\10\56\1\276\1\56"+
    "\1\72\1\275\1\56\4\275\15\56\1\0\2\277\10\0"+
    "\1\300\1\77\1\0\1\277\1\0\4\277\10\0\1\45"+
    "\5\0\2\277\10\0\1\300\2\0\1\277\1\0\4\277"+
    "\15\0\1\225\2\271\1\301\1\0\1\225\1\146\1\237"+
    "\1\145\2\225\1\271\1\260\1\225\1\271\1\225\4\271"+
    "\1\225\2\271\1\225\1\302\1\261\2\225\1\271\4\225"+
    "\1\103\2\303\10\103\1\304\1\137\1\103\1\303\1\103"+
    "\4\303\10\103\1\107\5\103\2\303\10\103\1\305\2\103"+
    "\1\303\1\103\4\303\15\103\1\0\2\255\10\0\1\256"+
    "\1\50\1\0\1\255\1\0\4\255\15\0\1\56\2\306"+
    "\10\56\1\307\1\114\1\72\1\306\1\56\4\306\10\56"+
    "\1\60\5\56\2\306\10\56\1\307\1\56\1\72\1\306"+
    "\1\56\4\306\15\56\1\0\2\310\10\0\1\311\1\77"+
    "\1\0\1\310\1\0\4\310\10\0\1\45\5\0\2\310"+
    "\10\0\1\311\2\0\1\310\1\0\4\310\15\0\2\225"+
    "\1\271\1\301\1\0\1\225\1\146\1\237\1\145\2\225"+
    "\1\271\1\260\1\225\1\271\1\225\4\271\1\225\1\271"+
    "\2\225\1\302\1\261\7\225\3\312\1\302\1\0\1\225"+
    "\1\247\1\313\1\247\1\225\2\312\1\225\12\312\2\225"+
    "\10\312\1\103\2\314\10\103\1\315\1\137\1\103\1\314"+
    "\1\103\4\314\10\103\1\107\5\103\2\314\10\103\1\316"+
    "\2\103\1\314\1\103\4\314\15\103\1\0\2\267\10\0"+
    "\1\270\1\50\1\0\1\267\1\0\4\267\15\0\1\56"+
    "\2\317\10\56\1\320\1\114\1\72\1\317\1\56\4\317"+
    "\10\56\1\60\5\56\2\317\10\56\1\320\1\56\1\72"+
    "\1\317\1\56\4\317\15\56\1\0\2\321\10\0\1\322"+
    "\1\77\1\0\1\321\1\0\4\321\10\0\1\45\5\0"+
    "\2\321\10\0\1\322\2\0\1\321\1\0\4\321\15\0"+
    "\3\312\1\257\1\0\1\225\1\146\1\313\1\145\1\225"+
    "\2\312\1\260\12\312\2\225\13\312\1\257\1\0\1\225"+
    "\1\247\1\313\1\247\1\225\2\312\1\260\12\312\2\225"+
    "\10\312\1\103\2\323\10\103\1\324\1\137\1\103\1\323"+
    "\1\103\4\323\10\103\1\107\5\103\2\323\10\103\1\325"+
    "\2\103\1\323\1\103\4\323\15\103\1\0\2\277\10\0"+
    "\1\300\1\50\1\0\1\277\1\0\4\277\15\0\1\56"+
    "\2\326\10\56\1\327\1\114\1\72\1\326\1\56\4\326"+
    "\10\56\1\60\5\56\2\326\10\56\1\327\1\56\1\72"+
    "\1\326\1\56\4\326\15\56\1\0\2\330\10\0\1\331"+
    "\1\77\1\0\1\330\1\0\4\330\10\0\1\45\5\0"+
    "\2\330\10\0\1\331\2\0\1\330\1\0\4\330\15\0"+
    "\1\103\2\332\10\103\1\333\1\137\1\103\1\332\1\103"+
    "\4\332\10\103\1\107\5\103\2\332\10\103\1\334\2\103"+
    "\1\332\1\103\4\332\15\103\1\0\2\310\10\0\1\311"+
    "\1\50\1\0\1\310\1\0\4\310\15\0\1\56\2\335"+
    "\10\56\1\336\1\114\1\72\1\335\1\56\4\335\10\56"+
    "\1\60\5\56\2\335\10\56\1\336\1\56\1\72\1\335"+
    "\1\56\4\335\15\56\1\0\2\337\10\0\1\340\1\77"+
    "\1\0\1\337\1\0\4\337\10\0\1\45\5\0\2\337"+
    "\10\0\1\340\2\0\1\337\1\0\4\337\15\0\1\103"+
    "\2\341\10\103\1\342\1\137\1\103\1\341\1\103\4\341"+
    "\10\103\1\107\5\103\2\341\10\103\1\343\2\103\1\341"+
    "\1\103\4\341\15\103\1\0\2\321\10\0\1\322\1\50"+
    "\1\0\1\321\1\0\4\321\15\0\1\56\2\344\10\56"+
    "\1\345\1\114\1\72\1\344\1\56\4\344\10\56\1\60"+
    "\5\56\2\344\10\56\1\345\1\56\1\72\1\344\1\56"+
    "\4\344\15\56\1\0\2\346\10\0\1\347\1\77\1\0"+
    "\1\346\1\0\4\346\10\0\1\45\5\0\2\346\10\0"+
    "\1\347\2\0\1\346\1\0\4\346\15\0\1\103\2\350"+
    "\10\103\1\351\1\137\1\103\1\350\1\103\4\350\10\103"+
    "\1\107\5\103\2\350\10\103\1\352\2\103\1\350\1\103"+
    "\4\350\15\103\1\0\2\330\10\0\1\331\1\50\1\0"+
    "\1\330\1\0\4\330\15\0\1\56\2\353\10\56\1\354"+
    "\1\114\1\72\1\353\1\56\4\353\10\56\1\60\5\56"+
    "\2\353\10\56\1\354\1\56\1\72\1\353\1\56\4\353"+
    "\15\56\1\0\2\355\10\0\1\356\1\77\1\0\1\355"+
    "\1\0\4\355\10\0\1\45\5\0\2\355\10\0\1\356"+
    "\2\0\1\355\1\0\4\355\15\0\1\103\2\357\10\103"+
    "\1\360\1\137\1\103\1\357\1\103\4\357\10\103\1\107"+
    "\5\103\2\357\10\103\1\361\2\103\1\357\1\103\4\357"+
    "\15\103\1\0\2\337\10\0\1\340\1\50\1\0\1\337"+
    "\1\0\4\337\15\0\1\56\2\362\10\56\1\363\1\114"+
    "\1\72\1\362\1\56\4\362\10\56\1\60\5\56\2\362"+
    "\10\56\1\363\1\56\1\72\1\362\1\56\4\362\15\56"+
    "\1\0\2\364\10\0\1\365\1\77\1\0\1\364\1\0"+
    "\4\364\10\0\1\45\5\0\2\364\10\0\1\365\2\0"+
    "\1\364\1\0\4\364\15\0\1\103\2\366\10\103\1\367"+
    "\1\137\1\103\1\366\1\103\4\366\10\103\1\107\5\103"+
    "\2\366\10\103\1\370\2\103\1\366\1\103\4\366\15\103"+
    "\1\0\2\346\10\0\1\347\1\50\1\0\1\346\1\0"+
    "\4\346\15\0\1\56\2\371\10\56\1\372\1\114\1\72"+
    "\1\371\1\56\4\371\10\56\1\60\5\56\2\371\10\56"+
    "\1\372\1\56\1\72\1\371\1\56\4\371\15\56\1\0"+
    "\2\373\10\0\1\374\1\77\1\0\1\373\1\0\4\373"+
    "\10\0\1\45\5\0\2\373\10\0\1\374\2\0\1\373"+
    "\1\0\4\373\15\0\1\103\2\375\10\103\1\376\1\137"+
    "\1\103\1\375\1\103\4\375\10\103\1\107\5\103\2\375"+
    "\10\103\1\377\2\103\1\375\1\103\4\375\15\103\1\0"+
    "\2\355\10\0\1\356\1\50\1\0\1\355\1\0\4\355"+
    "\15\0\1\56\2\u0100\10\56\1\u0101\1\114\1\72\1\u0100"+
    "\1\56\4\u0100\10\56\1\60\5\56\2\u0100\10\56\1\u0101"+
    "\1\56\1\72\1\u0100\1\56\4\u0100\15\56\1\0\2\u0102"+
    "\10\0\1\u0103\1\77\1\0\1\u0102\1\0\4\u0102\10\0"+
    "\1\45\5\0\2\u0102\10\0\1\u0103\2\0\1\u0102\1\0"+
    "\4\u0102\15\0\1\103\2\u0104\10\103\1\u0105\1\137\1\103"+
    "\1\u0104\1\103\4\u0104\10\103\1\107\5\103\2\u0104\10\103"+
    "\1\u0106\2\103\1\u0104\1\103\4\u0104\15\103\1\0\2\364"+
    "\10\0\1\365\1\50\1\0\1\364\1\0\4\364\15\0"+
    "\1\56\2\u0107\10\56\1\u0108\1\114\1\72\1\u0107\1\56"+
    "\4\u0107\10\56\1\60\5\56\2\u0107\10\56\1\u0108\1\56"+
    "\1\72\1\u0107\1\56\4\u0107\15\56\1\0\2\u0109\10\0"+
    "\1\u010a\1\77\1\0\1\u0109\1\0\4\u0109\10\0\1\45"+
    "\5\0\2\u0109\10\0\1\u010a\2\0\1\u0109\1\0\4\u0109"+
    "\15\0\1\103\2\u010b\10\103\1\u010c\1\137\1\103\1\u010b"+
    "\1\103\4\u010b\10\103\1\107\5\103\2\u010b\10\103\1\u010d"+
    "\2\103\1\u010b\1\103\4\u010b\15\103\1\0\2\373\10\0"+
    "\1\374\1\50\1\0\1\373\1\0\4\373\15\0\1\56"+
    "\2\u010e\10\56\1\u010f\1\114\1\72\1\u010e\1\56\4\u010e"+
    "\10\56\1\60\5\56\2\u010e\10\56\1\u010f\1\56\1\72"+
    "\1\u010e\1\56\4\u010e\15\56\1\0\2\u0110\10\0\1\u0111"+
    "\1\77\1\0\1\u0110\1\0\4\u0110\10\0\1\45\5\0"+
    "\2\u0110\10\0\1\u0111\2\0\1\u0110\1\0\4\u0110\15\0"+
    "\1\103\2\u0112\10\103\1\u0113\1\137\1\103\1\u0112\1\103"+
    "\4\u0112\10\103\1\107\5\103\2\u0112\10\103\1\u0114\2\103"+
    "\1\u0112\1\103\4\u0112\15\103\1\0\2\u0102\10\0\1\u0103"+
    "\1\50\1\0\1\u0102\1\0\4\u0102\15\0\1\56\2\u0115"+
    "\10\56\1\u0116\1\114\1\72\1\u0115\1\56\4\u0115\10\56"+
    "\1\60\5\56\2\u0115\10\56\1\u0116\1\56\1\72\1\u0115"+
    "\1\56\4\u0115\15\56\1\0\2\u0117\10\0\1\u0118\1\77"+
    "\1\0\1\u0117\1\0\4\u0117\10\0\1\45\5\0\2\u0117"+
    "\10\0\1\u0118\2\0\1\u0117\1\0\4\u0117\15\0\1\103"+
    "\2\u0119\10\103\1\u011a\1\137\1\103\1\u0119\1\103\4\u0119"+
    "\10\103\1\107\5\103\2\u0119\10\103\1\u011b\2\103\1\u0119"+
    "\1\103\4\u0119\15\103\1\0\2\u0109\10\0\1\u010a\1\50"+
    "\1\0\1\u0109\1\0\4\u0109\15\0\1\56\2\u011c\10\56"+
    "\1\u011d\1\114\1\72\1\u011c\1\56\4\u011c\10\56\1\60"+
    "\5\56\2\u011c\10\56\1\u011d\1\56\1\72\1\u011c\1\56"+
    "\4\u011c\15\56\1\0\2\u011e\10\0\1\u011f\1\77\1\0"+
    "\1\u011e\1\0\4\u011e\10\0\1\45\5\0\2\u011e\10\0"+
    "\1\u011f\2\0\1\u011e\1\0\4\u011e\15\0\1\103\2\u0120"+
    "\10\103\1\u0121\1\137\1\103\1\u0120\1\103\4\u0120\10\103"+
    "\1\107\5\103\2\u0120\10\103\1\u0122\2\103\1\u0120\1\103"+
    "\4\u0120\15\103\1\0\2\u0110\10\0\1\u0111\1\50\1\0"+
    "\1\u0110\1\0\4\u0110\15\0\1\56\2\u0123\10\56\1\u0124"+
    "\1\114\1\72\1\u0123\1\56\4\u0123\10\56\1\60\5\56"+
    "\2\u0123\10\56\1\u0124\1\56\1\72\1\u0123\1\56\4\u0123"+
    "\15\56\1\0\2\u0125\10\0\1\u0126\1\77\1\0\1\u0125"+
    "\1\0\4\u0125\10\0\1\45\5\0\2\u0125\10\0\1\u0126"+
    "\2\0\1\u0125\1\0\4\u0125\15\0\1\103\2\u0127\10\103"+
    "\1\u0128\1\137\1\103\1\u0127\1\103\4\u0127\10\103\1\107"+
    "\5\103\2\u0127\10\103\1\u0129\2\103\1\u0127\1\103\4\u0127"+
    "\15\103\1\0\2\u0117\10\0\1\u0118\1\50\1\0\1\u0117"+
    "\1\0\4\u0117\15\0\1\56\2\u012a\10\56\1\u012b\1\114"+
    "\1\72\1\u012a\1\56\4\u012a\10\56\1\60\5\56\2\u012a"+
    "\10\56\1\u012b\1\56\1\72\1\u012a\1\56\4\u012a\15\56"+
    "\1\0\2\u012c\10\0\1\u012d\1\77\1\0\1\u012c\1\0"+
    "\4\u012c\10\0\1\45\5\0\2\u012c\10\0\1\u012d\2\0"+
    "\1\u012c\1\0\4\u012c\15\0\1\103\2\u012e\10\103\1\u012f"+
    "\1\137\1\103\1\u012e\1\103\4\u012e\10\103\1\107\5\103"+
    "\2\u012e\10\103\1\u0130\2\103\1\u012e\1\103\4\u012e\15\103"+
    "\1\0\2\u011e\10\0\1\u011f\1\50\1\0\1\u011e\1\0"+
    "\4\u011e\15\0\1\56\2\u0131\10\56\1\u0132\1\114\1\72"+
    "\1\u0131\1\56\4\u0131\10\56\1\60\5\56\2\u0131\10\56"+
    "\1\u0132\1\56\1\72\1\u0131\1\56\4\u0131\15\56\1\0"+
    "\2\u0133\10\0\1\u0134\1\77\1\0\1\u0133\1\0\4\u0133"+
    "\10\0\1\45\5\0\2\u0133\10\0\1\u0134\2\0\1\u0133"+
    "\1\0\4\u0133\15\0\1\103\2\u0135\10\103\1\u0136\1\137"+
    "\1\103\1\u0135\1\103\4\u0135\10\103\1\107\5\103\2\u0135"+
    "\10\103\1\u0137\2\103\1\u0135\1\103\4\u0135\15\103\1\0"+
    "\2\u0125\10\0\1\u0126\1\50\1\0\1\u0125\1\0\4\u0125"+
    "\15\0\1\56\2\u0138\10\56\1\u0139\1\114\1\72\1\u0138"+
    "\1\56\4\u0138\10\56\1\60\5\56\2\u0138\10\56\1\u0139"+
    "\1\56\1\72\1\u0138\1\56\4\u0138\15\56\1\0\2\u013a"+
    "\10\0\1\u013b\1\77\1\0\1\u013a\1\0\4\u013a\10\0"+
    "\1\45\5\0\2\u013a\10\0\1\u013b\2\0\1\u013a\1\0"+
    "\4\u013a\15\0\1\103\2\u013c\10\103\1\u013d\1\137\1\103"+
    "\1\u013c\1\103\4\u013c\10\103\1\107\5\103\2\u013c\10\103"+
    "\1\u013e\2\103\1\u013c\1\103\4\u013c\15\103\1\0\2\u012c"+
    "\10\0\1\u012d\1\50\1\0\1\u012c\1\0\4\u012c\15\0"+
    "\1\56\2\u013f\10\56\1\u0140\1\114\1\72\1\u013f\1\56"+
    "\4\u013f\10\56\1\60\5\56\2\u013f\10\56\1\u0140\1\56"+
    "\1\72\1\u013f\1\56\4\u013f\15\56\1\0\2\u0141\10\0"+
    "\1\u0142\1\77\1\0\1\u0141\1\0\4\u0141\10\0\1\45"+
    "\5\0\2\u0141\10\0\1\u0142\2\0\1\u0141\1\0\4\u0141"+
    "\15\0\1\103\2\u0143\10\103\1\u0144\1\137\1\103\1\u0143"+
    "\1\103\4\u0143\10\103\1\107\5\103\2\u0143\10\103\1\u0145"+
    "\2\103\1\u0143\1\103\4\u0143\15\103\1\0\2\u0133\10\0"+
    "\1\u0134\1\50\1\0\1\u0133\1\0\4\u0133\15\0\1\56"+
    "\2\u0146\10\56\1\u0147\1\114\1\72\1\u0146\1\56\4\u0146"+
    "\10\56\1\60\5\56\2\u0146\10\56\1\u0147\1\56\1\72"+
    "\1\u0146\1\56\4\u0146\15\56\1\0\2\u0148\10\0\1\u0149"+
    "\1\77\1\0\1\u0148\1\0\4\u0148\10\0\1\45\5\0"+
    "\2\u0148\10\0\1\u0149\2\0\1\u0148\1\0\4\u0148\15\0"+
    "\1\103\2\u014a\10\103\1\u014b\1\137\1\103\1\u014a\1\103"+
    "\4\u014a\10\103\1\107\5\103\2\u014a\10\103\1\u014c\2\103"+
    "\1\u014a\1\103\4\u014a\15\103\1\0\2\u013a\10\0\1\u013b"+
    "\1\50\1\0\1\u013a\1\0\4\u013a\15\0\1\56\2\u014d"+
    "\10\56\1\u014e\1\114\1\72\1\u014d\1\56\4\u014d\10\56"+
    "\1\60\5\56\2\u014d\10\56\1\u014e\1\56\1\72\1\u014d"+
    "\1\56\4\u014d\15\56\1\0\2\u014f\10\0\1\u0150\1\77"+
    "\1\0\1\u014f\1\0\4\u014f\10\0\1\45\5\0\2\u014f"+
    "\10\0\1\u0150\2\0\1\u014f\1\0\4\u014f\15\0\1\103"+
    "\2\u0151\10\103\1\u0152\1\137\1\103\1\u0151\1\103\4\u0151"+
    "\10\103\1\107\5\103\2\u0151\10\103\1\u0153\2\103\1\u0151"+
    "\1\103\4\u0151\15\103\1\0\2\u0141\10\0\1\u0142\1\50"+
    "\1\0\1\u0141\1\0\4\u0141\15\0\1\56\2\u0154\10\56"+
    "\1\u0155\1\114\1\72\1\u0154\1\56\4\u0154\10\56\1\60"+
    "\5\56\2\u0154\10\56\1\u0155\1\56\1\72\1\u0154\1\56"+
    "\4\u0154\15\56\1\0\2\u0156\10\0\1\u0157\1\77\1\0"+
    "\1\u0156\1\0\4\u0156\10\0\1\45\5\0\2\u0156\10\0"+
    "\1\u0157\2\0\1\u0156\1\0\4\u0156\15\0\1\103\2\u0158"+
    "\10\103\1\u0159\1\137\1\103\1\u0158\1\103\4\u0158\10\103"+
    "\1\107\5\103\2\u0158\10\103\1\u015a\2\103\1\u0158\1\103"+
    "\4\u0158\15\103\1\0\2\u0148\10\0\1\u0149\1\50\1\0"+
    "\1\u0148\1\0\4\u0148\15\0\1\56\2\u015b\10\56\1\u015c"+
    "\1\114\1\72\1\u015b\1\56\4\u015b\10\56\1\60\5\56"+
    "\2\u015b\10\56\1\u015c\1\56\1\72\1\u015b\1\56\4\u015b"+
    "\15\56\1\0\2\u015d\10\0\1\u015e\1\77\1\0\1\u015d"+
    "\1\0\4\u015d\10\0\1\45\5\0\2\u015d\10\0\1\u015e"+
    "\2\0\1\u015d\1\0\4\u015d\15\0\1\103\2\u015f\10\103"+
    "\1\u0160\1\137\1\103\1\u015f\1\103\4\u015f\10\103\1\107"+
    "\5\103\2\u015f\10\103\1\u0161\2\103\1\u015f\1\103\4\u015f"+
    "\15\103\1\0\2\u014f\10\0\1\u0150\1\50\1\0\1\u014f"+
    "\1\0\4\u014f\15\0\1\56\2\u0162\10\56\1\u0163\1\114"+
    "\1\72\1\u0162\1\56\4\u0162\10\56\1\60\5\56\2\u0162"+
    "\10\56\1\u0163\1\56\1\72\1\u0162\1\56\4\u0162\15\56"+
    "\1\0\2\u0164\10\0\1\u0165\1\77\1\0\1\u0164\1\0"+
    "\4\u0164\10\0\1\45\5\0\2\u0164\10\0\1\u0165\2\0"+
    "\1\u0164\1\0\4\u0164\15\0\1\103\2\u0166\10\103\1\u0167"+
    "\1\137\1\103\1\u0166\1\103\4\u0166\10\103\1\107\5\103"+
    "\2\u0166\10\103\1\u0168\2\103\1\u0166\1\103\4\u0166\15\103"+
    "\1\0\2\u0156\10\0\1\u0157\1\50\1\0\1\u0156\1\0"+
    "\4\u0156\15\0\1\56\2\u0169\10\56\1\u016a\1\114\1\72"+
    "\1\u0169\1\56\4\u0169\10\56\1\60\5\56\2\u0169\10\56"+
    "\1\u016a\1\56\1\72\1\u0169\1\56\4\u0169\15\56\1\0"+
    "\2\u016b\10\0\1\u016c\1\77\1\0\1\u016b\1\0\4\u016b"+
    "\10\0\1\45\5\0\2\u016b\10\0\1\u016c\2\0\1\u016b"+
    "\1\0\4\u016b\15\0\1\103\2\u016d\10\103\1\u016e\1\137"+
    "\1\103\1\u016d\1\103\4\u016d\10\103\1\107\5\103\2\u016d"+
    "\10\103\1\u016f\2\103\1\u016d\1\103\4\u016d\15\103\1\0"+
    "\2\u015d\10\0\1\u015e\1\50\1\0\1\u015d\1\0\4\u015d"+
    "\15\0\1\56\2\u0170\10\56\1\u0171\1\114\1\72\1\u0170"+
    "\1\56\4\u0170\10\56\1\60\5\56\2\u0170\10\56\1\u0171"+
    "\1\56\1\72\1\u0170\1\56\4\u0170\15\56\1\0\2\u0172"+
    "\10\0\1\u0173\1\77\1\0\1\u0172\1\0\4\u0172\10\0"+
    "\1\45\5\0\2\u0172\10\0\1\u0173\2\0\1\u0172\1\0"+
    "\4\u0172\15\0\1\103\2\u0174\10\103\1\u0175\1\137\1\103"+
    "\1\u0174\1\103\4\u0174\10\103\1\107\5\103\2\u0174\10\103"+
    "\1\u0176\2\103\1\u0174\1\103\4\u0174\15\103\1\0\2\u0164"+
    "\10\0\1\u0165\1\50\1\0\1\u0164\1\0\4\u0164\15\0"+
    "\1\56\2\u0177\10\56\1\u0178\1\114\1\72\1\u0177\1\56"+
    "\4\u0177\10\56\1\60\5\56\2\u0177\10\56\1\u0178\1\56"+
    "\1\72\1\u0177\1\56\4\u0177\15\56\1\0\2\u0179\10\0"+
    "\1\u017a\1\77\1\0\1\u0179\1\0\4\u0179\10\0\1\45"+
    "\5\0\2\u0179\10\0\1\u017a\2\0\1\u0179\1\0\4\u0179"+
    "\15\0\1\103\2\u017b\10\103\1\u017c\1\137\1\103\1\u017b"+
    "\1\103\4\u017b\10\103\1\107\5\103\2\u017b\10\103\1\u017d"+
    "\2\103\1\u017b\1\103\4\u017b\15\103\1\0\2\u016b\10\0"+
    "\1\u016c\1\50\1\0\1\u016b\1\0\4\u016b\15\0\1\56"+
    "\2\u017e\10\56\1\u017f\1\114\1\72\1\u017e\1\56\4\u017e"+
    "\10\56\1\60\5\56\2\u017e\10\56\1\u017f\1\56\1\72"+
    "\1\u017e\1\56\4\u017e\15\56\1\0\2\u0180\10\0\1\u0181"+
    "\1\77\1\0\1\u0180\1\0\4\u0180\10\0\1\45\5\0"+
    "\2\u0180\10\0\1\u0181\2\0\1\u0180\1\0\4\u0180\15\0"+
    "\1\103\2\u0182\10\103\1\u0183\1\137\1\103\1\u0182\1\103"+
    "\4\u0182\10\103\1\107\5\103\2\u0182\10\103\1\u0184\2\103"+
    "\1\u0182\1\103\4\u0182\15\103\1\0\2\u0172\10\0\1\u0173"+
    "\1\50\1\0\1\u0172\1\0\4\u0172\15\0\1\56\2\u0185"+
    "\10\56\1\u0186\1\114\1\72\1\u0185\1\56\4\u0185\10\56"+
    "\1\60\5\56\2\u0185\10\56\1\u0186\1\56\1\72\1\u0185"+
    "\1\56\4\u0185\15\56\1\0\2\u0187\10\0\1\u0188\1\77"+
    "\1\0\1\u0187\1\0\4\u0187\10\0\1\45\5\0\2\u0187"+
    "\10\0\1\u0188\2\0\1\u0187\1\0\4\u0187\15\0\1\103"+
    "\2\u0189\10\103\1\u018a\1\137\1\103\1\u0189\1\103\4\u0189"+
    "\10\103\1\107\5\103\2\u0189\10\103\1\u018b\2\103\1\u0189"+
    "\1\103\4\u0189\15\103\1\0\2\u0179\10\0\1\u017a\1\50"+
    "\1\0\1\u0179\1\0\4\u0179\15\0\1\56\2\u018c\10\56"+
    "\1\u018d\1\114\1\72\1\u018c\1\56\4\u018c\10\56\1\60"+
    "\5\56\2\u018c\10\56\1\u018d\1\56\1\72\1\u018c\1\56"+
    "\4\u018c\15\56\1\0\2\u018e\10\0\1\u018f\1\77\1\0"+
    "\1\u018e\1\0\4\u018e\10\0\1\45\5\0\2\u018e\10\0"+
    "\1\u018f\2\0\1\u018e\1\0\4\u018e\15\0\1\103\2\u0190"+
    "\10\103\1\u0191\1\137\1\103\1\u0190\1\103\4\u0190\10\103"+
    "\1\107\5\103\2\u0190\10\103\1\u0192\2\103\1\u0190\1\103"+
    "\4\u0190\15\103\1\0\2\u0180\10\0\1\u0181\1\50\1\0"+
    "\1\u0180\1\0\4\u0180\15\0\1\56\2\u0193\10\56\1\u0194"+
    "\1\114\1\72\1\u0193\1\56\4\u0193\10\56\1\60\5\56"+
    "\2\u0193\10\56\1\u0194\1\56\1\72\1\u0193\1\56\4\u0193"+
    "\15\56\1\0\2\u0195\10\0\1\u0196\1\77\1\0\1\u0195"+
    "\1\0\4\u0195\10\0\1\45\5\0\2\u0195\10\0\1\u0196"+
    "\2\0\1\u0195\1\0\4\u0195\15\0\1\103\2\u0197\10\103"+
    "\1\u0198\1\137\1\103\1\u0197\1\103\4\u0197\10\103\1\107"+
    "\5\103\2\u0197\10\103\1\u0199\2\103\1\u0197\1\103\4\u0197"+
    "\15\103\1\0\2\u0187\10\0\1\u0188\1\50\1\0\1\u0187"+
    "\1\0\4\u0187\15\0\1\56\2\u019a\10\56\1\u019b\1\114"+
    "\1\72\1\u019a\1\56\4\u019a\10\56\1\60\5\56\2\u019a"+
    "\10\56\1\u019b\1\56\1\72\1\u019a\1\56\4\u019a\15\56"+
    "\1\0\2\u019c\10\0\1\u019d\1\77\1\0\1\u019c\1\0"+
    "\4\u019c\10\0\1\45\5\0\2\u019c\10\0\1\u019d\2\0"+
    "\1\u019c\1\0\4\u019c\15\0\1\103\2\u019e\10\103\1\u019f"+
    "\1\137\1\103\1\u019e\1\103\4\u019e\10\103\1\107\5\103"+
    "\2\u019e\10\103\1\u01a0\2\103\1\u019e\1\103\4\u019e\15\103"+
    "\1\0\2\u018e\10\0\1\u018f\1\50\1\0\1\u018e\1\0"+
    "\4\u018e\15\0\1\56\2\u01a1\10\56\1\u01a2\1\114\1\72"+
    "\1\u01a1\1\56\4\u01a1\10\56\1\60\5\56\2\u01a1\10\56"+
    "\1\u01a2\1\56\1\72\1\u01a1\1\56\4\u01a1\15\56\1\0"+
    "\2\u01a3\10\0\1\u01a4\1\77\1\0\1\u01a3\1\0\4\u01a3"+
    "\10\0\1\45\5\0\2\u01a3\10\0\1\u01a4\2\0\1\u01a3"+
    "\1\0\4\u01a3\15\0\1\103\2\u01a5\10\103\1\u01a6\1\137"+
    "\1\103\1\u01a5\1\103\4\u01a5\10\103\1\107\5\103\2\u01a5"+
    "\10\103\1\u01a7\2\103\1\u01a5\1\103\4\u01a5\15\103\1\0"+
    "\2\u0195\10\0\1\u0196\1\50\1\0\1\u0195\1\0\4\u0195"+
    "\15\0\1\56\2\u01a8\10\56\1\u01a9\1\114\1\72\1\u01a8"+
    "\1\56\4\u01a8\10\56\1\60\5\56\2\u01a8\10\56\1\u01a9"+
    "\1\56\1\72\1\u01a8\1\56\4\u01a8\15\56\1\0\2\u01aa"+
    "\10\0\1\u01ab\1\77\1\0\1\u01aa\1\0\4\u01aa\10\0"+
    "\1\45\5\0\2\u01aa\10\0\1\u01ab\2\0\1\u01aa\1\0"+
    "\4\u01aa\15\0\1\103\2\u01ac\10\103\1\u01ad\1\137\1\103"+
    "\1\u01ac\1\103\4\u01ac\10\103\1\107\5\103\2\u01ac\10\103"+
    "\1\u01ae\2\103\1\u01ac\1\103\4\u01ac\15\103\1\0\2\u019c"+
    "\10\0\1\u019d\1\50\1\0\1\u019c\1\0\4\u019c\15\0"+
    "\1\56\2\u01af\10\56\1\u01b0\1\114\1\72\1\u01af\1\56"+
    "\4\u01af\10\56\1\60\5\56\2\u01af\10\56\1\u01b0\1\56"+
    "\1\72\1\u01af\1\56\4\u01af\15\56\1\0\2\u01b1\10\0"+
    "\1\u01b2\1\77\1\0\1\u01b1\1\0\4\u01b1\10\0\1\45"+
    "\5\0\2\u01b1\10\0\1\u01b2\2\0\1\u01b1\1\0\4\u01b1"+
    "\15\0\1\103\2\u01b3\10\103\1\u01b4\1\137\1\103\1\u01b3"+
    "\1\103\4\u01b3\10\103\1\107\5\103\2\u01b3\10\103\1\u01b5"+
    "\2\103\1\u01b3\1\103\4\u01b3\15\103\1\0\2\u01a3\10\0"+
    "\1\u01a4\1\50\1\0\1\u01a3\1\0\4\u01a3\15\0\1\56"+
    "\2\u01b6\10\56\1\u01b7\1\114\1\72\1\u01b6\1\56\4\u01b6"+
    "\10\56\1\60\5\56\2\u01b6\10\56\1\u01b7\1\56\1\72"+
    "\1\u01b6\1\56\4\u01b6\15\56\1\0\2\u01b8\10\0\1\u01b9"+
    "\1\77\1\0\1\u01b8\1\0\4\u01b8\10\0\1\45\5\0"+
    "\2\u01b8\10\0\1\u01b9\2\0\1\u01b8\1\0\4\u01b8\15\0"+
    "\1\103\2\u01ba\10\103\1\u01bb\1\137\1\103\1\u01ba\1\103"+
    "\4\u01ba\10\103\1\107\5\103\2\u01ba\10\103\1\u01bc\2\103"+
    "\1\u01ba\1\103\4\u01ba\15\103\1\0\2\u01aa\10\0\1\u01ab"+
    "\1\50\1\0\1\u01aa\1\0\4\u01aa\15\0\1\56\2\u01bd"+
    "\10\56\1\u01be\1\114\1\72\1\u01bd\1\56\4\u01bd\10\56"+
    "\1\60\5\56\2\u01bd\10\56\1\u01be\1\56\1\72\1\u01bd"+
    "\1\56\4\u01bd\15\56\1\0\2\u01bf\10\0\1\u01c0\1\77"+
    "\1\0\1\u01bf\1\0\4\u01bf\10\0\1\45\5\0\2\u01bf"+
    "\10\0\1\u01c0\2\0\1\u01bf\1\0\4\u01bf\15\0\1\103"+
    "\2\u01c1\10\103\1\u01c2\1\137\1\103\1\u01c1\1\103\4\u01c1"+
    "\10\103\1\107\5\103\2\u01c1\10\103\1\u01c3\2\103\1\u01c1"+
    "\1\103\4\u01c1\15\103\1\0\2\u01b1\10\0\1\u01b2\1\50"+
    "\1\0\1\u01b1\1\0\4\u01b1\15\0\1\56\2\u01c4\10\56"+
    "\1\u01c5\1\114\1\72\1\u01c4\1\56\4\u01c4\10\56\1\60"+
    "\5\56\2\u01c4\10\56\1\u01c5\1\56\1\72\1\u01c4\1\56"+
    "\4\u01c4\15\56\1\0\2\u01c6\10\0\1\u01c7\1\77\1\0"+
    "\1\u01c6\1\0\4\u01c6\10\0\1\45\5\0\2\u01c6\10\0"+
    "\1\u01c7\2\0\1\u01c6\1\0\4\u01c6\15\0\1\103\2\u01c8"+
    "\10\103\1\u01c9\1\137\1\103\1\u01c8\1\103\4\u01c8\10\103"+
    "\1\107\5\103\2\u01c8\10\103\1\u01ca\2\103\1\u01c8\1\103"+
    "\4\u01c8\15\103\1\0\2\u01b8\10\0\1\u01b9\1\50\1\0"+
    "\1\u01b8\1\0\4\u01b8\15\0\1\56\2\u01cb\10\56\1\u01cc"+
    "\1\114\1\72\1\u01cb\1\56\4\u01cb\10\56\1\60\5\56"+
    "\2\u01cb\10\56\1\u01cc\1\56\1\72\1\u01cb\1\56\4\u01cb"+
    "\15\56\1\0\2\u01cd\10\0\1\u01ce\1\77\1\0\1\u01cd"+
    "\1\0\4\u01cd\10\0\1\45\5\0\2\u01cd\10\0\1\u01ce"+
    "\2\0\1\u01cd\1\0\4\u01cd\15\0\1\103\2\u01cf\10\103"+
    "\1\u01d0\1\137\1\103\1\u01cf\1\103\4\u01cf\10\103\1\107"+
    "\5\103\2\u01cf\10\103\1\u01d1\2\103\1\u01cf\1\103\4\u01cf"+
    "\15\103\1\0\2\u01bf\10\0\1\u01c0\1\50\1\0\1\u01bf"+
    "\1\0\4\u01bf\15\0\1\56\2\u01d2\10\56\1\u01d3\1\114"+
    "\1\72\1\u01d2\1\56\4\u01d2\10\56\1\60\5\56\2\u01d2"+
    "\10\56\1\u01d3\1\56\1\72\1\u01d2\1\56\4\u01d2\15\56"+
    "\1\0\2\u01d4\10\0\1\u01d5\1\77\1\0\1\u01d4\1\0"+
    "\4\u01d4\10\0\1\45\5\0\2\u01d4\10\0\1\u01d5\2\0"+
    "\1\u01d4\1\0\4\u01d4\15\0\1\103\2\u01d6\10\103\1\u01d7"+
    "\1\137\1\103\1\u01d6\1\103\4\u01d6\10\103\1\107\5\103"+
    "\2\u01d6\10\103\1\u01d8\2\103\1\u01d6\1\103\4\u01d6\15\103"+
    "\1\0\2\u01c6\10\0\1\u01c7\1\50\1\0\1\u01c6\1\0"+
    "\4\u01c6\15\0\1\56\2\u01d9\10\56\1\u01da\1\114\1\72"+
    "\1\u01d9\1\56\4\u01d9\10\56\1\60\5\56\2\u01d9\10\56"+
    "\1\u01da\1\56\1\72\1\u01d9\1\56\4\u01d9\15\56\1\0"+
    "\2\u01db\10\0\1\u01dc\1\77\1\0\1\u01db\1\0\4\u01db"+
    "\10\0\1\45\5\0\2\u01db\10\0\1\u01dc\2\0\1\u01db"+
    "\1\0\4\u01db\15\0\1\103\2\u01dd\10\103\1\u01de\1\137"+
    "\1\103\1\u01dd\1\103\4\u01dd\10\103\1\107\5\103\2\u01dd"+
    "\10\103\1\u01df\2\103\1\u01dd\1\103\4\u01dd\15\103\1\0"+
    "\2\u01cd\10\0\1\u01ce\1\50\1\0\1\u01cd\1\0\4\u01cd"+
    "\15\0\1\56\2\u01e0\10\56\1\u01e1\1\114\1\72\1\u01e0"+
    "\1\56\4\u01e0\10\56\1\60\5\56\2\u01e0\10\56\1\u01e1"+
    "\1\56\1\72\1\u01e0\1\56\4\u01e0\15\56\1\0\2\u01e2"+
    "\10\0\1\u01e3\1\77\1\0\1\u01e2\1\0\4\u01e2\10\0"+
    "\1\45\5\0\2\u01e2\10\0\1\u01e3\2\0\1\u01e2\1\0"+
    "\4\u01e2\15\0\1\103\2\u01e4\10\103\1\u01e5\1\137\1\103"+
    "\1\u01e4\1\103\4\u01e4\10\103\1\107\5\103\2\u01e4\10\103"+
    "\1\u01e6\2\103\1\u01e4\1\103\4\u01e4\15\103\1\0\2\u01d4"+
    "\10\0\1\u01d5\1\50\1\0\1\u01d4\1\0\4\u01d4\15\0"+
    "\1\56\2\u01e7\10\56\1\u01e8\1\114\1\72\1\u01e7\1\56"+
    "\4\u01e7\10\56\1\60\5\56\2\u01e7\10\56\1\u01e8\1\56"+
    "\1\72\1\u01e7\1\56\4\u01e7\15\56\1\0\2\u01e9\10\0"+
    "\1\u01ea\1\77\1\0\1\u01e9\1\0\4\u01e9\10\0\1\45"+
    "\5\0\2\u01e9\10\0\1\u01ea\2\0\1\u01e9\1\0\4\u01e9"+
    "\15\0\1\103\2\u01eb\10\103\1\u01ec\1\137\1\103\1\u01eb"+
    "\1\103\4\u01eb\10\103\1\107\5\103\2\u01eb\10\103\1\u01ed"+
    "\2\103\1\u01eb\1\103\4\u01eb\15\103\1\0\2\u01db\10\0"+
    "\1\u01dc\1\50\1\0\1\u01db\1\0\4\u01db\15\0\1\56"+
    "\2\u01ee\10\56\1\u01ef\1\114\1\72\1\u01ee\1\56\4\u01ee"+
    "\10\56\1\60\5\56\2\u01ee\10\56\1\u01ef\1\56\1\72"+
    "\1\u01ee\1\56\4\u01ee\15\56\1\0\2\u01f0\10\0\1\u01f1"+
    "\1\77\1\0\1\u01f0\1\0\4\u01f0\10\0\1\45\5\0"+
    "\2\u01f0\10\0\1\u01f1\2\0\1\u01f0\1\0\4\u01f0\15\0"+
    "\1\103\2\u01f2\10\103\1\u01f3\1\137\1\103\1\u01f2\1\103"+
    "\4\u01f2\10\103\1\107\5\103\2\u01f2\10\103\1\u01f4\2\103"+
    "\1\u01f2\1\103\4\u01f2\15\103\1\0\2\u01e2\10\0\1\u01e3"+
    "\1\50\1\0\1\u01e2\1\0\4\u01e2\15\0\1\56\2\u01f5"+
    "\10\56\1\u01f6\1\114\1\72\1\u01f5\1\56\4\u01f5\10\56"+
    "\1\60\5\56\2\u01f5\10\56\1\u01f6\1\56\1\72\1\u01f5"+
    "\1\56\4\u01f5\15\56\1\0\2\u01f7\10\0\1\u01f8\1\77"+
    "\1\0\1\u01f7\1\0\4\u01f7\10\0\1\45\5\0\2\u01f7"+
    "\10\0\1\u01f8\2\0\1\u01f7\1\0\4\u01f7\15\0\1\103"+
    "\2\u01f9\10\103\1\u01fa\1\137\1\103\1\u01f9\1\103\4\u01f9"+
    "\10\103\1\107\5\103\2\u01f9\10\103\1\u01fb\2\103\1\u01f9"+
    "\1\103\4\u01f9\15\103\1\0\2\u01e9\10\0\1\u01ea\1\50"+
    "\1\0\1\u01e9\1\0\4\u01e9\15\0\1\56\2\u01fc\10\56"+
    "\1\u01fd\1\114\1\72\1\u01fc\1\56\4\u01fc\10\56\1\60"+
    "\5\56\2\u01fc\10\56\1\u01fd\1\56\1\72\1\u01fc\1\56"+
    "\4\u01fc\15\56\1\0\2\u01fe\10\0\1\u01ff\1\77\1\0"+
    "\1\u01fe\1\0\4\u01fe\10\0\1\45\5\0\2\u01fe\10\0"+
    "\1\u01ff\2\0\1\u01fe\1\0\4\u01fe\15\0\1\103\2\u0200"+
    "\10\103\1\u0201\1\137\1\103\1\u0200\1\103\4\u0200\10\103"+
    "\1\107\5\103\2\u0200\10\103\1\u0202\2\103\1\u0200\1\103"+
    "\4\u0200\15\103\1\0\2\u01f0\10\0\1\u01f1\1\50\1\0"+
    "\1\u01f0\1\0\4\u01f0\15\0\1\56\2\u0203\10\56\1\u0204"+
    "\1\114\1\72\1\u0203\1\56\4\u0203\10\56\1\60\5\56"+
    "\2\u0203\10\56\1\u0204\1\56\1\72\1\u0203\1\56\4\u0203"+
    "\15\56\1\0\2\u0205\10\0\1\u0206\1\77\1\0\1\u0205"+
    "\1\0\4\u0205\10\0\1\45\5\0\2\u0205\10\0\1\u0206"+
    "\2\0\1\u0205\1\0\4\u0205\15\0\1\103\2\u0207\10\103"+
    "\1\u0208\1\137\1\103\1\u0207\1\103\4\u0207\10\103\1\107"+
    "\5\103\2\u0207\10\103\1\u0209\2\103\1\u0207\1\103\4\u0207"+
    "\15\103\1\0\2\u01f7\10\0\1\u01f8\1\50\1\0\1\u01f7"+
    "\1\0\4\u01f7\15\0\1\56\2\u020a\10\56\1\u020b\1\114"+
    "\1\72\1\u020a\1\56\4\u020a\10\56\1\60\5\56\2\u020a"+
    "\10\56\1\u020b\1\56\1\72\1\u020a\1\56\4\u020a\15\56"+
    "\1\0\2\u020c\10\0\1\u020d\1\77\1\0\1\u020c\1\0"+
    "\4\u020c\10\0\1\45\5\0\2\u020c\10\0\1\u020d\2\0"+
    "\1\u020c\1\0\4\u020c\15\0\1\103\2\u020e\10\103\1\u020f"+
    "\1\137\1\103\1\u020e\1\103\4\u020e\10\103\1\107\5\103"+
    "\2\u020e\10\103\1\u0210\2\103\1\u020e\1\103\4\u020e\15\103"+
    "\1\0\2\u01fe\10\0\1\u01ff\1\50\1\0\1\u01fe\1\0"+
    "\4\u01fe\15\0\1\56\2\u0211\10\56\1\u0212\1\114\1\72"+
    "\1\u0211\1\56\4\u0211\10\56\1\60\5\56\2\u0211\10\56"+
    "\1\u0212\1\56\1\72\1\u0211\1\56\4\u0211\15\56\1\0"+
    "\2\u0213\10\0\1\u0214\1\77\1\0\1\u0213\1\0\4\u0213"+
    "\10\0\1\45\5\0\2\u0213\10\0\1\u0214\2\0\1\u0213"+
    "\1\0\4\u0213\15\0\1\103\2\u0215\10\103\1\u0216\1\137"+
    "\1\103\1\u0215\1\103\4\u0215\10\103\1\107\5\103\2\u0215"+
    "\10\103\1\u0217\2\103\1\u0215\1\103\4\u0215\15\103\1\0"+
    "\2\u0205\10\0\1\u0206\1\50\1\0\1\u0205\1\0\4\u0205"+
    "\15\0\1\56\2\u0218\10\56\1\u0219\1\114\1\72\1\u0218"+
    "\1\56\4\u0218\10\56\1\60\5\56\2\u0218\10\56\1\u0219"+
    "\1\56\1\72\1\u0218\1\56\4\u0218\15\56\1\0\2\u021a"+
    "\11\0\1\77\1\0\1\u021a\1\0\4\u021a\10\0\1\45"+
    "\5\0\2\u021a\13\0\1\u021a\1\0\4\u021a\15\0\1\103"+
    "\2\u021b\10\103\1\u021c\1\137\1\103\1\u021b\1\103\4\u021b"+
    "\10\103\1\107\5\103\2\u021b\10\103\1\u021d\2\103\1\u021b"+
    "\1\103\4\u021b\15\103\1\0\2\u020c\10\0\1\u020d\1\50"+
    "\1\0\1\u020c\1\0\4\u020c\15\0\1\56\2\u021e\11\56"+
    "\1\114\1\72\1\u021e\1\56\4\u021e\10\56\1\60\5\56"+
    "\2\u021e\12\56\1\72\1\u021e\1\56\4\u021e\15\56\14\0"+
    "\1\77\17\0\1\45\4\0\1\103\2\u021f\10\103\1\u0220"+
    "\1\137\1\103\1\u021f\1\103\4\u021f\10\103\1\107\5\103"+
    "\2\u021f\10\103\1\u0221\2\103\1\u021f\1\103\4\u021f\15\103"+
    "\1\0\2\u0213\10\0\1\u0214\1\50\1\0\1\u0213\1\0"+
    "\4\u0213\15\0\14\56\1\114\1\72\16\56\1\60\4\56"+
    "\1\103\2\u0222\10\103\1\122\1\137\1\103\1\u0222\1\103"+
    "\4\u0222\10\103\1\107\5\103\2\u0222\10\103\1\65\2\103"+
    "\1\u0222\1\103\4\u0222\15\103\1\0\2\u021a\11\0\1\50"+
    "\1\0\1\u021a\1\0\4\u021a\15\0\13\103\1\122\1\137"+
    "\17\103\1\107\4\103";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17292];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\2\1\2\11\3\1\1\11\2\1\3\11"+
    "\1\1\1\11\3\1\3\0\1\11\1\1\7\0\1\1"+
    "\3\0\1\11\26\0\1\11\2\0\1\11\3\0\1\1"+
    "\5\0\1\1\22\0\1\1\20\0\1\1\2\0\1\1"+
    "\74\0\1\1\u0172\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[546];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  private static class Token implements MarkdownTokenTypes {}

  private Stack<Integer> stateStack = new Stack<Integer>();

  private boolean isHeader = false;

  private ParseDelimited parseDelimited = new ParseDelimited();

  private static class ParseDelimited {
    char exitChar = 0;
    IElementType returnType = null;
    boolean inlinesAllowed = true;
  }

  private static class LinkDef {
    boolean wasUrl;
    boolean wasParen;
  }

  private static class HtmlHelper {
    private static final String BLOCK_TAGS_STRING =
            "article, header, aside, hgroup, blockquote, hr, iframe, body, li, map, button, " +
            "object, canvas, ol, caption, output, col, p, colgroup, pre, dd, progress, div, " +
            "section, dl, table, td, dt, tbody, embed, textarea, fieldset, tfoot, figcaption, " +
            "th, figure, thead, footer, footer, tr, form, ul, h1, h2, h3, h4, h5, h6, video, " +
            "script, style";

    static final Set<String> BLOCK_TAGS = getBlockTagsSet();

    private static Set<String> getBlockTagsSet() {
      Set<String> result = new HashSet<String>();
      String[] tags = BLOCK_TAGS_STRING.split(", ");
      for (String tag : tags) {
        result.add(tag);
      }
      return result;
    }
  }

  private static IElementType getDelimiterTokenType(char c) {
    switch (c) {
      case '"': return Token.DOUBLE_QUOTE;
      case '\'': return Token.SINGLE_QUOTE;
      case '(': return Token.LPAREN;
      case ')': return Token.RPAREN;
      case '[': return Token.LBRACKET;
      case ']': return Token.RBRACKET;
      case '<': return Token.LT;
      case '>': return Token.GT;
      default: return Token.BAD_CHARACTER;
    }
  }

  private IElementType parseDelimited(IElementType contentsType, boolean allowInlines) {
    char first = yycharat(0);
    char last = yycharat(yylength() - 1);

    stateStack.push(yystate());

    parseDelimited.exitChar = last;
    parseDelimited.returnType = contentsType;
//    parseDelimited.inlinesAllowed = allowInlines;
    parseDelimited.inlinesAllowed = true;

    yybegin(PARSE_DELIMITED);

    yypushback(yylength() - 1);
    return getDelimiterTokenType(first);
  }

  private void processEol() {
    int newlinePos = 1;
    while (newlinePos < yylength() && yycharat(newlinePos) != '\n') {
      newlinePos++;
    }

    // there is always one at 0 so that means there are two at least
    if (newlinePos != yylength()) {
      yypushback(yylength() - newlinePos);
      return;
    }

    yybegin(YYINITIAL);
    yypushback(yylength() - 1);

    isHeader = false;
  }

  private void popState() {
    if (stateStack.isEmpty()) {
      yybegin(AFTER_LINE_START);
    }
    else {
      yybegin(stateStack.pop());
    }
  }

  private void resetState() {
    yypushback(yylength());

    popState();
  }

  private String getTagName() {
    if (yylength() > 1 && yycharat(1) == '/') {
      return yytext().toString().substring(2, yylength() - 1).trim();
    }
    return yytext().toString().substring(1);
  }

  private boolean isBlockTag(String tagName) {
    return HtmlHelper.BLOCK_TAGS.contains(tagName.toLowerCase());
  }

  private boolean canInline() {
    return yystate() == AFTER_LINE_START || yystate() == PARSE_DELIMITED && parseDelimited.inlinesAllowed;
  }

  private IElementType getReturnGeneralized(IElementType defaultType) {
    if (canInline()) {
      return defaultType;
    }
    return parseDelimited.returnType;
  }

  private int countChars(CharSequence s, char c) {
    int result = 0;
    for (int i = 0; i < s.length(); ++i) {
      if (s.charAt(i) == c)
        result++;
    }
    return result;
  }



  public _MarkdownLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _MarkdownLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 92) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 15: 
          { return parseDelimited(Token.EMAIL_AUTOLINK, false);
          }
        case 17: break;
        case 8: 
          { return Token.COLON;
          }
        case 18: break;
        case 10: 
          { if (canInline()) {
      return Token.BACKTICK;
    }
    return parseDelimited.returnType;
          }
        case 19: break;
        case 4: 
          { return Token.WHITE_SPACE;
          }
        case 20: break;
        case 16: 
          { return parseDelimited(Token.AUTOLINK, false);
          }
        case 21: break;
        case 7: 
          { return Token.EXCLAMATION_MARK;
          }
        case 22: break;
        case 13: 
          { return getReturnGeneralized(Token.ESCAPED_BACKTICKS);
          }
        case 23: break;
        case 12: 
          { return getReturnGeneralized(Token.TEXT);
          }
        case 24: break;
        case 11: 
          { if (yycharat(0) == parseDelimited.exitChar) {
      yybegin(stateStack.pop());
      return getDelimiterTokenType(yycharat(0));
    }
    return parseDelimited.returnType;
          }
        case 25: break;
        case 6: 
          { return getDelimiterTokenType(yycharat(0));
          }
        case 26: break;
        case 2: 
          { return Token.BLOCK_QUOTE;
          }
        case 27: break;
        case 9: 
          { return getReturnGeneralized(Token.EMPH);
          }
        case 28: break;
        case 14: 
          { return Token.HTML_TAG;
          }
        case 29: break;
        case 1: 
          { resetState();
          }
        case 30: break;
        case 3: 
          { return Token.TEXT;
          }
        case 31: break;
        case 5: 
          { int lastSpaces = yytext().toString().indexOf("\n");
    if (lastSpaces >= 2) {
      yypushback(yylength() - lastSpaces);
      return Token.HARD_LINE_BREAK;
    }
    else if (lastSpaces > 0) {
      yypushback(yylength() - lastSpaces);
      return Token.WHITE_SPACE;
    }

    processEol();
    return Token.EOL;
          }
        case 32: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
