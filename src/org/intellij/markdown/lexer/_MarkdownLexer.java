/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package org.intellij.markdown.lexer;

import org.intellij.markdown.MarkdownTokenTypes;
import org.intellij.markdown.IElementType;
import org.intellij.markdown.lexer.GeneratedLexer;

import java.util.HashSet;
import java.util.Set;
import java.util.Stack;

/* Auto generated File */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>markdown.flex</tt>
 */
public class _MarkdownLexer implements GeneratedLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TAG_START = 2;
  public static final int AFTER_LINE_START = 4;
  public static final int PARSE_DELIMITED = 6;
  public static final int CODE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\6\1\4\1\5\1\7\22\0\1\3\1\14\1\10\4\40\1\12\2\42\1\41\1\40\1\37"+
    "\1\15\1\36\1\33\12\1\1\27\1\0\1\13\1\32\1\16\1\17\1\35\1\24\1\20\1\22\1\23"+
    "\17\20\1\25\6\20\1\21\1\11\1\26\1\34\1\30\1\31\32\2\1\40\1\34\2\40\6\0\1\4"+
    "\242\0\2\4\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\3\1\1\2\2\3\1\4\1\5\1\6\1\3"+
    "\1\6\1\7\1\10\1\11\1\12\2\13\1\1\2\13"+
    "\1\0\1\1\2\0\2\14\1\15\1\16\7\0\1\1"+
    "\1\15\3\0\1\17\12\0\1\1\14\0\1\20\2\0"+
    "\1\21\3\0\1\17\5\0\1\20\22\0\1\20\20\0"+
    "\1\17\2\0\1\17\74\0\1\17\u0172\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[552];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\214\0\257\0\322\0\214"+
    "\0\214\0\365\0\u0118\0\u013b\0\214\0\u015e\0\u0181\0\214"+
    "\0\214\0\214\0\u01a4\0\214\0\u01c7\0\u01c7\0\u01ea\0\u0181"+
    "\0\u020d\0\u020d\0\365\0\u0230\0\214\0\u0253\0\214\0\u0276"+
    "\0\u0299\0\u02bc\0\u02df\0\u0302\0\u0325\0\u01c7\0\u0348\0\u0348"+
    "\0\u0230\0\u036b\0\u038e\0\u03b1\0\214\0\u03d4\0\u03f7\0\u041a"+
    "\0\u043d\0\u0460\0\u0483\0\u04a6\0\u04c9\0\u04ec\0\u050f\0\u050f"+
    "\0\u0532\0\u0555\0\u0578\0\u059b\0\u05be\0\u05e1\0\u0604\0\u0627"+
    "\0\u064a\0\u066d\0\u0690\0\u06b3\0\214\0\u06d6\0\u06f9\0\214"+
    "\0\u071c\0\u073f\0\u0762\0\u071c\0\u0785\0\u07a8\0\u07cb\0\u07ee"+
    "\0\u0811\0\u0483\0\u0834\0\u0857\0\u087a\0\u089d\0\u08c0\0\u08e3"+
    "\0\u0906\0\u0929\0\u094c\0\u096f\0\u0992\0\u09b5\0\u09d8\0\u09fb"+
    "\0\u0a1e\0\u0a41\0\u0a64\0\u0a87\0\u071c\0\u0aaa\0\u0acd\0\u0af0"+
    "\0\u0b13\0\u0b36\0\u0b59\0\u0b7c\0\u0b9f\0\u0bc2\0\u0be5\0\u0c08"+
    "\0\u0c2b\0\u0c4e\0\u0c71\0\u0c94\0\u0cb7\0\u089d\0\u0cda\0\u0cfd"+
    "\0\u08c0\0\u0d20\0\u0d43\0\u0d66\0\u0d89\0\u0dac\0\u0dcf\0\u0df2"+
    "\0\u0e15\0\u0e38\0\u0e5b\0\u0e7e\0\u0ea1\0\u0ec4\0\u0ee7\0\u0f0a"+
    "\0\u0f2d\0\u0f50\0\u0f73\0\u0f96\0\u0fb9\0\u0fdc\0\u0fff\0\u1022"+
    "\0\u1045\0\u1068\0\u108b\0\u10ae\0\u10d1\0\u10f4\0\u1117\0\u113a"+
    "\0\u115d\0\u1180\0\u11a3\0\u11c6\0\u11e9\0\u120c\0\u122f\0\u1252"+
    "\0\u1275\0\u1298\0\u12bb\0\u12de\0\u1301\0\u1324\0\u1347\0\u136a"+
    "\0\u138d\0\u13b0\0\u13d3\0\u13f6\0\u1419\0\u143c\0\u145f\0\u1482"+
    "\0\u14a5\0\u14c8\0\u14eb\0\u150e\0\u1531\0\u11a3\0\u1554\0\u1577"+
    "\0\u159a\0\u15bd\0\u15e0\0\u1603\0\u1626\0\u1649\0\u166c\0\u168f"+
    "\0\u16b2\0\u16d5\0\u16f8\0\u171b\0\u173e\0\u1761\0\u1784\0\u17a7"+
    "\0\u17ca\0\u17ed\0\u1810\0\u1833\0\u1856\0\u1879\0\u189c\0\u18bf"+
    "\0\u18e2\0\u1905\0\u1928\0\u194b\0\u196e\0\u1991\0\u19b4\0\u19d7"+
    "\0\u19fa\0\u1a1d\0\u1a40\0\u1a63\0\u1a86\0\u1aa9\0\u1acc\0\u1aef"+
    "\0\u1b12\0\u1b35\0\u1b58\0\u1b7b\0\u1b9e\0\u1bc1\0\u1be4\0\u1c07"+
    "\0\u1c2a\0\u1c4d\0\u1c70\0\u1c93\0\u1cb6\0\u1cd9\0\u1cfc\0\u1d1f"+
    "\0\u1d42\0\u1d65\0\u1d88\0\u1dab\0\u1dce\0\u1df1\0\u1e14\0\u1e37"+
    "\0\u1e5a\0\u1e7d\0\u1ea0\0\u1ec3\0\u1ee6\0\u1f09\0\u1f2c\0\u1f4f"+
    "\0\u1f72\0\u1f95\0\u1fb8\0\u1fdb\0\u1ffe\0\u2021\0\u2044\0\u2067"+
    "\0\u208a\0\u20ad\0\u20d0\0\u20f3\0\u2116\0\u2139\0\u215c\0\u217f"+
    "\0\u21a2\0\u21c5\0\u21e8\0\u220b\0\u222e\0\u2251\0\u2274\0\u2297"+
    "\0\u22ba\0\u22dd\0\u2300\0\u2323\0\u2346\0\u2369\0\u238c\0\u23af"+
    "\0\u23d2\0\u23f5\0\u2418\0\u243b\0\u245e\0\u2481\0\u24a4\0\u24c7"+
    "\0\u24ea\0\u250d\0\u2530\0\u2553\0\u2576\0\u2599\0\u25bc\0\u25df"+
    "\0\u2602\0\u2625\0\u2648\0\u266b\0\u268e\0\u26b1\0\u26d4\0\u26f7"+
    "\0\u271a\0\u273d\0\u2760\0\u2783\0\u27a6\0\u27c9\0\u27ec\0\u280f"+
    "\0\u2832\0\u2855\0\u2878\0\u289b\0\u28be\0\u28e1\0\u2904\0\u2927"+
    "\0\u294a\0\u296d\0\u2990\0\u29b3\0\u29d6\0\u29f9\0\u2a1c\0\u2a3f"+
    "\0\u2a62\0\u2a85\0\u2aa8\0\u2acb\0\u2aee\0\u2b11\0\u2b34\0\u2b57"+
    "\0\u2b7a\0\u2b9d\0\u2bc0\0\u2be3\0\u2c06\0\u2c29\0\u2c4c\0\u2c6f"+
    "\0\u2c92\0\u2cb5\0\u2cd8\0\u2cfb\0\u2d1e\0\u2d41\0\u2d64\0\u2d87"+
    "\0\u2daa\0\u2dcd\0\u2df0\0\u2e13\0\u2e36\0\u2e59\0\u2e7c\0\u2e9f"+
    "\0\u2ec2\0\u2ee5\0\u2f08\0\u2f2b\0\u2f4e\0\u2f71\0\u2f94\0\u2fb7"+
    "\0\u2fda\0\u2ffd\0\u3020\0\u3043\0\u3066\0\u3089\0\u30ac\0\u30cf"+
    "\0\u30f2\0\u3115\0\u3138\0\u315b\0\u317e\0\u31a1\0\u31c4\0\u31e7"+
    "\0\u320a\0\u322d\0\u3250\0\u3273\0\u3296\0\u32b9\0\u32dc\0\u32ff"+
    "\0\u3322\0\u3345\0\u3368\0\u338b\0\u33ae\0\u33d1\0\u33f4\0\u3417"+
    "\0\u343a\0\u345d\0\u3480\0\u34a3\0\u34c6\0\u34e9\0\u350c\0\u352f"+
    "\0\u3552\0\u3575\0\u3598\0\u35bb\0\u35de\0\u3601\0\u3624\0\u3647"+
    "\0\u366a\0\u368d\0\u36b0\0\u36d3\0\u36f6\0\u3719\0\u373c\0\u375f"+
    "\0\u3782\0\u37a5\0\u37c8\0\u37eb\0\u380e\0\u3831\0\u3854\0\u3877"+
    "\0\u389a\0\u38bd\0\u38e0\0\u3903\0\u3926\0\u3949\0\u396c\0\u398f"+
    "\0\u39b2\0\u39d5\0\u39f8\0\u3a1b\0\u3a3e\0\u3a61\0\u3a84\0\u3aa7"+
    "\0\u3aca\0\u3aed\0\u3b10\0\u3b33\0\u3b56\0\u3b79\0\u3b9c\0\u3bbf"+
    "\0\u3be2\0\u3c05\0\u3c28\0\u3c4b\0\u3c6e\0\u3c91\0\u3cb4\0\u3cd7"+
    "\0\u3cfa\0\u3d1d\0\u3d40\0\u3d63\0\u3d86\0\u3da9\0\u3dcc\0\u3def"+
    "\0\u3e12\0\u3e35\0\u3e58\0\u3e7b\0\u3e9e\0\u3ec1\0\u3ee4\0\u3f07"+
    "\0\u3f2a\0\u3f4d\0\u3f70\0\u3f93\0\u3fb6\0\u3fd9\0\u3ffc\0\u401f"+
    "\0\u4042\0\u4065\0\u4088\0\u40ab\0\u40ce\0\u40f1\0\u4114\0\u4137"+
    "\0\u415a\0\u417d\0\u41a0\0\u41c3\0\u41e6\0\u4209\0\u422c\0\u424f"+
    "\0\u4272\0\u4295\0\u42b8\0\u42db\0\u42fe\0\u4321\0\u4344\0\u4367"+
    "\0\u438a\0\u43ad\0\u43d0\0\u43f3\0\u4416\0\u4439\0\u445c\0\u447f"+
    "\0\u44a2\0\u44c5\0\u44e8\0\u450b\0\u452e\0\u4551\0\u4574\0\u4597"+
    "\0\u45ba\0\u45dd\0\u4600\0\u4623\0\u4646\0\u4669\0\u468c\0\u46af"+
    "\0\u46d2\0\u46f5\0\u4718\0\u473b\0\u475e\0\u4781\0\u47a4\0\u47c7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[552];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\5\1\6\1\5\1\6\1\5\1\7\6\5\1\10"+
    "\24\5\44\11\2\12\1\13\1\14\1\13\2\14\1\15"+
    "\1\16\1\15\1\17\1\20\1\11\1\15\1\11\1\12"+
    "\1\15\4\12\1\15\1\21\1\22\1\23\7\11\1\22"+
    "\1\15\3\24\1\25\1\5\1\26\1\5\1\7\1\24"+
    "\1\27\1\24\1\30\14\24\1\22\1\23\7\24\1\22"+
    "\1\24\46\0\1\31\1\5\1\32\1\5\1\7\6\0"+
    "\1\10\32\0\1\5\35\0\2\12\1\33\1\0\1\33"+
    "\12\0\1\12\1\0\4\12\20\0\1\13\1\14\1\13"+
    "\2\14\20\0\1\34\10\0\1\34\4\0\5\14\37\0"+
    "\3\35\1\36\7\37\2\0\1\37\4\0\3\37\1\40"+
    "\1\0\1\37\1\0\6\37\1\0\1\41\1\42\7\0"+
    "\1\41\1\0\1\43\1\41\1\0\1\44\1\42\1\0"+
    "\4\42\2\0\3\41\1\45\1\41\1\0\1\41\1\0"+
    "\2\41\32\0\1\23\14\0\1\46\1\0\1\46\22\0"+
    "\1\34\10\0\1\34\11\0\7\37\2\0\1\37\4\0"+
    "\3\37\1\40\1\0\1\37\1\0\6\37\3\0\1\47"+
    "\1\5\1\50\1\5\1\7\6\0\1\10\27\0\1\51"+
    "\1\0\1\51\43\0\1\35\65\0\1\40\12\0\2\41"+
    "\7\0\1\41\1\0\2\41\1\0\2\41\1\0\4\41"+
    "\2\0\5\41\1\52\1\41\1\0\2\41\2\0\1\53"+
    "\1\42\1\54\1\0\1\54\4\0\1\41\1\0\2\41"+
    "\1\55\1\41\1\42\1\0\4\42\1\0\1\56\3\41"+
    "\1\57\1\41\1\52\1\41\1\0\2\41\2\0\2\41"+
    "\7\0\1\41\1\0\1\41\1\60\1\0\1\41\1\61"+
    "\1\62\4\61\2\0\5\41\1\52\1\41\1\0\2\41"+
    "\1\0\1\63\2\44\7\63\1\44\1\63\2\44\1\63"+
    "\1\64\1\44\1\63\4\44\2\63\5\44\1\65\1\44"+
    "\1\63\2\44\1\63\1\0\1\41\1\66\7\0\1\41"+
    "\1\0\2\41\1\0\1\41\1\66\1\0\4\66\2\0"+
    "\5\41\1\52\1\41\1\0\2\41\4\0\1\67\1\5"+
    "\1\70\1\5\1\7\6\0\1\10\25\0\2\71\15\0"+
    "\1\71\1\0\4\71\16\0\2\53\1\54\1\0\1\54"+
    "\4\0\1\41\1\0\2\41\1\55\1\41\1\53\1\0"+
    "\4\53\2\0\3\41\1\57\1\41\1\52\1\41\1\0"+
    "\2\41\3\0\1\72\1\54\1\0\1\54\7\0\1\72"+
    "\1\55\1\0\1\72\1\0\4\72\1\0\1\72\3\0"+
    "\1\73\7\0\3\74\1\0\1\74\2\0\4\74\1\0"+
    "\2\74\1\0\24\74\1\0\2\41\7\0\1\41\1\0"+
    "\2\41\1\55\2\41\1\0\4\41\2\0\5\41\1\52"+
    "\1\41\1\0\2\41\2\0\2\41\7\0\1\41\1\0"+
    "\1\41\1\75\1\0\2\41\1\0\4\41\2\0\5\41"+
    "\1\52\1\41\1\0\2\41\2\0\2\41\1\76\1\0"+
    "\1\76\4\0\1\41\1\0\2\41\1\0\1\41\1\61"+
    "\1\0\4\61\2\0\5\41\1\52\1\41\1\0\2\41"+
    "\23\0\1\77\20\0\17\63\1\100\24\63\2\44\7\63"+
    "\1\44\1\63\2\44\1\55\2\44\1\63\4\44\2\63"+
    "\5\44\1\65\1\44\1\63\2\44\2\63\2\101\14\63"+
    "\1\100\1\101\1\63\4\101\15\63\1\0\2\66\1\102"+
    "\1\0\1\102\4\0\1\41\1\0\2\41\1\55\1\41"+
    "\1\66\1\0\4\66\2\0\5\41\1\52\1\41\1\0"+
    "\2\41\4\0\1\67\1\5\1\70\1\5\1\7\34\0"+
    "\2\103\12\0\1\104\1\105\1\0\1\103\1\0\4\103"+
    "\10\0\1\52\5\0\2\72\1\106\1\0\1\106\7\0"+
    "\1\72\1\55\1\0\1\72\1\0\4\72\1\0\2\72"+
    "\1\0\1\107\1\73\2\0\1\72\22\0\1\55\24\0"+
    "\3\74\1\0\1\74\2\0\4\74\1\0\2\74\1\110"+
    "\24\74\1\111\2\112\7\111\1\112\1\111\1\112\1\113"+
    "\1\114\2\112\1\111\4\112\2\111\5\112\1\115\1\112"+
    "\1\111\2\112\1\111\3\73\1\116\1\73\1\116\10\73"+
    "\1\0\24\73\23\0\1\117\17\0\16\63\1\55\25\63"+
    "\2\120\12\63\1\121\1\122\1\100\1\120\1\63\4\120"+
    "\10\63\1\65\4\63\3\0\1\102\1\0\1\102\10\0"+
    "\1\55\25\0\2\123\12\0\1\124\1\105\1\0\1\123"+
    "\1\0\4\123\10\0\1\52\5\0\2\123\12\0\1\124"+
    "\2\0\1\123\1\0\4\123\17\0\1\72\1\106\1\0"+
    "\1\106\7\0\1\72\1\55\1\0\1\72\1\0\4\72"+
    "\1\0\1\72\2\0\1\107\1\73\7\0\3\125\1\107"+
    "\1\125\1\107\2\0\1\126\1\125\1\127\1\0\2\125"+
    "\1\0\12\125\2\0\10\125\15\111\1\130\26\111\2\112"+
    "\7\111\1\112\1\111\1\112\1\131\1\111\2\112\1\111"+
    "\4\112\2\111\5\112\1\115\1\112\1\111\2\112\2\111"+
    "\2\112\7\111\1\112\1\111\1\112\1\57\1\114\2\112"+
    "\1\111\4\112\2\111\5\112\1\115\1\112\1\111\2\112"+
    "\2\111\2\132\12\111\1\130\2\111\1\132\1\111\4\132"+
    "\15\111\3\73\1\116\1\73\1\116\10\73\1\55\24\73"+
    "\24\0\1\133\16\0\1\63\2\134\12\63\1\135\1\122"+
    "\1\100\1\134\1\63\4\134\10\63\1\65\5\63\2\134"+
    "\12\63\1\135\1\63\1\100\1\134\1\63\4\134\15\63"+
    "\1\0\2\136\12\0\1\137\1\105\1\0\1\136\1\0"+
    "\4\136\10\0\1\52\5\0\2\136\12\0\1\137\2\0"+
    "\1\136\1\0\4\136\15\0\3\125\1\54\1\125\1\54"+
    "\3\0\1\125\2\0\2\125\1\55\12\125\2\0\10\125"+
    "\6\126\1\0\1\126\1\140\1\141\31\126\6\127\1\0"+
    "\2\127\1\142\1\140\30\127\15\111\1\73\26\111\2\112"+
    "\7\111\1\112\1\111\1\112\1\57\1\111\2\112\1\111"+
    "\4\112\2\111\5\112\1\115\1\112\1\111\2\112\2\111"+
    "\2\143\12\111\1\144\1\145\1\111\1\143\1\111\4\143"+
    "\10\111\1\115\4\111\25\0\1\146\15\0\1\63\2\147"+
    "\12\63\1\150\1\122\1\100\1\147\1\63\4\147\10\63"+
    "\1\65\5\63\2\147\12\63\1\150\1\63\1\100\1\147"+
    "\1\63\4\147\15\63\1\0\2\151\12\0\1\152\1\105"+
    "\1\0\1\151\1\0\4\151\10\0\1\52\5\0\2\151"+
    "\12\0\1\152\2\0\1\151\1\0\4\151\20\0\1\54"+
    "\1\0\1\54\10\0\1\55\14\0\1\73\7\0\6\126"+
    "\1\0\1\126\1\153\1\141\31\126\6\127\1\0\2\127"+
    "\1\142\1\154\30\127\1\111\2\155\12\111\1\156\1\145"+
    "\1\111\1\155\1\111\4\155\10\111\1\115\5\111\2\155"+
    "\12\111\1\157\2\111\1\155\1\111\4\155\15\111\24\0"+
    "\1\160\16\0\1\63\2\161\12\63\1\162\1\122\1\100"+
    "\1\161\1\63\4\161\10\63\1\65\5\63\2\161\12\63"+
    "\1\162\1\63\1\100\1\161\1\63\4\161\15\63\1\0"+
    "\2\163\12\0\1\164\1\105\1\0\1\163\1\0\4\163"+
    "\10\0\1\52\5\0\2\163\12\0\1\164\2\0\1\163"+
    "\1\0\4\163\15\0\3\126\1\165\1\126\1\165\1\0"+
    "\1\126\1\140\1\141\4\126\1\166\14\126\1\167\7\126"+
    "\3\127\1\170\1\127\1\170\1\0\2\127\1\142\1\140"+
    "\3\127\1\171\14\127\1\172\7\127\1\111\2\173\12\111"+
    "\1\174\1\145\1\111\1\173\1\111\4\173\10\111\1\115"+
    "\5\111\2\173\12\111\1\175\2\111\1\173\1\111\4\173"+
    "\15\111\1\0\2\136\12\0\1\137\1\55\1\0\1\136"+
    "\1\0\4\136\36\0\1\176\21\0\1\63\2\177\12\63"+
    "\1\200\1\122\1\100\1\177\1\63\4\177\10\63\1\65"+
    "\5\63\2\177\12\63\1\200\1\63\1\100\1\177\1\63"+
    "\4\177\15\63\1\0\2\201\12\0\1\202\1\105\1\0"+
    "\1\201\1\0\4\201\10\0\1\52\5\0\2\201\12\0"+
    "\1\202\2\0\1\201\1\0\4\201\15\0\2\126\1\203"+
    "\1\165\1\126\1\165\1\0\1\126\1\140\1\141\3\126"+
    "\1\203\1\166\1\126\1\203\1\126\4\203\1\126\1\203"+
    "\3\126\1\167\15\126\1\0\1\126\1\140\1\141\4\126"+
    "\1\166\24\126\2\127\1\204\1\170\1\127\1\170\1\0"+
    "\2\127\1\142\1\140\2\127\1\204\1\171\1\127\1\204"+
    "\1\127\4\204\1\127\1\204\3\127\1\172\15\127\1\0"+
    "\2\127\1\142\1\140\3\127\1\171\24\127\1\111\2\205"+
    "\12\111\1\206\1\145\1\111\1\205\1\111\4\205\10\111"+
    "\1\115\5\111\2\205\12\111\1\207\2\111\1\205\1\111"+
    "\4\205\15\111\1\0\2\151\12\0\1\152\1\55\1\0"+
    "\1\151\1\0\4\151\15\0\26\176\1\210\14\176\1\63"+
    "\2\211\12\63\1\212\1\122\1\100\1\211\1\63\4\211"+
    "\10\63\1\65\5\63\2\211\12\63\1\212\1\63\1\100"+
    "\1\211\1\63\4\211\15\63\1\0\2\213\12\0\1\214"+
    "\1\105\1\0\1\213\1\0\4\213\10\0\1\52\5\0"+
    "\2\213\12\0\1\214\2\0\1\213\1\0\4\213\15\0"+
    "\1\126\2\203\1\215\1\126\1\215\1\0\1\126\1\140"+
    "\1\141\3\126\1\203\1\166\1\126\1\203\1\126\4\203"+
    "\1\126\2\203\1\126\1\216\1\167\2\126\1\203\4\126"+
    "\1\127\2\204\1\217\1\127\1\217\1\0\2\127\1\142"+
    "\1\140\2\127\1\204\1\171\1\127\1\204\1\127\4\204"+
    "\1\127\2\204\1\127\1\220\1\172\2\127\1\204\4\127"+
    "\1\111\2\221\12\111\1\222\1\145\1\111\1\221\1\111"+
    "\4\221\10\111\1\115\5\111\2\221\12\111\1\223\2\111"+
    "\1\221\1\111\4\221\15\111\1\0\2\163\12\0\1\164"+
    "\1\55\1\0\1\163\1\0\4\163\15\0\26\176\1\224"+
    "\14\176\1\63\2\225\12\63\1\226\1\122\1\100\1\225"+
    "\1\63\4\225\10\63\1\65\5\63\2\225\12\63\1\226"+
    "\1\63\1\100\1\225\1\63\4\225\15\63\1\0\2\227"+
    "\12\0\1\230\1\105\1\0\1\227\1\0\4\227\10\0"+
    "\1\52\5\0\2\227\12\0\1\230\2\0\1\227\1\0"+
    "\4\227\15\0\2\126\1\203\1\215\1\126\1\215\1\0"+
    "\1\126\1\140\1\141\3\126\1\203\1\166\1\126\1\203"+
    "\1\126\4\203\1\126\1\203\2\126\1\216\1\167\7\126"+
    "\3\231\1\216\1\231\1\216\1\0\1\126\1\153\1\232"+
    "\1\233\1\126\2\231\1\126\12\231\2\126\10\231\2\127"+
    "\1\204\1\217\1\127\1\217\1\0\2\127\1\142\1\140"+
    "\2\127\1\204\1\171\1\127\1\204\1\127\4\204\1\127"+
    "\1\204\2\127\1\220\1\172\7\127\3\234\1\220\1\234"+
    "\1\220\1\0\1\127\1\233\1\235\1\154\1\127\2\234"+
    "\1\127\12\234\2\127\10\234\1\111\2\236\12\111\1\237"+
    "\1\145\1\111\1\236\1\111\4\236\10\111\1\115\5\111"+
    "\2\236\12\111\1\240\2\111\1\236\1\111\4\236\15\111"+
    "\1\0\2\201\12\0\1\202\1\55\1\0\1\201\1\0"+
    "\4\201\15\0\16\176\1\55\24\176\1\63\2\241\12\63"+
    "\1\242\1\122\1\100\1\241\1\63\4\241\10\63\1\65"+
    "\5\63\2\241\12\63\1\242\1\63\1\100\1\241\1\63"+
    "\4\241\15\63\1\0\2\243\12\0\1\244\1\105\1\0"+
    "\1\243\1\0\4\243\10\0\1\52\5\0\2\243\12\0"+
    "\1\244\2\0\1\243\1\0\4\243\15\0\3\231\1\165"+
    "\1\231\1\165\1\0\1\126\1\140\1\232\2\126\2\231"+
    "\1\166\12\231\2\126\13\231\1\165\1\231\1\165\1\0"+
    "\1\126\1\153\1\232\2\126\2\231\1\166\12\231\2\126"+
    "\10\231\6\233\1\0\1\233\1\154\1\245\1\153\30\233"+
    "\3\234\1\170\1\234\1\170\1\0\2\127\1\235\1\140"+
    "\1\127\2\234\1\171\12\234\2\127\13\234\1\170\1\234"+
    "\1\170\1\0\2\127\1\235\1\154\1\127\2\234\1\171"+
    "\12\234\2\127\10\234\1\111\2\246\12\111\1\247\1\145"+
    "\1\111\1\246\1\111\4\246\10\111\1\115\5\111\2\246"+
    "\12\111\1\250\2\111\1\246\1\111\4\246\15\111\1\0"+
    "\2\213\12\0\1\214\1\55\1\0\1\213\1\0\4\213"+
    "\15\0\1\63\2\251\12\63\1\252\1\122\1\100\1\251"+
    "\1\63\4\251\10\63\1\65\5\63\2\251\12\63\1\252"+
    "\1\63\1\100\1\251\1\63\4\251\15\63\1\0\2\253"+
    "\12\0\1\254\1\105\1\0\1\253\1\0\4\253\10\0"+
    "\1\52\5\0\2\253\12\0\1\254\2\0\1\253\1\0"+
    "\4\253\15\0\6\233\1\0\1\233\1\255\1\245\1\255"+
    "\30\233\1\111\2\256\12\111\1\257\1\145\1\111\1\256"+
    "\1\111\4\256\10\111\1\115\5\111\2\256\12\111\1\260"+
    "\2\111\1\256\1\111\4\256\15\111\1\0\2\227\12\0"+
    "\1\230\1\55\1\0\1\227\1\0\4\227\15\0\1\63"+
    "\2\261\12\63\1\262\1\122\1\100\1\261\1\63\4\261"+
    "\10\63\1\65\5\63\2\261\12\63\1\262\1\63\1\100"+
    "\1\261\1\63\4\261\15\63\1\0\2\263\12\0\1\264"+
    "\1\105\1\0\1\263\1\0\4\263\10\0\1\52\5\0"+
    "\2\263\12\0\1\264\2\0\1\263\1\0\4\263\15\0"+
    "\3\233\1\265\1\233\1\265\1\0\1\233\1\154\1\245"+
    "\1\153\3\233\1\266\14\233\1\267\7\233\1\111\2\270"+
    "\12\111\1\271\1\145\1\111\1\270\1\111\4\270\10\111"+
    "\1\115\5\111\2\270\12\111\1\272\2\111\1\270\1\111"+
    "\4\270\15\111\1\0\2\243\12\0\1\244\1\55\1\0"+
    "\1\243\1\0\4\243\15\0\1\63\2\273\12\63\1\274"+
    "\1\122\1\100\1\273\1\63\4\273\10\63\1\65\5\63"+
    "\2\273\12\63\1\274\1\63\1\100\1\273\1\63\4\273"+
    "\15\63\1\0\2\275\12\0\1\276\1\105\1\0\1\275"+
    "\1\0\4\275\10\0\1\52\5\0\2\275\12\0\1\276"+
    "\2\0\1\275\1\0\4\275\15\0\2\233\1\277\1\265"+
    "\1\233\1\265\1\0\1\233\1\154\1\245\1\153\2\233"+
    "\1\277\1\266\1\233\1\277\1\233\4\277\1\233\1\277"+
    "\3\233\1\267\15\233\1\0\1\233\1\154\1\245\1\153"+
    "\3\233\1\266\24\233\1\111\2\300\12\111\1\301\1\145"+
    "\1\111\1\300\1\111\4\300\10\111\1\115\5\111\2\300"+
    "\12\111\1\302\2\111\1\300\1\111\4\300\15\111\1\0"+
    "\2\253\12\0\1\254\1\55\1\0\1\253\1\0\4\253"+
    "\15\0\1\63\2\303\12\63\1\304\1\122\1\100\1\303"+
    "\1\63\4\303\10\63\1\65\5\63\2\303\12\63\1\304"+
    "\1\63\1\100\1\303\1\63\4\303\15\63\1\0\2\305"+
    "\12\0\1\306\1\105\1\0\1\305\1\0\4\305\10\0"+
    "\1\52\5\0\2\305\12\0\1\306\2\0\1\305\1\0"+
    "\4\305\15\0\1\233\2\277\1\307\1\233\1\307\1\0"+
    "\1\233\1\154\1\245\1\153\2\233\1\277\1\266\1\233"+
    "\1\277\1\233\4\277\1\233\2\277\1\233\1\310\1\267"+
    "\2\233\1\277\4\233\1\111\2\311\12\111\1\312\1\145"+
    "\1\111\1\311\1\111\4\311\10\111\1\115\5\111\2\311"+
    "\12\111\1\313\2\111\1\311\1\111\4\311\15\111\1\0"+
    "\2\263\12\0\1\264\1\55\1\0\1\263\1\0\4\263"+
    "\15\0\1\63\2\314\12\63\1\315\1\122\1\100\1\314"+
    "\1\63\4\314\10\63\1\65\5\63\2\314\12\63\1\315"+
    "\1\63\1\100\1\314\1\63\4\314\15\63\1\0\2\316"+
    "\12\0\1\317\1\105\1\0\1\316\1\0\4\316\10\0"+
    "\1\52\5\0\2\316\12\0\1\317\2\0\1\316\1\0"+
    "\4\316\15\0\2\233\1\277\1\307\1\233\1\307\1\0"+
    "\1\233\1\154\1\245\1\153\2\233\1\277\1\266\1\233"+
    "\1\277\1\233\4\277\1\233\1\277\2\233\1\310\1\267"+
    "\7\233\3\320\1\310\1\320\1\310\1\0\1\233\1\255"+
    "\1\321\1\255\1\233\2\320\1\233\12\320\2\233\10\320"+
    "\1\111\2\322\12\111\1\323\1\145\1\111\1\322\1\111"+
    "\4\322\10\111\1\115\5\111\2\322\12\111\1\324\2\111"+
    "\1\322\1\111\4\322\15\111\1\0\2\275\12\0\1\276"+
    "\1\55\1\0\1\275\1\0\4\275\15\0\1\63\2\325"+
    "\12\63\1\326\1\122\1\100\1\325\1\63\4\325\10\63"+
    "\1\65\5\63\2\325\12\63\1\326\1\63\1\100\1\325"+
    "\1\63\4\325\15\63\1\0\2\327\12\0\1\330\1\105"+
    "\1\0\1\327\1\0\4\327\10\0\1\52\5\0\2\327"+
    "\12\0\1\330\2\0\1\327\1\0\4\327\15\0\3\320"+
    "\1\265\1\320\1\265\1\0\1\233\1\154\1\321\1\153"+
    "\1\233\2\320\1\266\12\320\2\233\13\320\1\265\1\320"+
    "\1\265\1\0\1\233\1\255\1\321\1\255\1\233\2\320"+
    "\1\266\12\320\2\233\10\320\1\111\2\331\12\111\1\332"+
    "\1\145\1\111\1\331\1\111\4\331\10\111\1\115\5\111"+
    "\2\331\12\111\1\333\2\111\1\331\1\111\4\331\15\111"+
    "\1\0\2\305\12\0\1\306\1\55\1\0\1\305\1\0"+
    "\4\305\15\0\1\63\2\334\12\63\1\335\1\122\1\100"+
    "\1\334\1\63\4\334\10\63\1\65\5\63\2\334\12\63"+
    "\1\335\1\63\1\100\1\334\1\63\4\334\15\63\1\0"+
    "\2\336\12\0\1\337\1\105\1\0\1\336\1\0\4\336"+
    "\10\0\1\52\5\0\2\336\12\0\1\337\2\0\1\336"+
    "\1\0\4\336\15\0\1\111\2\340\12\111\1\341\1\145"+
    "\1\111\1\340\1\111\4\340\10\111\1\115\5\111\2\340"+
    "\12\111\1\342\2\111\1\340\1\111\4\340\15\111\1\0"+
    "\2\316\12\0\1\317\1\55\1\0\1\316\1\0\4\316"+
    "\15\0\1\63\2\343\12\63\1\344\1\122\1\100\1\343"+
    "\1\63\4\343\10\63\1\65\5\63\2\343\12\63\1\344"+
    "\1\63\1\100\1\343\1\63\4\343\15\63\1\0\2\345"+
    "\12\0\1\346\1\105\1\0\1\345\1\0\4\345\10\0"+
    "\1\52\5\0\2\345\12\0\1\346\2\0\1\345\1\0"+
    "\4\345\15\0\1\111\2\347\12\111\1\350\1\145\1\111"+
    "\1\347\1\111\4\347\10\111\1\115\5\111\2\347\12\111"+
    "\1\351\2\111\1\347\1\111\4\347\15\111\1\0\2\327"+
    "\12\0\1\330\1\55\1\0\1\327\1\0\4\327\15\0"+
    "\1\63\2\352\12\63\1\353\1\122\1\100\1\352\1\63"+
    "\4\352\10\63\1\65\5\63\2\352\12\63\1\353\1\63"+
    "\1\100\1\352\1\63\4\352\15\63\1\0\2\354\12\0"+
    "\1\355\1\105\1\0\1\354\1\0\4\354\10\0\1\52"+
    "\5\0\2\354\12\0\1\355\2\0\1\354\1\0\4\354"+
    "\15\0\1\111\2\356\12\111\1\357\1\145\1\111\1\356"+
    "\1\111\4\356\10\111\1\115\5\111\2\356\12\111\1\360"+
    "\2\111\1\356\1\111\4\356\15\111\1\0\2\336\12\0"+
    "\1\337\1\55\1\0\1\336\1\0\4\336\15\0\1\63"+
    "\2\361\12\63\1\362\1\122\1\100\1\361\1\63\4\361"+
    "\10\63\1\65\5\63\2\361\12\63\1\362\1\63\1\100"+
    "\1\361\1\63\4\361\15\63\1\0\2\363\12\0\1\364"+
    "\1\105\1\0\1\363\1\0\4\363\10\0\1\52\5\0"+
    "\2\363\12\0\1\364\2\0\1\363\1\0\4\363\15\0"+
    "\1\111\2\365\12\111\1\366\1\145\1\111\1\365\1\111"+
    "\4\365\10\111\1\115\5\111\2\365\12\111\1\367\2\111"+
    "\1\365\1\111\4\365\15\111\1\0\2\345\12\0\1\346"+
    "\1\55\1\0\1\345\1\0\4\345\15\0\1\63\2\370"+
    "\12\63\1\371\1\122\1\100\1\370\1\63\4\370\10\63"+
    "\1\65\5\63\2\370\12\63\1\371\1\63\1\100\1\370"+
    "\1\63\4\370\15\63\1\0\2\372\12\0\1\373\1\105"+
    "\1\0\1\372\1\0\4\372\10\0\1\52\5\0\2\372"+
    "\12\0\1\373\2\0\1\372\1\0\4\372\15\0\1\111"+
    "\2\374\12\111\1\375\1\145\1\111\1\374\1\111\4\374"+
    "\10\111\1\115\5\111\2\374\12\111\1\376\2\111\1\374"+
    "\1\111\4\374\15\111\1\0\2\354\12\0\1\355\1\55"+
    "\1\0\1\354\1\0\4\354\15\0\1\63\2\377\12\63"+
    "\1\u0100\1\122\1\100\1\377\1\63\4\377\10\63\1\65"+
    "\5\63\2\377\12\63\1\u0100\1\63\1\100\1\377\1\63"+
    "\4\377\15\63\1\0\2\u0101\12\0\1\u0102\1\105\1\0"+
    "\1\u0101\1\0\4\u0101\10\0\1\52\5\0\2\u0101\12\0"+
    "\1\u0102\2\0\1\u0101\1\0\4\u0101\15\0\1\111\2\u0103"+
    "\12\111\1\u0104\1\145\1\111\1\u0103\1\111\4\u0103\10\111"+
    "\1\115\5\111\2\u0103\12\111\1\u0105\2\111\1\u0103\1\111"+
    "\4\u0103\15\111\1\0\2\363\12\0\1\364\1\55\1\0"+
    "\1\363\1\0\4\363\15\0\1\63\2\u0106\12\63\1\u0107"+
    "\1\122\1\100\1\u0106\1\63\4\u0106\10\63\1\65\5\63"+
    "\2\u0106\12\63\1\u0107\1\63\1\100\1\u0106\1\63\4\u0106"+
    "\15\63\1\0\2\u0108\12\0\1\u0109\1\105\1\0\1\u0108"+
    "\1\0\4\u0108\10\0\1\52\5\0\2\u0108\12\0\1\u0109"+
    "\2\0\1\u0108\1\0\4\u0108\15\0\1\111\2\u010a\12\111"+
    "\1\u010b\1\145\1\111\1\u010a\1\111\4\u010a\10\111\1\115"+
    "\5\111\2\u010a\12\111\1\u010c\2\111\1\u010a\1\111\4\u010a"+
    "\15\111\1\0\2\372\12\0\1\373\1\55\1\0\1\372"+
    "\1\0\4\372\15\0\1\63\2\u010d\12\63\1\u010e\1\122"+
    "\1\100\1\u010d\1\63\4\u010d\10\63\1\65\5\63\2\u010d"+
    "\12\63\1\u010e\1\63\1\100\1\u010d\1\63\4\u010d\15\63"+
    "\1\0\2\u010f\12\0\1\u0110\1\105\1\0\1\u010f\1\0"+
    "\4\u010f\10\0\1\52\5\0\2\u010f\12\0\1\u0110\2\0"+
    "\1\u010f\1\0\4\u010f\15\0\1\111\2\u0111\12\111\1\u0112"+
    "\1\145\1\111\1\u0111\1\111\4\u0111\10\111\1\115\5\111"+
    "\2\u0111\12\111\1\u0113\2\111\1\u0111\1\111\4\u0111\15\111"+
    "\1\0\2\u0101\12\0\1\u0102\1\55\1\0\1\u0101\1\0"+
    "\4\u0101\15\0\1\63\2\u0114\12\63\1\u0115\1\122\1\100"+
    "\1\u0114\1\63\4\u0114\10\63\1\65\5\63\2\u0114\12\63"+
    "\1\u0115\1\63\1\100\1\u0114\1\63\4\u0114\15\63\1\0"+
    "\2\u0116\12\0\1\u0117\1\105\1\0\1\u0116\1\0\4\u0116"+
    "\10\0\1\52\5\0\2\u0116\12\0\1\u0117\2\0\1\u0116"+
    "\1\0\4\u0116\15\0\1\111\2\u0118\12\111\1\u0119\1\145"+
    "\1\111\1\u0118\1\111\4\u0118\10\111\1\115\5\111\2\u0118"+
    "\12\111\1\u011a\2\111\1\u0118\1\111\4\u0118\15\111\1\0"+
    "\2\u0108\12\0\1\u0109\1\55\1\0\1\u0108\1\0\4\u0108"+
    "\15\0\1\63\2\u011b\12\63\1\u011c\1\122\1\100\1\u011b"+
    "\1\63\4\u011b\10\63\1\65\5\63\2\u011b\12\63\1\u011c"+
    "\1\63\1\100\1\u011b\1\63\4\u011b\15\63\1\0\2\u011d"+
    "\12\0\1\u011e\1\105\1\0\1\u011d\1\0\4\u011d\10\0"+
    "\1\52\5\0\2\u011d\12\0\1\u011e\2\0\1\u011d\1\0"+
    "\4\u011d\15\0\1\111\2\u011f\12\111\1\u0120\1\145\1\111"+
    "\1\u011f\1\111\4\u011f\10\111\1\115\5\111\2\u011f\12\111"+
    "\1\u0121\2\111\1\u011f\1\111\4\u011f\15\111\1\0\2\u010f"+
    "\12\0\1\u0110\1\55\1\0\1\u010f\1\0\4\u010f\15\0"+
    "\1\63\2\u0122\12\63\1\u0123\1\122\1\100\1\u0122\1\63"+
    "\4\u0122\10\63\1\65\5\63\2\u0122\12\63\1\u0123\1\63"+
    "\1\100\1\u0122\1\63\4\u0122\15\63\1\0\2\u0124\12\0"+
    "\1\u0125\1\105\1\0\1\u0124\1\0\4\u0124\10\0\1\52"+
    "\5\0\2\u0124\12\0\1\u0125\2\0\1\u0124\1\0\4\u0124"+
    "\15\0\1\111\2\u0126\12\111\1\u0127\1\145\1\111\1\u0126"+
    "\1\111\4\u0126\10\111\1\115\5\111\2\u0126\12\111\1\u0128"+
    "\2\111\1\u0126\1\111\4\u0126\15\111\1\0\2\u0116\12\0"+
    "\1\u0117\1\55\1\0\1\u0116\1\0\4\u0116\15\0\1\63"+
    "\2\u0129\12\63\1\u012a\1\122\1\100\1\u0129\1\63\4\u0129"+
    "\10\63\1\65\5\63\2\u0129\12\63\1\u012a\1\63\1\100"+
    "\1\u0129\1\63\4\u0129\15\63\1\0\2\u012b\12\0\1\u012c"+
    "\1\105\1\0\1\u012b\1\0\4\u012b\10\0\1\52\5\0"+
    "\2\u012b\12\0\1\u012c\2\0\1\u012b\1\0\4\u012b\15\0"+
    "\1\111\2\u012d\12\111\1\u012e\1\145\1\111\1\u012d\1\111"+
    "\4\u012d\10\111\1\115\5\111\2\u012d\12\111\1\u012f\2\111"+
    "\1\u012d\1\111\4\u012d\15\111\1\0\2\u011d\12\0\1\u011e"+
    "\1\55\1\0\1\u011d\1\0\4\u011d\15\0\1\63\2\u0130"+
    "\12\63\1\u0131\1\122\1\100\1\u0130\1\63\4\u0130\10\63"+
    "\1\65\5\63\2\u0130\12\63\1\u0131\1\63\1\100\1\u0130"+
    "\1\63\4\u0130\15\63\1\0\2\u0132\12\0\1\u0133\1\105"+
    "\1\0\1\u0132\1\0\4\u0132\10\0\1\52\5\0\2\u0132"+
    "\12\0\1\u0133\2\0\1\u0132\1\0\4\u0132\15\0\1\111"+
    "\2\u0134\12\111\1\u0135\1\145\1\111\1\u0134\1\111\4\u0134"+
    "\10\111\1\115\5\111\2\u0134\12\111\1\u0136\2\111\1\u0134"+
    "\1\111\4\u0134\15\111\1\0\2\u0124\12\0\1\u0125\1\55"+
    "\1\0\1\u0124\1\0\4\u0124\15\0\1\63\2\u0137\12\63"+
    "\1\u0138\1\122\1\100\1\u0137\1\63\4\u0137\10\63\1\65"+
    "\5\63\2\u0137\12\63\1\u0138\1\63\1\100\1\u0137\1\63"+
    "\4\u0137\15\63\1\0\2\u0139\12\0\1\u013a\1\105\1\0"+
    "\1\u0139\1\0\4\u0139\10\0\1\52\5\0\2\u0139\12\0"+
    "\1\u013a\2\0\1\u0139\1\0\4\u0139\15\0\1\111\2\u013b"+
    "\12\111\1\u013c\1\145\1\111\1\u013b\1\111\4\u013b\10\111"+
    "\1\115\5\111\2\u013b\12\111\1\u013d\2\111\1\u013b\1\111"+
    "\4\u013b\15\111\1\0\2\u012b\12\0\1\u012c\1\55\1\0"+
    "\1\u012b\1\0\4\u012b\15\0\1\63\2\u013e\12\63\1\u013f"+
    "\1\122\1\100\1\u013e\1\63\4\u013e\10\63\1\65\5\63"+
    "\2\u013e\12\63\1\u013f\1\63\1\100\1\u013e\1\63\4\u013e"+
    "\15\63\1\0\2\u0140\12\0\1\u0141\1\105\1\0\1\u0140"+
    "\1\0\4\u0140\10\0\1\52\5\0\2\u0140\12\0\1\u0141"+
    "\2\0\1\u0140\1\0\4\u0140\15\0\1\111\2\u0142\12\111"+
    "\1\u0143\1\145\1\111\1\u0142\1\111\4\u0142\10\111\1\115"+
    "\5\111\2\u0142\12\111\1\u0144\2\111\1\u0142\1\111\4\u0142"+
    "\15\111\1\0\2\u0132\12\0\1\u0133\1\55\1\0\1\u0132"+
    "\1\0\4\u0132\15\0\1\63\2\u0145\12\63\1\u0146\1\122"+
    "\1\100\1\u0145\1\63\4\u0145\10\63\1\65\5\63\2\u0145"+
    "\12\63\1\u0146\1\63\1\100\1\u0145\1\63\4\u0145\15\63"+
    "\1\0\2\u0147\12\0\1\u0148\1\105\1\0\1\u0147\1\0"+
    "\4\u0147\10\0\1\52\5\0\2\u0147\12\0\1\u0148\2\0"+
    "\1\u0147\1\0\4\u0147\15\0\1\111\2\u0149\12\111\1\u014a"+
    "\1\145\1\111\1\u0149\1\111\4\u0149\10\111\1\115\5\111"+
    "\2\u0149\12\111\1\u014b\2\111\1\u0149\1\111\4\u0149\15\111"+
    "\1\0\2\u0139\12\0\1\u013a\1\55\1\0\1\u0139\1\0"+
    "\4\u0139\15\0\1\63\2\u014c\12\63\1\u014d\1\122\1\100"+
    "\1\u014c\1\63\4\u014c\10\63\1\65\5\63\2\u014c\12\63"+
    "\1\u014d\1\63\1\100\1\u014c\1\63\4\u014c\15\63\1\0"+
    "\2\u014e\12\0\1\u014f\1\105\1\0\1\u014e\1\0\4\u014e"+
    "\10\0\1\52\5\0\2\u014e\12\0\1\u014f\2\0\1\u014e"+
    "\1\0\4\u014e\15\0\1\111\2\u0150\12\111\1\u0151\1\145"+
    "\1\111\1\u0150\1\111\4\u0150\10\111\1\115\5\111\2\u0150"+
    "\12\111\1\u0152\2\111\1\u0150\1\111\4\u0150\15\111\1\0"+
    "\2\u0140\12\0\1\u0141\1\55\1\0\1\u0140\1\0\4\u0140"+
    "\15\0\1\63\2\u0153\12\63\1\u0154\1\122\1\100\1\u0153"+
    "\1\63\4\u0153\10\63\1\65\5\63\2\u0153\12\63\1\u0154"+
    "\1\63\1\100\1\u0153\1\63\4\u0153\15\63\1\0\2\u0155"+
    "\12\0\1\u0156\1\105\1\0\1\u0155\1\0\4\u0155\10\0"+
    "\1\52\5\0\2\u0155\12\0\1\u0156\2\0\1\u0155\1\0"+
    "\4\u0155\15\0\1\111\2\u0157\12\111\1\u0158\1\145\1\111"+
    "\1\u0157\1\111\4\u0157\10\111\1\115\5\111\2\u0157\12\111"+
    "\1\u0159\2\111\1\u0157\1\111\4\u0157\15\111\1\0\2\u0147"+
    "\12\0\1\u0148\1\55\1\0\1\u0147\1\0\4\u0147\15\0"+
    "\1\63\2\u015a\12\63\1\u015b\1\122\1\100\1\u015a\1\63"+
    "\4\u015a\10\63\1\65\5\63\2\u015a\12\63\1\u015b\1\63"+
    "\1\100\1\u015a\1\63\4\u015a\15\63\1\0\2\u015c\12\0"+
    "\1\u015d\1\105\1\0\1\u015c\1\0\4\u015c\10\0\1\52"+
    "\5\0\2\u015c\12\0\1\u015d\2\0\1\u015c\1\0\4\u015c"+
    "\15\0\1\111\2\u015e\12\111\1\u015f\1\145\1\111\1\u015e"+
    "\1\111\4\u015e\10\111\1\115\5\111\2\u015e\12\111\1\u0160"+
    "\2\111\1\u015e\1\111\4\u015e\15\111\1\0\2\u014e\12\0"+
    "\1\u014f\1\55\1\0\1\u014e\1\0\4\u014e\15\0\1\63"+
    "\2\u0161\12\63\1\u0162\1\122\1\100\1\u0161\1\63\4\u0161"+
    "\10\63\1\65\5\63\2\u0161\12\63\1\u0162\1\63\1\100"+
    "\1\u0161\1\63\4\u0161\15\63\1\0\2\u0163\12\0\1\u0164"+
    "\1\105\1\0\1\u0163\1\0\4\u0163\10\0\1\52\5\0"+
    "\2\u0163\12\0\1\u0164\2\0\1\u0163\1\0\4\u0163\15\0"+
    "\1\111\2\u0165\12\111\1\u0166\1\145\1\111\1\u0165\1\111"+
    "\4\u0165\10\111\1\115\5\111\2\u0165\12\111\1\u0167\2\111"+
    "\1\u0165\1\111\4\u0165\15\111\1\0\2\u0155\12\0\1\u0156"+
    "\1\55\1\0\1\u0155\1\0\4\u0155\15\0\1\63\2\u0168"+
    "\12\63\1\u0169\1\122\1\100\1\u0168\1\63\4\u0168\10\63"+
    "\1\65\5\63\2\u0168\12\63\1\u0169\1\63\1\100\1\u0168"+
    "\1\63\4\u0168\15\63\1\0\2\u016a\12\0\1\u016b\1\105"+
    "\1\0\1\u016a\1\0\4\u016a\10\0\1\52\5\0\2\u016a"+
    "\12\0\1\u016b\2\0\1\u016a\1\0\4\u016a\15\0\1\111"+
    "\2\u016c\12\111\1\u016d\1\145\1\111\1\u016c\1\111\4\u016c"+
    "\10\111\1\115\5\111\2\u016c\12\111\1\u016e\2\111\1\u016c"+
    "\1\111\4\u016c\15\111\1\0\2\u015c\12\0\1\u015d\1\55"+
    "\1\0\1\u015c\1\0\4\u015c\15\0\1\63\2\u016f\12\63"+
    "\1\u0170\1\122\1\100\1\u016f\1\63\4\u016f\10\63\1\65"+
    "\5\63\2\u016f\12\63\1\u0170\1\63\1\100\1\u016f\1\63"+
    "\4\u016f\15\63\1\0\2\u0171\12\0\1\u0172\1\105\1\0"+
    "\1\u0171\1\0\4\u0171\10\0\1\52\5\0\2\u0171\12\0"+
    "\1\u0172\2\0\1\u0171\1\0\4\u0171\15\0\1\111\2\u0173"+
    "\12\111\1\u0174\1\145\1\111\1\u0173\1\111\4\u0173\10\111"+
    "\1\115\5\111\2\u0173\12\111\1\u0175\2\111\1\u0173\1\111"+
    "\4\u0173\15\111\1\0\2\u0163\12\0\1\u0164\1\55\1\0"+
    "\1\u0163\1\0\4\u0163\15\0\1\63\2\u0176\12\63\1\u0177"+
    "\1\122\1\100\1\u0176\1\63\4\u0176\10\63\1\65\5\63"+
    "\2\u0176\12\63\1\u0177\1\63\1\100\1\u0176\1\63\4\u0176"+
    "\15\63\1\0\2\u0178\12\0\1\u0179\1\105\1\0\1\u0178"+
    "\1\0\4\u0178\10\0\1\52\5\0\2\u0178\12\0\1\u0179"+
    "\2\0\1\u0178\1\0\4\u0178\15\0\1\111\2\u017a\12\111"+
    "\1\u017b\1\145\1\111\1\u017a\1\111\4\u017a\10\111\1\115"+
    "\5\111\2\u017a\12\111\1\u017c\2\111\1\u017a\1\111\4\u017a"+
    "\15\111\1\0\2\u016a\12\0\1\u016b\1\55\1\0\1\u016a"+
    "\1\0\4\u016a\15\0\1\63\2\u017d\12\63\1\u017e\1\122"+
    "\1\100\1\u017d\1\63\4\u017d\10\63\1\65\5\63\2\u017d"+
    "\12\63\1\u017e\1\63\1\100\1\u017d\1\63\4\u017d\15\63"+
    "\1\0\2\u017f\12\0\1\u0180\1\105\1\0\1\u017f\1\0"+
    "\4\u017f\10\0\1\52\5\0\2\u017f\12\0\1\u0180\2\0"+
    "\1\u017f\1\0\4\u017f\15\0\1\111\2\u0181\12\111\1\u0182"+
    "\1\145\1\111\1\u0181\1\111\4\u0181\10\111\1\115\5\111"+
    "\2\u0181\12\111\1\u0183\2\111\1\u0181\1\111\4\u0181\15\111"+
    "\1\0\2\u0171\12\0\1\u0172\1\55\1\0\1\u0171\1\0"+
    "\4\u0171\15\0\1\63\2\u0184\12\63\1\u0185\1\122\1\100"+
    "\1\u0184\1\63\4\u0184\10\63\1\65\5\63\2\u0184\12\63"+
    "\1\u0185\1\63\1\100\1\u0184\1\63\4\u0184\15\63\1\0"+
    "\2\u0186\12\0\1\u0187\1\105\1\0\1\u0186\1\0\4\u0186"+
    "\10\0\1\52\5\0\2\u0186\12\0\1\u0187\2\0\1\u0186"+
    "\1\0\4\u0186\15\0\1\111\2\u0188\12\111\1\u0189\1\145"+
    "\1\111\1\u0188\1\111\4\u0188\10\111\1\115\5\111\2\u0188"+
    "\12\111\1\u018a\2\111\1\u0188\1\111\4\u0188\15\111\1\0"+
    "\2\u0178\12\0\1\u0179\1\55\1\0\1\u0178\1\0\4\u0178"+
    "\15\0\1\63\2\u018b\12\63\1\u018c\1\122\1\100\1\u018b"+
    "\1\63\4\u018b\10\63\1\65\5\63\2\u018b\12\63\1\u018c"+
    "\1\63\1\100\1\u018b\1\63\4\u018b\15\63\1\0\2\u018d"+
    "\12\0\1\u018e\1\105\1\0\1\u018d\1\0\4\u018d\10\0"+
    "\1\52\5\0\2\u018d\12\0\1\u018e\2\0\1\u018d\1\0"+
    "\4\u018d\15\0\1\111\2\u018f\12\111\1\u0190\1\145\1\111"+
    "\1\u018f\1\111\4\u018f\10\111\1\115\5\111\2\u018f\12\111"+
    "\1\u0191\2\111\1\u018f\1\111\4\u018f\15\111\1\0\2\u017f"+
    "\12\0\1\u0180\1\55\1\0\1\u017f\1\0\4\u017f\15\0"+
    "\1\63\2\u0192\12\63\1\u0193\1\122\1\100\1\u0192\1\63"+
    "\4\u0192\10\63\1\65\5\63\2\u0192\12\63\1\u0193\1\63"+
    "\1\100\1\u0192\1\63\4\u0192\15\63\1\0\2\u0194\12\0"+
    "\1\u0195\1\105\1\0\1\u0194\1\0\4\u0194\10\0\1\52"+
    "\5\0\2\u0194\12\0\1\u0195\2\0\1\u0194\1\0\4\u0194"+
    "\15\0\1\111\2\u0196\12\111\1\u0197\1\145\1\111\1\u0196"+
    "\1\111\4\u0196\10\111\1\115\5\111\2\u0196\12\111\1\u0198"+
    "\2\111\1\u0196\1\111\4\u0196\15\111\1\0\2\u0186\12\0"+
    "\1\u0187\1\55\1\0\1\u0186\1\0\4\u0186\15\0\1\63"+
    "\2\u0199\12\63\1\u019a\1\122\1\100\1\u0199\1\63\4\u0199"+
    "\10\63\1\65\5\63\2\u0199\12\63\1\u019a\1\63\1\100"+
    "\1\u0199\1\63\4\u0199\15\63\1\0\2\u019b\12\0\1\u019c"+
    "\1\105\1\0\1\u019b\1\0\4\u019b\10\0\1\52\5\0"+
    "\2\u019b\12\0\1\u019c\2\0\1\u019b\1\0\4\u019b\15\0"+
    "\1\111\2\u019d\12\111\1\u019e\1\145\1\111\1\u019d\1\111"+
    "\4\u019d\10\111\1\115\5\111\2\u019d\12\111\1\u019f\2\111"+
    "\1\u019d\1\111\4\u019d\15\111\1\0\2\u018d\12\0\1\u018e"+
    "\1\55\1\0\1\u018d\1\0\4\u018d\15\0\1\63\2\u01a0"+
    "\12\63\1\u01a1\1\122\1\100\1\u01a0\1\63\4\u01a0\10\63"+
    "\1\65\5\63\2\u01a0\12\63\1\u01a1\1\63\1\100\1\u01a0"+
    "\1\63\4\u01a0\15\63\1\0\2\u01a2\12\0\1\u01a3\1\105"+
    "\1\0\1\u01a2\1\0\4\u01a2\10\0\1\52\5\0\2\u01a2"+
    "\12\0\1\u01a3\2\0\1\u01a2\1\0\4\u01a2\15\0\1\111"+
    "\2\u01a4\12\111\1\u01a5\1\145\1\111\1\u01a4\1\111\4\u01a4"+
    "\10\111\1\115\5\111\2\u01a4\12\111\1\u01a6\2\111\1\u01a4"+
    "\1\111\4\u01a4\15\111\1\0\2\u0194\12\0\1\u0195\1\55"+
    "\1\0\1\u0194\1\0\4\u0194\15\0\1\63\2\u01a7\12\63"+
    "\1\u01a8\1\122\1\100\1\u01a7\1\63\4\u01a7\10\63\1\65"+
    "\5\63\2\u01a7\12\63\1\u01a8\1\63\1\100\1\u01a7\1\63"+
    "\4\u01a7\15\63\1\0\2\u01a9\12\0\1\u01aa\1\105\1\0"+
    "\1\u01a9\1\0\4\u01a9\10\0\1\52\5\0\2\u01a9\12\0"+
    "\1\u01aa\2\0\1\u01a9\1\0\4\u01a9\15\0\1\111\2\u01ab"+
    "\12\111\1\u01ac\1\145\1\111\1\u01ab\1\111\4\u01ab\10\111"+
    "\1\115\5\111\2\u01ab\12\111\1\u01ad\2\111\1\u01ab\1\111"+
    "\4\u01ab\15\111\1\0\2\u019b\12\0\1\u019c\1\55\1\0"+
    "\1\u019b\1\0\4\u019b\15\0\1\63\2\u01ae\12\63\1\u01af"+
    "\1\122\1\100\1\u01ae\1\63\4\u01ae\10\63\1\65\5\63"+
    "\2\u01ae\12\63\1\u01af\1\63\1\100\1\u01ae\1\63\4\u01ae"+
    "\15\63\1\0\2\u01b0\12\0\1\u01b1\1\105\1\0\1\u01b0"+
    "\1\0\4\u01b0\10\0\1\52\5\0\2\u01b0\12\0\1\u01b1"+
    "\2\0\1\u01b0\1\0\4\u01b0\15\0\1\111\2\u01b2\12\111"+
    "\1\u01b3\1\145\1\111\1\u01b2\1\111\4\u01b2\10\111\1\115"+
    "\5\111\2\u01b2\12\111\1\u01b4\2\111\1\u01b2\1\111\4\u01b2"+
    "\15\111\1\0\2\u01a2\12\0\1\u01a3\1\55\1\0\1\u01a2"+
    "\1\0\4\u01a2\15\0\1\63\2\u01b5\12\63\1\u01b6\1\122"+
    "\1\100\1\u01b5\1\63\4\u01b5\10\63\1\65\5\63\2\u01b5"+
    "\12\63\1\u01b6\1\63\1\100\1\u01b5\1\63\4\u01b5\15\63"+
    "\1\0\2\u01b7\12\0\1\u01b8\1\105\1\0\1\u01b7\1\0"+
    "\4\u01b7\10\0\1\52\5\0\2\u01b7\12\0\1\u01b8\2\0"+
    "\1\u01b7\1\0\4\u01b7\15\0\1\111\2\u01b9\12\111\1\u01ba"+
    "\1\145\1\111\1\u01b9\1\111\4\u01b9\10\111\1\115\5\111"+
    "\2\u01b9\12\111\1\u01bb\2\111\1\u01b9\1\111\4\u01b9\15\111"+
    "\1\0\2\u01a9\12\0\1\u01aa\1\55\1\0\1\u01a9\1\0"+
    "\4\u01a9\15\0\1\63\2\u01bc\12\63\1\u01bd\1\122\1\100"+
    "\1\u01bc\1\63\4\u01bc\10\63\1\65\5\63\2\u01bc\12\63"+
    "\1\u01bd\1\63\1\100\1\u01bc\1\63\4\u01bc\15\63\1\0"+
    "\2\u01be\12\0\1\u01bf\1\105\1\0\1\u01be\1\0\4\u01be"+
    "\10\0\1\52\5\0\2\u01be\12\0\1\u01bf\2\0\1\u01be"+
    "\1\0\4\u01be\15\0\1\111\2\u01c0\12\111\1\u01c1\1\145"+
    "\1\111\1\u01c0\1\111\4\u01c0\10\111\1\115\5\111\2\u01c0"+
    "\12\111\1\u01c2\2\111\1\u01c0\1\111\4\u01c0\15\111\1\0"+
    "\2\u01b0\12\0\1\u01b1\1\55\1\0\1\u01b0\1\0\4\u01b0"+
    "\15\0\1\63\2\u01c3\12\63\1\u01c4\1\122\1\100\1\u01c3"+
    "\1\63\4\u01c3\10\63\1\65\5\63\2\u01c3\12\63\1\u01c4"+
    "\1\63\1\100\1\u01c3\1\63\4\u01c3\15\63\1\0\2\u01c5"+
    "\12\0\1\u01c6\1\105\1\0\1\u01c5\1\0\4\u01c5\10\0"+
    "\1\52\5\0\2\u01c5\12\0\1\u01c6\2\0\1\u01c5\1\0"+
    "\4\u01c5\15\0\1\111\2\u01c7\12\111\1\u01c8\1\145\1\111"+
    "\1\u01c7\1\111\4\u01c7\10\111\1\115\5\111\2\u01c7\12\111"+
    "\1\u01c9\2\111\1\u01c7\1\111\4\u01c7\15\111\1\0\2\u01b7"+
    "\12\0\1\u01b8\1\55\1\0\1\u01b7\1\0\4\u01b7\15\0"+
    "\1\63\2\u01ca\12\63\1\u01cb\1\122\1\100\1\u01ca\1\63"+
    "\4\u01ca\10\63\1\65\5\63\2\u01ca\12\63\1\u01cb\1\63"+
    "\1\100\1\u01ca\1\63\4\u01ca\15\63\1\0\2\u01cc\12\0"+
    "\1\u01cd\1\105\1\0\1\u01cc\1\0\4\u01cc\10\0\1\52"+
    "\5\0\2\u01cc\12\0\1\u01cd\2\0\1\u01cc\1\0\4\u01cc"+
    "\15\0\1\111\2\u01ce\12\111\1\u01cf\1\145\1\111\1\u01ce"+
    "\1\111\4\u01ce\10\111\1\115\5\111\2\u01ce\12\111\1\u01d0"+
    "\2\111\1\u01ce\1\111\4\u01ce\15\111\1\0\2\u01be\12\0"+
    "\1\u01bf\1\55\1\0\1\u01be\1\0\4\u01be\15\0\1\63"+
    "\2\u01d1\12\63\1\u01d2\1\122\1\100\1\u01d1\1\63\4\u01d1"+
    "\10\63\1\65\5\63\2\u01d1\12\63\1\u01d2\1\63\1\100"+
    "\1\u01d1\1\63\4\u01d1\15\63\1\0\2\u01d3\12\0\1\u01d4"+
    "\1\105\1\0\1\u01d3\1\0\4\u01d3\10\0\1\52\5\0"+
    "\2\u01d3\12\0\1\u01d4\2\0\1\u01d3\1\0\4\u01d3\15\0"+
    "\1\111\2\u01d5\12\111\1\u01d6\1\145\1\111\1\u01d5\1\111"+
    "\4\u01d5\10\111\1\115\5\111\2\u01d5\12\111\1\u01d7\2\111"+
    "\1\u01d5\1\111\4\u01d5\15\111\1\0\2\u01c5\12\0\1\u01c6"+
    "\1\55\1\0\1\u01c5\1\0\4\u01c5\15\0\1\63\2\u01d8"+
    "\12\63\1\u01d9\1\122\1\100\1\u01d8\1\63\4\u01d8\10\63"+
    "\1\65\5\63\2\u01d8\12\63\1\u01d9\1\63\1\100\1\u01d8"+
    "\1\63\4\u01d8\15\63\1\0\2\u01da\12\0\1\u01db\1\105"+
    "\1\0\1\u01da\1\0\4\u01da\10\0\1\52\5\0\2\u01da"+
    "\12\0\1\u01db\2\0\1\u01da\1\0\4\u01da\15\0\1\111"+
    "\2\u01dc\12\111\1\u01dd\1\145\1\111\1\u01dc\1\111\4\u01dc"+
    "\10\111\1\115\5\111\2\u01dc\12\111\1\u01de\2\111\1\u01dc"+
    "\1\111\4\u01dc\15\111\1\0\2\u01cc\12\0\1\u01cd\1\55"+
    "\1\0\1\u01cc\1\0\4\u01cc\15\0\1\63\2\u01df\12\63"+
    "\1\u01e0\1\122\1\100\1\u01df\1\63\4\u01df\10\63\1\65"+
    "\5\63\2\u01df\12\63\1\u01e0\1\63\1\100\1\u01df\1\63"+
    "\4\u01df\15\63\1\0\2\u01e1\12\0\1\u01e2\1\105\1\0"+
    "\1\u01e1\1\0\4\u01e1\10\0\1\52\5\0\2\u01e1\12\0"+
    "\1\u01e2\2\0\1\u01e1\1\0\4\u01e1\15\0\1\111\2\u01e3"+
    "\12\111\1\u01e4\1\145\1\111\1\u01e3\1\111\4\u01e3\10\111"+
    "\1\115\5\111\2\u01e3\12\111\1\u01e5\2\111\1\u01e3\1\111"+
    "\4\u01e3\15\111\1\0\2\u01d3\12\0\1\u01d4\1\55\1\0"+
    "\1\u01d3\1\0\4\u01d3\15\0\1\63\2\u01e6\12\63\1\u01e7"+
    "\1\122\1\100\1\u01e6\1\63\4\u01e6\10\63\1\65\5\63"+
    "\2\u01e6\12\63\1\u01e7\1\63\1\100\1\u01e6\1\63\4\u01e6"+
    "\15\63\1\0\2\u01e8\12\0\1\u01e9\1\105\1\0\1\u01e8"+
    "\1\0\4\u01e8\10\0\1\52\5\0\2\u01e8\12\0\1\u01e9"+
    "\2\0\1\u01e8\1\0\4\u01e8\15\0\1\111\2\u01ea\12\111"+
    "\1\u01eb\1\145\1\111\1\u01ea\1\111\4\u01ea\10\111\1\115"+
    "\5\111\2\u01ea\12\111\1\u01ec\2\111\1\u01ea\1\111\4\u01ea"+
    "\15\111\1\0\2\u01da\12\0\1\u01db\1\55\1\0\1\u01da"+
    "\1\0\4\u01da\15\0\1\63\2\u01ed\12\63\1\u01ee\1\122"+
    "\1\100\1\u01ed\1\63\4\u01ed\10\63\1\65\5\63\2\u01ed"+
    "\12\63\1\u01ee\1\63\1\100\1\u01ed\1\63\4\u01ed\15\63"+
    "\1\0\2\u01ef\12\0\1\u01f0\1\105\1\0\1\u01ef\1\0"+
    "\4\u01ef\10\0\1\52\5\0\2\u01ef\12\0\1\u01f0\2\0"+
    "\1\u01ef\1\0\4\u01ef\15\0\1\111\2\u01f1\12\111\1\u01f2"+
    "\1\145\1\111\1\u01f1\1\111\4\u01f1\10\111\1\115\5\111"+
    "\2\u01f1\12\111\1\u01f3\2\111\1\u01f1\1\111\4\u01f1\15\111"+
    "\1\0\2\u01e1\12\0\1\u01e2\1\55\1\0\1\u01e1\1\0"+
    "\4\u01e1\15\0\1\63\2\u01f4\12\63\1\u01f5\1\122\1\100"+
    "\1\u01f4\1\63\4\u01f4\10\63\1\65\5\63\2\u01f4\12\63"+
    "\1\u01f5\1\63\1\100\1\u01f4\1\63\4\u01f4\15\63\1\0"+
    "\2\u01f6\12\0\1\u01f7\1\105\1\0\1\u01f6\1\0\4\u01f6"+
    "\10\0\1\52\5\0\2\u01f6\12\0\1\u01f7\2\0\1\u01f6"+
    "\1\0\4\u01f6\15\0\1\111\2\u01f8\12\111\1\u01f9\1\145"+
    "\1\111\1\u01f8\1\111\4\u01f8\10\111\1\115\5\111\2\u01f8"+
    "\12\111\1\u01fa\2\111\1\u01f8\1\111\4\u01f8\15\111\1\0"+
    "\2\u01e8\12\0\1\u01e9\1\55\1\0\1\u01e8\1\0\4\u01e8"+
    "\15\0\1\63\2\u01fb\12\63\1\u01fc\1\122\1\100\1\u01fb"+
    "\1\63\4\u01fb\10\63\1\65\5\63\2\u01fb\12\63\1\u01fc"+
    "\1\63\1\100\1\u01fb\1\63\4\u01fb\15\63\1\0\2\u01fd"+
    "\12\0\1\u01fe\1\105\1\0\1\u01fd\1\0\4\u01fd\10\0"+
    "\1\52\5\0\2\u01fd\12\0\1\u01fe\2\0\1\u01fd\1\0"+
    "\4\u01fd\15\0\1\111\2\u01ff\12\111\1\u0200\1\145\1\111"+
    "\1\u01ff\1\111\4\u01ff\10\111\1\115\5\111\2\u01ff\12\111"+
    "\1\u0201\2\111\1\u01ff\1\111\4\u01ff\15\111\1\0\2\u01ef"+
    "\12\0\1\u01f0\1\55\1\0\1\u01ef\1\0\4\u01ef\15\0"+
    "\1\63\2\u0202\12\63\1\u0203\1\122\1\100\1\u0202\1\63"+
    "\4\u0202\10\63\1\65\5\63\2\u0202\12\63\1\u0203\1\63"+
    "\1\100\1\u0202\1\63\4\u0202\15\63\1\0\2\u0204\12\0"+
    "\1\u0205\1\105\1\0\1\u0204\1\0\4\u0204\10\0\1\52"+
    "\5\0\2\u0204\12\0\1\u0205\2\0\1\u0204\1\0\4\u0204"+
    "\15\0\1\111\2\u0206\12\111\1\u0207\1\145\1\111\1\u0206"+
    "\1\111\4\u0206\10\111\1\115\5\111\2\u0206\12\111\1\u0208"+
    "\2\111\1\u0206\1\111\4\u0206\15\111\1\0\2\u01f6\12\0"+
    "\1\u01f7\1\55\1\0\1\u01f6\1\0\4\u01f6\15\0\1\63"+
    "\2\u0209\12\63\1\u020a\1\122\1\100\1\u0209\1\63\4\u0209"+
    "\10\63\1\65\5\63\2\u0209\12\63\1\u020a\1\63\1\100"+
    "\1\u0209\1\63\4\u0209\15\63\1\0\2\u020b\12\0\1\u020c"+
    "\1\105\1\0\1\u020b\1\0\4\u020b\10\0\1\52\5\0"+
    "\2\u020b\12\0\1\u020c\2\0\1\u020b\1\0\4\u020b\15\0"+
    "\1\111\2\u020d\12\111\1\u020e\1\145\1\111\1\u020d\1\111"+
    "\4\u020d\10\111\1\115\5\111\2\u020d\12\111\1\u020f\2\111"+
    "\1\u020d\1\111\4\u020d\15\111\1\0\2\u01fd\12\0\1\u01fe"+
    "\1\55\1\0\1\u01fd\1\0\4\u01fd\15\0\1\63\2\u0210"+
    "\12\63\1\u0211\1\122\1\100\1\u0210\1\63\4\u0210\10\63"+
    "\1\65\5\63\2\u0210\12\63\1\u0211\1\63\1\100\1\u0210"+
    "\1\63\4\u0210\15\63\1\0\2\u0212\12\0\1\u0213\1\105"+
    "\1\0\1\u0212\1\0\4\u0212\10\0\1\52\5\0\2\u0212"+
    "\12\0\1\u0213\2\0\1\u0212\1\0\4\u0212\15\0\1\111"+
    "\2\u0214\12\111\1\u0215\1\145\1\111\1\u0214\1\111\4\u0214"+
    "\10\111\1\115\5\111\2\u0214\12\111\1\u0216\2\111\1\u0214"+
    "\1\111\4\u0214\15\111\1\0\2\u0204\12\0\1\u0205\1\55"+
    "\1\0\1\u0204\1\0\4\u0204\15\0\1\63\2\u0217\12\63"+
    "\1\u0218\1\122\1\100\1\u0217\1\63\4\u0217\10\63\1\65"+
    "\5\63\2\u0217\12\63\1\u0218\1\63\1\100\1\u0217\1\63"+
    "\4\u0217\15\63\1\0\2\u0219\12\0\1\u021a\1\105\1\0"+
    "\1\u0219\1\0\4\u0219\10\0\1\52\5\0\2\u0219\12\0"+
    "\1\u021a\2\0\1\u0219\1\0\4\u0219\15\0\1\111\2\u021b"+
    "\12\111\1\u021c\1\145\1\111\1\u021b\1\111\4\u021b\10\111"+
    "\1\115\5\111\2\u021b\12\111\1\u021d\2\111\1\u021b\1\111"+
    "\4\u021b\15\111\1\0\2\u020b\12\0\1\u020c\1\55\1\0"+
    "\1\u020b\1\0\4\u020b\15\0\1\63\2\u021e\12\63\1\u021f"+
    "\1\122\1\100\1\u021e\1\63\4\u021e\10\63\1\65\5\63"+
    "\2\u021e\12\63\1\u021f\1\63\1\100\1\u021e\1\63\4\u021e"+
    "\15\63\1\0\2\u0220\13\0\1\105\1\0\1\u0220\1\0"+
    "\4\u0220\10\0\1\52\5\0\2\u0220\15\0\1\u0220\1\0"+
    "\4\u0220\15\0\1\111\2\u0221\12\111\1\u0222\1\145\1\111"+
    "\1\u0221\1\111\4\u0221\10\111\1\115\5\111\2\u0221\12\111"+
    "\1\u0223\2\111\1\u0221\1\111\4\u0221\15\111\1\0\2\u0212"+
    "\12\0\1\u0213\1\55\1\0\1\u0212\1\0\4\u0212\15\0"+
    "\1\63\2\u0224\13\63\1\122\1\100\1\u0224\1\63\4\u0224"+
    "\10\63\1\65\5\63\2\u0224\14\63\1\100\1\u0224\1\63"+
    "\4\u0224\15\63\16\0\1\105\17\0\1\52\4\0\1\111"+
    "\2\u0225\12\111\1\u0226\1\145\1\111\1\u0225\1\111\4\u0225"+
    "\10\111\1\115\5\111\2\u0225\12\111\1\u0227\2\111\1\u0225"+
    "\1\111\4\u0225\15\111\1\0\2\u0219\12\0\1\u021a\1\55"+
    "\1\0\1\u0219\1\0\4\u0219\15\0\16\63\1\122\1\100"+
    "\16\63\1\65\4\63\1\111\2\u0228\12\111\1\130\1\145"+
    "\1\111\1\u0228\1\111\4\u0228\10\111\1\115\5\111\2\u0228"+
    "\12\111\1\73\2\111\1\u0228\1\111\4\u0228\15\111\1\0"+
    "\2\u0220\13\0\1\55\1\0\1\u0220\1\0\4\u0220\15\0"+
    "\15\111\1\130\1\145\17\111\1\115\4\111";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18410];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\2\1\2\11\3\1\1\11\2\1\3\11"+
    "\1\1\1\11\4\1\1\0\1\1\2\0\1\11\1\1"+
    "\1\11\1\1\7\0\2\1\3\0\1\11\12\0\1\1"+
    "\14\0\1\11\2\0\1\11\3\0\1\1\5\0\1\1"+
    "\22\0\1\1\20\0\1\1\2\0\1\1\74\0\1\1"+
    "\u0172\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[552];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private static class Token extends MarkdownTokenTypes {}

  private Stack<Integer> stateStack = new Stack<Integer>();

  private boolean isHeader = false;

  private ParseDelimited parseDelimited = new ParseDelimited();

  private static class ParseDelimited {
    char exitChar = 0;
    IElementType returnType = null;
    boolean inlinesAllowed = true;
  }

  private static class LinkDef {
    boolean wasUrl;
    boolean wasParen;
  }

  private static class HtmlHelper {
    private static final String BLOCK_TAGS_STRING =
            "article, header, aside, hgroup, blockquote, hr, iframe, body, li, map, button, " +
            "object, canvas, ol, caption, output, col, p, colgroup, pre, dd, progress, div, " +
            "section, dl, table, td, dt, tbody, embed, textarea, fieldset, tfoot, figcaption, " +
            "th, figure, thead, footer, footer, tr, form, ul, h1, h2, h3, h4, h5, h6, video, " +
            "script, style";

    static final Set<String> BLOCK_TAGS = getBlockTagsSet();

    private static Set<String> getBlockTagsSet() {
      Set<String> result = new HashSet<String>();
      String[] tags = BLOCK_TAGS_STRING.split(", ");
      for (String tag : tags) {
        result.add(tag);
      }
      return result;
    }
  }

  private static IElementType getDelimiterTokenType(char c) {
    switch (c) {
      case '"': return Token.DOUBLE_QUOTE;
      case '\'': return Token.SINGLE_QUOTE;
      case '(': return Token.LPAREN;
      case ')': return Token.RPAREN;
      case '[': return Token.LBRACKET;
      case ']': return Token.RBRACKET;
      case '<': return Token.LT;
      case '>': return Token.GT;
      default: return Token.BAD_CHARACTER;
    }
  }

  private IElementType parseDelimited(IElementType contentsType, boolean allowInlines) {
    char first = yycharat(0);
    char last = yycharat(yylength() - 1);

    stateStack.push(yystate());

    parseDelimited.exitChar = last;
    parseDelimited.returnType = contentsType;
//    parseDelimited.inlinesAllowed = allowInlines;
    parseDelimited.inlinesAllowed = true;

    yybegin(PARSE_DELIMITED);

    yypushback(yylength() - 1);
    return getDelimiterTokenType(first);
  }

  private void processEol() {
    int newlinePos = 1;
    while (newlinePos < yylength() && yycharat(newlinePos) != '\n') {
      newlinePos++;
    }

    // there is always one at 0 so that means there are two at least
    if (newlinePos != yylength()) {
      yypushback(yylength() - newlinePos);
      return;
    }

    yybegin(YYINITIAL);
    yypushback(yylength() - 1);

    isHeader = false;
  }

  private void popState() {
    if (stateStack.isEmpty()) {
      yybegin(AFTER_LINE_START);
    }
    else {
      yybegin(stateStack.pop());
    }
  }

  private void resetState() {
    yypushback(yylength());

    popState();
  }

  private String getTagName() {
    if (yylength() > 1 && yycharat(1) == '/') {
      return yytext().toString().substring(2, yylength() - 1).trim();
    }
    return yytext().toString().substring(1);
  }

  private boolean isBlockTag(String tagName) {
    return HtmlHelper.BLOCK_TAGS.contains(tagName.toLowerCase());
  }

  private boolean canInline() {
    return yystate() == AFTER_LINE_START || yystate() == PARSE_DELIMITED && parseDelimited.inlinesAllowed;
  }

  private IElementType getReturnGeneralized(IElementType defaultType) {
    if (canInline()) {
      return defaultType;
    }
    return parseDelimited.returnType;
  }

  private int countChars(CharSequence s, char c) {
    int result = 0;
    for (int i = 0; i < s.length(); ++i) {
      if (s.charAt(i) == c)
        result++;
    }
    return result;
  }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _MarkdownLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { resetState();
            }
          case 18: break;
          case 2: 
            { return Token.BLOCK_QUOTE;
            }
          case 19: break;
          case 3: 
            { return Token.TEXT;
            }
          case 20: break;
          case 4: 
            { return Token.WHITE_SPACE;
            }
          case 21: break;
          case 5: 
            { int lastSpaces = yytext().toString().indexOf("\n");
    if (lastSpaces >= 2) {
      yypushback(yylength() - lastSpaces);
      return Token.HARD_LINE_BREAK;
    }
    else if (lastSpaces > 0) {
      yypushback(yylength() - lastSpaces);
      return Token.WHITE_SPACE;
    }

    processEol();
    return Token.EOL;
            }
          case 22: break;
          case 6: 
            { return getDelimiterTokenType(yycharat(0));
            }
          case 23: break;
          case 7: 
            { return Token.EXCLAMATION_MARK;
            }
          case 24: break;
          case 8: 
            { return Token.COLON;
            }
          case 25: break;
          case 9: 
            { return getReturnGeneralized(Token.EMPH);
            }
          case 26: break;
          case 10: 
            { if (canInline()) {
      return Token.BACKTICK;
    }
    return parseDelimited.returnType;
            }
          case 27: break;
          case 11: 
            { if (yycharat(0) == parseDelimited.exitChar) {
      yybegin(stateStack.pop());
      return getDelimiterTokenType(yycharat(0));
    }
    return parseDelimited.returnType;
            }
          case 28: break;
          case 12: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { return Token.HARD_LINE_BREAK;
            }
          case 29: break;
          case 13: 
            { return getReturnGeneralized(Token.TEXT);
            }
          case 30: break;
          case 14: 
            { return getReturnGeneralized(Token.ESCAPED_BACKTICKS);
            }
          case 31: break;
          case 15: 
            { return Token.HTML_TAG;
            }
          case 32: break;
          case 16: 
            { return parseDelimited(Token.EMAIL_AUTOLINK, false);
            }
          case 33: break;
          case 17: 
            { return parseDelimited(Token.AUTOLINK, false);
            }
          case 34: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
