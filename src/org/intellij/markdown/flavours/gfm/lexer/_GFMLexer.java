/* The following code was generated by JFlex 1.4.3 on 9/9/15 2:19 PM */

package org.intellij.markdown.flavours.gfm.lexer;

import org.intellij.markdown.IElementType;
import org.intellij.markdown.MarkdownTokenTypes;
import org.intellij.markdown.flavours.gfm.GFMTokenTypes;
import org.intellij.markdown.lexer.GeneratedLexer;

import java.util.HashSet;
import java.util.Set;
import java.util.Stack;

/* Auto generated File */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/9/15 2:19 PM from the specification file
 * <tt>/Users/valich/work/intellij-markdown/src/org/intellij/markdown/flavours/gfm/lexer/gfm.flex</tt>
 */
public class _GFMLexer implements GeneratedLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int CODE = 8;
  public static final int AFTER_LINE_START = 4;
  public static final int TAG_START = 2;
  public static final int YYINITIAL = 0;
  public static final int PARSE_DELIMITED = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\4\1\0\1\3\1\5\22\0\1\3\1\12\1\6"+
    "\1\44\1\46\2\44\1\10\1\45\1\45\1\47\1\44\1\43\1\13"+
    "\1\34\1\31\12\1\1\25\1\0\1\11\1\30\1\14\1\15\1\33"+
    "\1\22\1\16\1\20\1\21\17\16\1\23\6\16\1\17\1\7\1\24"+
    "\1\32\1\26\1\27\5\2\1\41\1\2\1\35\7\2\1\37\2\2"+
    "\1\40\1\36\2\2\1\42\3\2\1\46\1\32\1\46\1\50\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\3\1\1\2\2\3\1\4\1\5\1\6\1\3"+
    "\1\6\1\7\1\10\1\11\1\12\3\3\1\13\4\14"+
    "\3\0\1\15\1\16\5\0\3\3\2\0\1\15\3\0"+
    "\1\17\11\0\3\3\13\0\1\3\4\0\1\20\2\0"+
    "\1\21\3\0\1\17\5\0\1\20\25\0\1\20\16\0"+
    "\1\22\3\0\1\17\2\0\1\17\7\0\2\22\12\0"+
    "\2\22\14\0\1\22\14\0\1\22\23\0\1\17\u0172\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[570];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\244"+
    "\0\244\0\u011f\0\u0148\0\u0171\0\244\0\u019a\0\u01c3\0\244"+
    "\0\244\0\244\0\u01ec\0\u0215\0\u023e\0\u0267\0\244\0\244"+
    "\0\u0290\0\u019a\0\u01c3\0\u02b9\0\u011f\0\u02e2\0\244\0\u030b"+
    "\0\u0334\0\u035d\0\u0386\0\u03af\0\u03d8\0\u0401\0\u042a\0\u0453"+
    "\0\u0290\0\u047c\0\u02e2\0\u04a5\0\u04ce\0\u04f7\0\244\0\u0520"+
    "\0\u0549\0\u0572\0\u059b\0\u05c4\0\u05ed\0\u0616\0\u063f\0\u0668"+
    "\0\u0691\0\u06ba\0\u06e3\0\u070c\0\u0735\0\u075e\0\u0787\0\u07b0"+
    "\0\u07d9\0\u0802\0\u082b\0\u0854\0\u087d\0\u08a6\0\u08cf\0\u08f8"+
    "\0\u0921\0\u094a\0\u0973\0\244\0\u099c\0\u09c5\0\244\0\u09ee"+
    "\0\u0a17\0\u0a40\0\u09ee\0\u0a69\0\u0a92\0\u0abb\0\u0ae4\0\u0b0d"+
    "\0\u05ed\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1\0\u0bda\0\u0c03\0\u0c2c"+
    "\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0\0\u0cf9\0\u0d22\0\u0d4b\0\u0d74"+
    "\0\u0d9d\0\u0dc6\0\u0def\0\u0e18\0\u0e41\0\u0e6a\0\u09ee\0\u0e93"+
    "\0\u0ebc\0\u0ee5\0\u0f0e\0\u0f37\0\u0f60\0\u0f89\0\u0fb2\0\u0fdb"+
    "\0\u1004\0\u102d\0\u1056\0\u107f\0\u10a8\0\u10d1\0\u10fa\0\u1123"+
    "\0\u114c\0\u0c03\0\u1175\0\u119e\0\u0c2c\0\u11c7\0\u11f0\0\u1219"+
    "\0\u1242\0\u126b\0\u1294\0\u12bd\0\u12e6\0\u130f\0\u1338\0\u1361"+
    "\0\u138a\0\u13b3\0\u13dc\0\u1405\0\u142e\0\u1457\0\u1480\0\u14a9"+
    "\0\u14d2\0\u14fb\0\u1524\0\u154d\0\u1576\0\u159f\0\u15c8\0\u15f1"+
    "\0\u161a\0\u1643\0\u166c\0\u1695\0\u16be\0\u16e7\0\u1710\0\u1739"+
    "\0\u1762\0\u178b\0\u17b4\0\u17dd\0\u1806\0\u182f\0\u1858\0\u1881"+
    "\0\u18aa\0\u18d3\0\u18fc\0\u1925\0\u194e\0\u1977\0\u19a0\0\u19c9"+
    "\0\u19f2\0\u1a1b\0\u1a44\0\u1a6d\0\u1a96\0\u1abf\0\u1ae8\0\u1b11"+
    "\0\u1b3a\0\u1b63\0\u1b8c\0\u1bb5\0\u1bde\0\u1c07\0\u1c30\0\u17dd"+
    "\0\u1c59\0\u1c82\0\u1cab\0\u1cd4\0\u1cfd\0\u1d26\0\u1d4f\0\u1d78"+
    "\0\u1da1\0\u1dca\0\u1df3\0\u1e1c\0\u1e45\0\u1e6e\0\u1e97\0\u1ec0"+
    "\0\u1ee9\0\u1f12\0\u1f3b\0\u1f64\0\u1f8d\0\u1fb6\0\u1fdf\0\u2008"+
    "\0\u2031\0\u205a\0\u2083\0\u20ac\0\u20d5\0\u20fe\0\u2127\0\u2150"+
    "\0\u2179\0\u21a2\0\u21cb\0\u21f4\0\u221d\0\u2246\0\u226f\0\u2298"+
    "\0\u22c1\0\u22ea\0\u2313\0\u233c\0\u2365\0\u238e\0\u23b7\0\u23e0"+
    "\0\u2409\0\u2432\0\u245b\0\u2484\0\u24ad\0\u24d6\0\u24ff\0\u2528"+
    "\0\u2551\0\u257a\0\u25a3\0\u25cc\0\u25f5\0\u261e\0\u2647\0\u2670"+
    "\0\u2699\0\u26c2\0\u26eb\0\u2714\0\u273d\0\u2766\0\u278f\0\u27b8"+
    "\0\u27e1\0\u280a\0\u2833\0\u285c\0\u2885\0\u28ae\0\u28d7\0\u2900"+
    "\0\u2929\0\u2952\0\u297b\0\u29a4\0\u29cd\0\u29f6\0\u2a1f\0\u2a48"+
    "\0\u2a71\0\u2a9a\0\u2ac3\0\u2aec\0\u2b15\0\u2b3e\0\u2b67\0\u2b90"+
    "\0\u2bb9\0\u2be2\0\u2c0b\0\u2c34\0\u2c5d\0\u2c86\0\u2caf\0\u2cd8"+
    "\0\u2d01\0\u2d2a\0\u2d53\0\u2d7c\0\u2da5\0\u2dce\0\u2df7\0\u2e20"+
    "\0\u2e49\0\u2e72\0\u2e9b\0\u2ec4\0\u2eed\0\u2f16\0\u2f3f\0\u2f68"+
    "\0\u2f91\0\u2fba\0\u2fe3\0\u300c\0\u3035\0\u305e\0\u3087\0\u30b0"+
    "\0\u30d9\0\u3102\0\u312b\0\u3154\0\u317d\0\u31a6\0\u31cf\0\u31f8"+
    "\0\u3221\0\u324a\0\u3273\0\u329c\0\u32c5\0\u32ee\0\u3317\0\u3340"+
    "\0\u3369\0\u3392\0\u33bb\0\u33e4\0\u340d\0\u3436\0\u345f\0\u3488"+
    "\0\u34b1\0\u34da\0\u3503\0\u352c\0\u3555\0\u357e\0\u35a7\0\u35d0"+
    "\0\u35f9\0\u3622\0\u364b\0\u3674\0\u369d\0\u36c6\0\u36ef\0\u3718"+
    "\0\u3741\0\u376a\0\u3793\0\u37bc\0\u37e5\0\u380e\0\u3837\0\u3860"+
    "\0\u3889\0\u38b2\0\u38db\0\u3904\0\u392d\0\u3956\0\u397f\0\u39a8"+
    "\0\u39d1\0\u39fa\0\u3a23\0\u3a4c\0\u3a75\0\u3a9e\0\u3ac7\0\u3af0"+
    "\0\u3b19\0\u3b42\0\u3b6b\0\u3b94\0\u3bbd\0\u3be6\0\u3c0f\0\u3c38"+
    "\0\u3c61\0\u3c8a\0\u3cb3\0\u3cdc\0\u3d05\0\u3d2e\0\u3d57\0\u3d80"+
    "\0\u3da9\0\u3dd2\0\u3dfb\0\u3e24\0\u3e4d\0\u3e76\0\u3e9f\0\u3ec8"+
    "\0\u3ef1\0\u3f1a\0\u3f43\0\u3f6c\0\u3f95\0\u3fbe\0\u3fe7\0\u4010"+
    "\0\u4039\0\u4062\0\u408b\0\u40b4\0\u40dd\0\u4106\0\u412f\0\u4158"+
    "\0\u4181\0\u41aa\0\u41d3\0\u41fc\0\u4225\0\u424e\0\u4277\0\u42a0"+
    "\0\u42c9\0\u42f2\0\u431b\0\u4344\0\u436d\0\u4396\0\u43bf\0\u43e8"+
    "\0\u4411\0\u443a\0\u4463\0\u448c\0\u44b5\0\u44de\0\u4507\0\u4530"+
    "\0\u4559\0\u4582\0\u45ab\0\u45d4\0\u45fd\0\u4626\0\u464f\0\u4678"+
    "\0\u46a1\0\u46ca\0\u46f3\0\u471c\0\u4745\0\u476e\0\u4797\0\u47c0"+
    "\0\u47e9\0\u4812\0\u483b\0\u4864\0\u488d\0\u48b6\0\u48df\0\u4908"+
    "\0\u4931\0\u495a\0\u4983\0\u49ac\0\u49d5\0\u49fe\0\u4a27\0\u4a50"+
    "\0\u4a79\0\u4aa2\0\u4acb\0\u4af4\0\u4b1d\0\u4b46\0\u4b6f\0\u4b98"+
    "\0\u4bc1\0\u4bea\0\u4c13\0\u4c3c\0\u4c65\0\u4c8e\0\u4cb7\0\u4ce0"+
    "\0\u4d09\0\u4d32\0\u4d5b\0\u4d84\0\u4dad\0\u4dd6\0\u4dff\0\u4e28"+
    "\0\u4e51\0\u4e7a\0\u4ea3\0\u4ecc\0\u4ef5\0\u4f1e\0\u4f47\0\u4f70"+
    "\0\u4f99\0\u4fc2\0\u4feb\0\u5014\0\u503d\0\u5066\0\u508f\0\u50b8"+
    "\0\u50e1\0\u510a\0\u5133\0\u515c\0\u5185\0\u51ae\0\u51d7\0\u5200"+
    "\0\u5229\0\u5252\0\u527b\0\u52a4\0\u52cd\0\u52f6\0\u531f\0\u5348"+
    "\0\u5371\0\u539a\0\u53c3\0\u53ec\0\u5415\0\u543e\0\u5467\0\u5490"+
    "\0\u54b9\0\u54e2\0\u550b\0\u5534\0\u555d\0\u5586\0\u55af\0\u55d8"+
    "\0\u5601\0\u562a\0\u5653\0\u567c\0\u56a5\0\u56ce\0\u56f7\0\u5720"+
    "\0\u5749\0\u5772";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[570];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\5\1\6\1\5\1\7\6\5\1\10\34\5\4\11"+
    "\1\0\45\11\2\12\1\13\2\14\1\15\1\16\1\15"+
    "\1\17\1\20\1\11\1\15\1\11\1\12\1\15\4\12"+
    "\1\15\1\21\1\22\1\23\5\11\1\24\3\12\1\25"+
    "\1\26\2\11\1\15\1\11\1\22\1\27\3\30\1\31"+
    "\1\5\1\7\1\30\1\32\1\30\1\33\14\30\1\22"+
    "\1\23\17\30\1\22\1\27\54\0\1\34\1\5\1\7"+
    "\6\0\1\10\40\0\1\5\45\0\2\12\1\35\12\0"+
    "\1\12\1\0\4\12\11\0\6\12\11\0\1\13\2\14"+
    "\20\0\1\36\20\0\1\36\4\0\3\14\51\0\7\37"+
    "\2\0\1\37\4\0\3\37\1\40\1\0\1\37\1\0"+
    "\2\37\6\0\6\37\1\0\1\41\1\42\5\0\1\41"+
    "\1\0\1\43\1\41\1\0\1\44\1\42\1\0\4\42"+
    "\2\0\3\41\1\45\1\41\1\0\1\41\6\42\1\0"+
    "\1\41\1\0\3\41\27\0\1\23\22\0\2\12\1\35"+
    "\12\0\1\12\1\0\4\12\11\0\1\12\1\46\4\12"+
    "\7\0\2\12\1\35\12\0\1\12\1\0\4\12\11\0"+
    "\1\12\1\47\4\12\7\0\2\12\1\35\12\0\1\12"+
    "\1\0\4\12\11\0\5\12\1\50\11\0\1\51\22\0"+
    "\1\36\20\0\1\36\4\0\1\52\1\5\1\7\6\0"+
    "\1\10\37\0\1\53\74\0\1\40\22\0\2\41\5\0"+
    "\1\41\1\0\2\41\1\0\2\41\1\0\4\41\2\0"+
    "\5\41\1\54\7\41\1\0\1\41\1\0\3\41\1\0"+
    "\1\55\1\42\1\56\4\0\1\41\1\0\2\41\1\57"+
    "\1\41\1\42\1\0\4\42\1\0\1\60\3\41\1\61"+
    "\1\41\1\54\1\41\6\42\1\0\1\41\1\0\3\41"+
    "\1\0\2\41\5\0\1\41\1\0\1\41\1\62\1\0"+
    "\1\41\1\63\1\64\4\63\2\0\5\41\1\54\7\41"+
    "\1\0\1\41\1\0\3\41\1\65\2\44\5\65\1\44"+
    "\1\65\2\44\1\65\1\66\1\44\1\65\4\44\2\65"+
    "\5\44\1\67\7\44\1\65\1\44\1\65\3\44\1\0"+
    "\1\41\1\70\5\0\1\41\1\0\2\41\1\0\1\41"+
    "\1\70\1\0\4\70\2\0\5\41\1\54\1\41\6\70"+
    "\1\0\1\41\1\0\3\41\1\0\2\12\1\35\12\0"+
    "\1\12\1\0\4\12\11\0\1\12\1\71\4\12\7\0"+
    "\2\12\1\35\12\0\1\12\1\0\4\12\11\0\2\12"+
    "\1\72\3\12\7\0\2\12\1\35\12\0\1\12\1\0"+
    "\4\12\11\0\5\12\1\73\11\0\1\74\1\5\1\7"+
    "\6\0\1\10\35\0\2\75\13\0\1\75\1\0\4\75"+
    "\11\0\6\75\7\0\2\55\1\56\4\0\1\41\1\0"+
    "\2\41\1\57\1\41\1\55\1\0\4\55\2\0\3\41"+
    "\1\61\1\41\1\54\1\41\6\55\1\0\1\41\1\0"+
    "\3\41\2\0\1\76\1\56\7\0\1\76\1\57\1\0"+
    "\1\76\1\0\4\76\1\0\1\76\3\0\1\77\3\0"+
    "\6\76\6\0\3\100\2\0\4\100\1\0\2\100\1\0"+
    "\34\100\1\0\2\41\5\0\1\41\1\0\2\41\1\57"+
    "\2\41\1\0\4\41\2\0\5\41\1\54\7\41\1\0"+
    "\1\41\1\0\3\41\1\0\2\41\5\0\1\41\1\0"+
    "\1\41\1\101\1\0\2\41\1\0\4\41\2\0\5\41"+
    "\1\54\7\41\1\0\1\41\1\0\3\41\1\0\2\41"+
    "\1\102\4\0\1\41\1\0\2\41\1\0\1\41\1\63"+
    "\1\0\4\63\2\0\5\41\1\54\7\41\1\0\1\41"+
    "\1\0\3\41\20\0\1\103\30\0\15\65\1\104\34\65"+
    "\2\44\5\65\1\44\1\65\2\44\1\57\2\44\1\65"+
    "\4\44\2\65\5\44\1\67\7\44\1\65\1\44\1\65"+
    "\3\44\1\65\2\105\12\65\1\104\1\105\1\65\4\105"+
    "\11\65\6\105\6\65\1\0\2\70\1\106\4\0\1\41"+
    "\1\0\2\41\1\57\1\41\1\70\1\0\4\70\2\0"+
    "\5\41\1\54\1\41\6\70\1\0\1\41\1\0\3\41"+
    "\1\0\2\12\1\35\12\0\1\12\1\0\4\12\11\0"+
    "\2\12\1\107\3\12\7\0\2\12\1\35\12\0\1\12"+
    "\1\0\4\12\1\0\1\110\7\0\6\12\7\0\2\12"+
    "\1\35\12\0\1\12\1\0\4\12\10\0\1\111\6\12"+
    "\11\0\1\74\1\5\1\7\44\0\2\112\10\0\1\113"+
    "\1\114\1\0\1\112\1\0\4\112\10\0\1\54\6\112"+
    "\7\0\2\76\1\115\7\0\1\76\1\57\1\0\1\76"+
    "\1\0\4\76\1\0\2\76\1\0\1\116\1\77\2\0"+
    "\7\76\22\0\1\57\34\0\3\100\2\0\4\100\1\0"+
    "\2\100\1\117\34\100\1\120\2\121\5\120\1\121\1\120"+
    "\1\121\1\122\1\123\2\121\1\120\4\121\2\120\5\121"+
    "\1\124\7\121\1\120\1\121\1\120\3\121\3\77\1\125"+
    "\10\77\1\0\34\77\21\0\1\126\27\0\14\65\1\57"+
    "\35\65\2\127\10\65\1\130\1\131\1\104\1\127\1\65"+
    "\4\127\10\65\1\67\6\127\6\65\3\0\1\106\10\0"+
    "\1\57\35\0\2\12\1\35\12\0\1\12\1\0\4\12"+
    "\1\0\1\110\7\0\3\12\1\72\2\12\37\0\1\132"+
    "\20\0\2\133\13\0\1\133\1\0\4\133\11\0\6\133"+
    "\7\0\2\134\10\0\1\135\1\114\1\0\1\134\1\0"+
    "\4\134\10\0\1\54\6\134\7\0\2\134\10\0\1\135"+
    "\2\0\1\134\1\0\4\134\11\0\6\134\10\0\1\76"+
    "\1\115\7\0\1\76\1\57\1\0\1\76\1\0\4\76"+
    "\1\0\1\76\2\0\1\116\1\77\3\0\6\76\6\0"+
    "\3\136\1\116\2\0\1\137\1\136\1\140\1\0\2\136"+
    "\1\0\12\136\2\0\20\136\13\120\1\141\36\120\2\121"+
    "\5\120\1\121\1\120\1\121\1\142\1\120\2\121\1\120"+
    "\4\121\2\120\5\121\1\124\7\121\1\120\1\121\1\120"+
    "\3\121\1\120\2\121\5\120\1\121\1\120\1\121\1\61"+
    "\1\123\2\121\1\120\4\121\2\120\5\121\1\124\7\121"+
    "\1\120\1\121\1\120\3\121\1\120\2\143\10\120\1\141"+
    "\2\120\1\143\1\120\4\143\11\120\6\143\6\120\3\77"+
    "\1\125\10\77\1\57\34\77\22\0\1\144\26\0\1\65"+
    "\2\145\10\65\1\146\1\131\1\104\1\145\1\65\4\145"+
    "\10\65\1\67\6\145\7\65\2\145\10\65\1\146\1\65"+
    "\1\104\1\145\1\65\4\145\11\65\6\145\6\65\31\0"+
    "\1\111\20\0\2\133\13\0\1\133\1\0\4\133\10\0"+
    "\1\147\6\133\7\0\2\150\10\0\1\151\1\114\1\0"+
    "\1\150\1\0\4\150\10\0\1\54\6\150\7\0\2\150"+
    "\10\0\1\151\2\0\1\150\1\0\4\150\11\0\6\150"+
    "\6\0\3\136\1\56\3\0\1\136\2\0\2\136\1\57"+
    "\12\136\2\0\20\136\4\137\1\0\1\137\1\152\1\153"+
    "\41\137\4\140\1\0\2\140\1\154\1\152\40\140\13\120"+
    "\1\77\36\120\2\121\5\120\1\121\1\120\1\121\1\61"+
    "\1\120\2\121\1\120\4\121\2\120\5\121\1\124\7\121"+
    "\1\120\1\121\1\120\3\121\1\120\2\155\10\120\1\156"+
    "\1\157\1\120\1\155\1\120\4\155\10\120\1\124\6\155"+
    "\6\120\23\0\1\160\25\0\1\65\2\161\10\65\1\162"+
    "\1\131\1\104\1\161\1\65\4\161\10\65\1\67\6\161"+
    "\7\65\2\161\10\65\1\162\1\65\1\104\1\161\1\65"+
    "\4\161\11\65\6\161\6\65\1\0\1\133\1\163\13\0"+
    "\1\163\1\0\4\163\11\0\6\163\7\0\2\164\10\0"+
    "\1\165\1\114\1\0\1\164\1\0\4\164\10\0\1\54"+
    "\6\164\7\0\2\164\10\0\1\165\2\0\1\164\1\0"+
    "\4\164\11\0\6\164\11\0\1\56\10\0\1\57\14\0"+
    "\1\77\17\0\4\137\1\0\1\137\1\166\1\153\41\137"+
    "\4\140\1\0\2\140\1\154\1\167\40\140\1\120\2\170"+
    "\10\120\1\171\1\157\1\120\1\170\1\120\4\170\10\120"+
    "\1\124\6\170\7\120\2\170\10\120\1\172\2\120\1\170"+
    "\1\120\4\170\11\120\6\170\6\120\22\0\1\173\26\0"+
    "\1\65\2\174\10\65\1\175\1\131\1\104\1\174\1\65"+
    "\4\174\10\65\1\67\6\174\7\65\2\174\10\65\1\175"+
    "\1\65\1\104\1\174\1\65\4\174\11\65\6\174\6\65"+
    "\1\0\1\133\1\176\13\0\1\176\1\0\4\176\10\0"+
    "\1\147\6\176\7\0\2\177\10\0\1\200\1\114\1\0"+
    "\1\177\1\0\4\177\10\0\1\54\6\177\7\0\2\177"+
    "\10\0\1\200\2\0\1\177\1\0\4\177\11\0\6\177"+
    "\6\0\3\137\1\201\1\0\1\137\1\152\1\153\4\137"+
    "\1\202\14\137\1\203\17\137\3\140\1\204\1\0\2\140"+
    "\1\154\1\152\3\140\1\205\14\140\1\206\17\140\1\120"+
    "\2\207\10\120\1\210\1\157\1\120\1\207\1\120\4\207"+
    "\10\120\1\124\6\207\7\120\2\207\10\120\1\211\2\120"+
    "\1\207\1\120\4\207\11\120\6\207\6\120\1\0\2\150"+
    "\10\0\1\151\1\57\1\0\1\150\1\0\4\150\11\0"+
    "\6\150\25\0\1\212\31\0\1\65\2\213\10\65\1\214"+
    "\1\131\1\104\1\213\1\65\4\213\10\65\1\67\6\213"+
    "\7\65\2\213\10\65\1\214\1\65\1\104\1\213\1\65"+
    "\4\213\11\65\6\213\6\65\1\0\1\133\1\215\13\0"+
    "\1\215\1\0\4\215\5\0\1\216\2\0\1\147\6\215"+
    "\7\0\2\217\10\0\1\220\1\114\1\0\1\217\1\0"+
    "\4\217\10\0\1\54\6\217\7\0\2\217\10\0\1\220"+
    "\2\0\1\217\1\0\4\217\11\0\6\217\6\0\2\137"+
    "\1\221\1\201\1\0\1\137\1\152\1\153\3\137\1\221"+
    "\1\202\1\137\1\221\1\137\4\221\1\137\1\221\3\137"+
    "\1\203\3\137\6\221\12\137\1\0\1\137\1\152\1\153"+
    "\4\137\1\202\34\137\2\140\1\222\1\204\1\0\2\140"+
    "\1\154\1\152\2\140\1\222\1\205\1\140\1\222\1\140"+
    "\4\222\1\140\1\222\3\140\1\206\3\140\6\222\12\140"+
    "\1\0\2\140\1\154\1\152\3\140\1\205\34\140\1\120"+
    "\2\223\10\120\1\224\1\157\1\120\1\223\1\120\4\223"+
    "\10\120\1\124\6\223\7\120\2\223\10\120\1\225\2\120"+
    "\1\223\1\120\4\223\11\120\6\223\6\120\1\0\2\164"+
    "\10\0\1\165\1\57\1\0\1\164\1\0\4\164\11\0"+
    "\6\164\6\0\24\212\1\226\24\212\1\65\2\227\10\65"+
    "\1\230\1\131\1\104\1\227\1\65\4\227\10\65\1\67"+
    "\6\227\7\65\2\227\10\65\1\230\1\65\1\104\1\227"+
    "\1\65\4\227\11\65\6\227\6\65\1\0\1\133\1\231"+
    "\13\0\1\231\1\0\4\231\5\0\1\216\2\0\1\147"+
    "\6\231\7\0\2\232\10\0\1\232\1\0\2\232\1\0"+
    "\4\232\2\0\1\232\1\0\1\232\3\0\11\232\5\0"+
    "\2\233\10\0\1\234\1\114\1\0\1\233\1\0\4\233"+
    "\10\0\1\54\6\233\7\0\2\233\10\0\1\234\2\0"+
    "\1\233\1\0\4\233\11\0\6\233\6\0\1\137\2\221"+
    "\1\235\1\0\1\137\1\152\1\153\3\137\1\221\1\202"+
    "\1\137\1\221\1\137\4\221\1\137\2\221\1\137\1\236"+
    "\1\203\2\137\7\221\6\137\1\140\2\222\1\237\1\0"+
    "\2\140\1\154\1\152\2\140\1\222\1\205\1\140\1\222"+
    "\1\140\4\222\1\140\2\222\1\140\1\240\1\206\2\140"+
    "\7\222\6\140\1\120\2\241\10\120\1\242\1\157\1\120"+
    "\1\241\1\120\4\241\10\120\1\124\6\241\7\120\2\241"+
    "\10\120\1\243\2\120\1\241\1\120\4\241\11\120\6\241"+
    "\6\120\1\0\2\177\10\0\1\200\1\57\1\0\1\177"+
    "\1\0\4\177\11\0\6\177\6\0\24\212\1\244\24\212"+
    "\1\65\2\245\10\65\1\246\1\131\1\104\1\245\1\65"+
    "\4\245\10\65\1\67\6\245\7\65\2\245\10\65\1\246"+
    "\1\65\1\104\1\245\1\65\4\245\11\65\6\245\6\65"+
    "\1\0\1\133\1\247\13\0\1\247\1\0\4\247\5\0"+
    "\1\216\2\0\1\147\6\247\7\0\2\232\10\0\1\232"+
    "\1\0\2\232\1\0\4\232\2\0\1\232\1\0\1\232"+
    "\1\216\2\0\11\232\5\0\2\250\10\0\1\251\1\114"+
    "\1\0\1\250\1\0\4\250\10\0\1\54\6\250\7\0"+
    "\2\250\10\0\1\251\2\0\1\250\1\0\4\250\11\0"+
    "\6\250\6\0\2\137\1\221\1\235\1\0\1\137\1\152"+
    "\1\153\3\137\1\221\1\202\1\137\1\221\1\137\4\221"+
    "\1\137\1\221\2\137\1\236\1\203\3\137\6\221\6\137"+
    "\3\252\1\236\1\0\1\137\1\166\1\253\1\254\1\137"+
    "\2\252\1\137\12\252\2\137\20\252\2\140\1\222\1\237"+
    "\1\0\2\140\1\154\1\152\2\140\1\222\1\205\1\140"+
    "\1\222\1\140\4\222\1\140\1\222\2\140\1\240\1\206"+
    "\3\140\6\222\6\140\3\255\1\240\1\0\1\140\1\254"+
    "\1\256\1\167\1\140\2\255\1\140\12\255\2\140\20\255"+
    "\1\120\2\257\10\120\1\260\1\157\1\120\1\257\1\120"+
    "\4\257\10\120\1\124\6\257\7\120\2\257\10\120\1\261"+
    "\2\120\1\257\1\120\4\257\11\120\6\257\6\120\1\0"+
    "\2\217\10\0\1\220\1\57\1\0\1\217\1\0\4\217"+
    "\11\0\6\217\6\0\14\212\1\57\34\212\1\65\2\262"+
    "\10\65\1\263\1\131\1\104\1\262\1\65\4\262\10\65"+
    "\1\67\6\262\7\65\2\262\10\65\1\263\1\65\1\104"+
    "\1\262\1\65\4\262\11\65\6\262\6\65\1\0\1\133"+
    "\1\264\13\0\1\264\1\0\4\264\5\0\1\216\2\0"+
    "\1\147\6\264\7\0\2\265\10\0\1\266\1\114\1\0"+
    "\1\265\1\0\4\265\10\0\1\54\6\265\7\0\2\265"+
    "\10\0\1\266\2\0\1\265\1\0\4\265\11\0\6\265"+
    "\6\0\3\252\1\201\1\0\1\137\1\152\1\253\2\137"+
    "\2\252\1\202\12\252\2\137\23\252\1\201\1\0\1\137"+
    "\1\166\1\253\2\137\2\252\1\202\12\252\2\137\20\252"+
    "\4\254\1\0\1\254\1\167\1\267\1\166\40\254\3\255"+
    "\1\204\1\0\2\140\1\256\1\152\1\140\2\255\1\205"+
    "\12\255\2\140\23\255\1\204\1\0\2\140\1\256\1\167"+
    "\1\140\2\255\1\205\12\255\2\140\20\255\1\120\2\270"+
    "\10\120\1\271\1\157\1\120\1\270\1\120\4\270\10\120"+
    "\1\124\6\270\7\120\2\270\10\120\1\272\2\120\1\270"+
    "\1\120\4\270\11\120\6\270\6\120\1\0\2\233\10\0"+
    "\1\234\1\57\1\0\1\233\1\0\4\233\11\0\6\233"+
    "\6\0\1\65\2\273\10\65\1\274\1\131\1\104\1\273"+
    "\1\65\4\273\10\65\1\67\6\273\7\65\2\273\10\65"+
    "\1\274\1\65\1\104\1\273\1\65\4\273\11\65\6\273"+
    "\6\65\1\0\2\133\13\0\1\133\1\0\4\133\5\0"+
    "\1\216\2\0\1\147\6\133\7\0\2\275\10\0\1\276"+
    "\1\114\1\0\1\275\1\0\4\275\10\0\1\54\6\275"+
    "\7\0\2\275\10\0\1\276\2\0\1\275\1\0\4\275"+
    "\11\0\6\275\6\0\4\254\1\0\1\254\1\277\1\267"+
    "\1\277\40\254\1\120\2\300\10\120\1\301\1\157\1\120"+
    "\1\300\1\120\4\300\10\120\1\124\6\300\7\120\2\300"+
    "\10\120\1\302\2\120\1\300\1\120\4\300\11\120\6\300"+
    "\6\120\1\0\2\250\10\0\1\251\1\57\1\0\1\250"+
    "\1\0\4\250\11\0\6\250\6\0\1\65\2\303\10\65"+
    "\1\304\1\131\1\104\1\303\1\65\4\303\10\65\1\67"+
    "\6\303\7\65\2\303\10\65\1\304\1\65\1\104\1\303"+
    "\1\65\4\303\11\65\6\303\6\65\1\0\2\305\10\0"+
    "\1\306\1\114\1\0\1\305\1\0\4\305\10\0\1\54"+
    "\6\305\7\0\2\305\10\0\1\306\2\0\1\305\1\0"+
    "\4\305\11\0\6\305\6\0\3\254\1\307\1\0\1\254"+
    "\1\167\1\267\1\166\3\254\1\310\14\254\1\311\17\254"+
    "\1\120\2\312\10\120\1\313\1\157\1\120\1\312\1\120"+
    "\4\312\10\120\1\124\6\312\7\120\2\312\10\120\1\314"+
    "\2\120\1\312\1\120\4\312\11\120\6\312\6\120\1\0"+
    "\2\265\10\0\1\266\1\57\1\0\1\265\1\0\4\265"+
    "\11\0\6\265\6\0\1\65\2\315\10\65\1\316\1\131"+
    "\1\104\1\315\1\65\4\315\10\65\1\67\6\315\7\65"+
    "\2\315\10\65\1\316\1\65\1\104\1\315\1\65\4\315"+
    "\11\65\6\315\6\65\1\0\2\317\10\0\1\320\1\114"+
    "\1\0\1\317\1\0\4\317\10\0\1\54\6\317\7\0"+
    "\2\317\10\0\1\320\2\0\1\317\1\0\4\317\11\0"+
    "\6\317\6\0\2\254\1\321\1\307\1\0\1\254\1\167"+
    "\1\267\1\166\2\254\1\321\1\310\1\254\1\321\1\254"+
    "\4\321\1\254\1\321\3\254\1\311\3\254\6\321\12\254"+
    "\1\0\1\254\1\167\1\267\1\166\3\254\1\310\34\254"+
    "\1\120\2\322\10\120\1\323\1\157\1\120\1\322\1\120"+
    "\4\322\10\120\1\124\6\322\7\120\2\322\10\120\1\324"+
    "\2\120\1\322\1\120\4\322\11\120\6\322\6\120\1\0"+
    "\2\275\10\0\1\276\1\57\1\0\1\275\1\0\4\275"+
    "\11\0\6\275\6\0\1\65\2\325\10\65\1\326\1\131"+
    "\1\104\1\325\1\65\4\325\10\65\1\67\6\325\7\65"+
    "\2\325\10\65\1\326\1\65\1\104\1\325\1\65\4\325"+
    "\11\65\6\325\6\65\1\0\2\327\10\0\1\330\1\114"+
    "\1\0\1\327\1\0\4\327\10\0\1\54\6\327\7\0"+
    "\2\327\10\0\1\330\2\0\1\327\1\0\4\327\11\0"+
    "\6\327\6\0\1\254\2\321\1\331\1\0\1\254\1\167"+
    "\1\267\1\166\2\254\1\321\1\310\1\254\1\321\1\254"+
    "\4\321\1\254\2\321\1\254\1\332\1\311\2\254\7\321"+
    "\6\254\1\120\2\333\10\120\1\334\1\157\1\120\1\333"+
    "\1\120\4\333\10\120\1\124\6\333\7\120\2\333\10\120"+
    "\1\335\2\120\1\333\1\120\4\333\11\120\6\333\6\120"+
    "\1\0\2\305\10\0\1\306\1\57\1\0\1\305\1\0"+
    "\4\305\11\0\6\305\6\0\1\65\2\336\10\65\1\337"+
    "\1\131\1\104\1\336\1\65\4\336\10\65\1\67\6\336"+
    "\7\65\2\336\10\65\1\337\1\65\1\104\1\336\1\65"+
    "\4\336\11\65\6\336\6\65\1\0\2\340\10\0\1\341"+
    "\1\114\1\0\1\340\1\0\4\340\10\0\1\54\6\340"+
    "\7\0\2\340\10\0\1\341\2\0\1\340\1\0\4\340"+
    "\11\0\6\340\6\0\2\254\1\321\1\331\1\0\1\254"+
    "\1\167\1\267\1\166\2\254\1\321\1\310\1\254\1\321"+
    "\1\254\4\321\1\254\1\321\2\254\1\332\1\311\3\254"+
    "\6\321\6\254\3\342\1\332\1\0\1\254\1\277\1\343"+
    "\1\277\1\254\2\342\1\254\12\342\2\254\20\342\1\120"+
    "\2\344\10\120\1\345\1\157\1\120\1\344\1\120\4\344"+
    "\10\120\1\124\6\344\7\120\2\344\10\120\1\346\2\120"+
    "\1\344\1\120\4\344\11\120\6\344\6\120\1\0\2\317"+
    "\10\0\1\320\1\57\1\0\1\317\1\0\4\317\11\0"+
    "\6\317\6\0\1\65\2\347\10\65\1\350\1\131\1\104"+
    "\1\347\1\65\4\347\10\65\1\67\6\347\7\65\2\347"+
    "\10\65\1\350\1\65\1\104\1\347\1\65\4\347\11\65"+
    "\6\347\6\65\1\0\2\351\10\0\1\352\1\114\1\0"+
    "\1\351\1\0\4\351\10\0\1\54\6\351\7\0\2\351"+
    "\10\0\1\352\2\0\1\351\1\0\4\351\11\0\6\351"+
    "\6\0\3\342\1\307\1\0\1\254\1\167\1\343\1\166"+
    "\1\254\2\342\1\310\12\342\2\254\23\342\1\307\1\0"+
    "\1\254\1\277\1\343\1\277\1\254\2\342\1\310\12\342"+
    "\2\254\20\342\1\120\2\353\10\120\1\354\1\157\1\120"+
    "\1\353\1\120\4\353\10\120\1\124\6\353\7\120\2\353"+
    "\10\120\1\355\2\120\1\353\1\120\4\353\11\120\6\353"+
    "\6\120\1\0\2\327\10\0\1\330\1\57\1\0\1\327"+
    "\1\0\4\327\11\0\6\327\6\0\1\65\2\356\10\65"+
    "\1\357\1\131\1\104\1\356\1\65\4\356\10\65\1\67"+
    "\6\356\7\65\2\356\10\65\1\357\1\65\1\104\1\356"+
    "\1\65\4\356\11\65\6\356\6\65\1\0\2\360\10\0"+
    "\1\361\1\114\1\0\1\360\1\0\4\360\10\0\1\54"+
    "\6\360\7\0\2\360\10\0\1\361\2\0\1\360\1\0"+
    "\4\360\11\0\6\360\6\0\1\120\2\362\10\120\1\363"+
    "\1\157\1\120\1\362\1\120\4\362\10\120\1\124\6\362"+
    "\7\120\2\362\10\120\1\364\2\120\1\362\1\120\4\362"+
    "\11\120\6\362\6\120\1\0\2\340\10\0\1\341\1\57"+
    "\1\0\1\340\1\0\4\340\11\0\6\340\6\0\1\65"+
    "\2\365\10\65\1\366\1\131\1\104\1\365\1\65\4\365"+
    "\10\65\1\67\6\365\7\65\2\365\10\65\1\366\1\65"+
    "\1\104\1\365\1\65\4\365\11\65\6\365\6\65\1\0"+
    "\2\367\10\0\1\370\1\114\1\0\1\367\1\0\4\367"+
    "\10\0\1\54\6\367\7\0\2\367\10\0\1\370\2\0"+
    "\1\367\1\0\4\367\11\0\6\367\6\0\1\120\2\371"+
    "\10\120\1\372\1\157\1\120\1\371\1\120\4\371\10\120"+
    "\1\124\6\371\7\120\2\371\10\120\1\373\2\120\1\371"+
    "\1\120\4\371\11\120\6\371\6\120\1\0\2\351\10\0"+
    "\1\352\1\57\1\0\1\351\1\0\4\351\11\0\6\351"+
    "\6\0\1\65\2\374\10\65\1\375\1\131\1\104\1\374"+
    "\1\65\4\374\10\65\1\67\6\374\7\65\2\374\10\65"+
    "\1\375\1\65\1\104\1\374\1\65\4\374\11\65\6\374"+
    "\6\65\1\0\2\376\10\0\1\377\1\114\1\0\1\376"+
    "\1\0\4\376\10\0\1\54\6\376\7\0\2\376\10\0"+
    "\1\377\2\0\1\376\1\0\4\376\11\0\6\376\6\0"+
    "\1\120\2\u0100\10\120\1\u0101\1\157\1\120\1\u0100\1\120"+
    "\4\u0100\10\120\1\124\6\u0100\7\120\2\u0100\10\120\1\u0102"+
    "\2\120\1\u0100\1\120\4\u0100\11\120\6\u0100\6\120\1\0"+
    "\2\360\10\0\1\361\1\57\1\0\1\360\1\0\4\360"+
    "\11\0\6\360\6\0\1\65\2\u0103\10\65\1\u0104\1\131"+
    "\1\104\1\u0103\1\65\4\u0103\10\65\1\67\6\u0103\7\65"+
    "\2\u0103\10\65\1\u0104\1\65\1\104\1\u0103\1\65\4\u0103"+
    "\11\65\6\u0103\6\65\1\0\2\u0105\10\0\1\u0106\1\114"+
    "\1\0\1\u0105\1\0\4\u0105\10\0\1\54\6\u0105\7\0"+
    "\2\u0105\10\0\1\u0106\2\0\1\u0105\1\0\4\u0105\11\0"+
    "\6\u0105\6\0\1\120\2\u0107\10\120\1\u0108\1\157\1\120"+
    "\1\u0107\1\120\4\u0107\10\120\1\124\6\u0107\7\120\2\u0107"+
    "\10\120\1\u0109\2\120\1\u0107\1\120\4\u0107\11\120\6\u0107"+
    "\6\120\1\0\2\367\10\0\1\370\1\57\1\0\1\367"+
    "\1\0\4\367\11\0\6\367\6\0\1\65\2\u010a\10\65"+
    "\1\u010b\1\131\1\104\1\u010a\1\65\4\u010a\10\65\1\67"+
    "\6\u010a\7\65\2\u010a\10\65\1\u010b\1\65\1\104\1\u010a"+
    "\1\65\4\u010a\11\65\6\u010a\6\65\1\0\2\u010c\10\0"+
    "\1\u010d\1\114\1\0\1\u010c\1\0\4\u010c\10\0\1\54"+
    "\6\u010c\7\0\2\u010c\10\0\1\u010d\2\0\1\u010c\1\0"+
    "\4\u010c\11\0\6\u010c\6\0\1\120\2\u010e\10\120\1\u010f"+
    "\1\157\1\120\1\u010e\1\120\4\u010e\10\120\1\124\6\u010e"+
    "\7\120\2\u010e\10\120\1\u0110\2\120\1\u010e\1\120\4\u010e"+
    "\11\120\6\u010e\6\120\1\0\2\376\10\0\1\377\1\57"+
    "\1\0\1\376\1\0\4\376\11\0\6\376\6\0\1\65"+
    "\2\u0111\10\65\1\u0112\1\131\1\104\1\u0111\1\65\4\u0111"+
    "\10\65\1\67\6\u0111\7\65\2\u0111\10\65\1\u0112\1\65"+
    "\1\104\1\u0111\1\65\4\u0111\11\65\6\u0111\6\65\1\0"+
    "\2\u0113\10\0\1\u0114\1\114\1\0\1\u0113\1\0\4\u0113"+
    "\10\0\1\54\6\u0113\7\0\2\u0113\10\0\1\u0114\2\0"+
    "\1\u0113\1\0\4\u0113\11\0\6\u0113\6\0\1\120\2\u0115"+
    "\10\120\1\u0116\1\157\1\120\1\u0115\1\120\4\u0115\10\120"+
    "\1\124\6\u0115\7\120\2\u0115\10\120\1\u0117\2\120\1\u0115"+
    "\1\120\4\u0115\11\120\6\u0115\6\120\1\0\2\u0105\10\0"+
    "\1\u0106\1\57\1\0\1\u0105\1\0\4\u0105\11\0\6\u0105"+
    "\6\0\1\65\2\u0118\10\65\1\u0119\1\131\1\104\1\u0118"+
    "\1\65\4\u0118\10\65\1\67\6\u0118\7\65\2\u0118\10\65"+
    "\1\u0119\1\65\1\104\1\u0118\1\65\4\u0118\11\65\6\u0118"+
    "\6\65\1\0\2\u011a\10\0\1\u011b\1\114\1\0\1\u011a"+
    "\1\0\4\u011a\10\0\1\54\6\u011a\7\0\2\u011a\10\0"+
    "\1\u011b\2\0\1\u011a\1\0\4\u011a\11\0\6\u011a\6\0"+
    "\1\120\2\u011c\10\120\1\u011d\1\157\1\120\1\u011c\1\120"+
    "\4\u011c\10\120\1\124\6\u011c\7\120\2\u011c\10\120\1\u011e"+
    "\2\120\1\u011c\1\120\4\u011c\11\120\6\u011c\6\120\1\0"+
    "\2\u010c\10\0\1\u010d\1\57\1\0\1\u010c\1\0\4\u010c"+
    "\11\0\6\u010c\6\0\1\65\2\u011f\10\65\1\u0120\1\131"+
    "\1\104\1\u011f\1\65\4\u011f\10\65\1\67\6\u011f\7\65"+
    "\2\u011f\10\65\1\u0120\1\65\1\104\1\u011f\1\65\4\u011f"+
    "\11\65\6\u011f\6\65\1\0\2\u0121\10\0\1\u0122\1\114"+
    "\1\0\1\u0121\1\0\4\u0121\10\0\1\54\6\u0121\7\0"+
    "\2\u0121\10\0\1\u0122\2\0\1\u0121\1\0\4\u0121\11\0"+
    "\6\u0121\6\0\1\120\2\u0123\10\120\1\u0124\1\157\1\120"+
    "\1\u0123\1\120\4\u0123\10\120\1\124\6\u0123\7\120\2\u0123"+
    "\10\120\1\u0125\2\120\1\u0123\1\120\4\u0123\11\120\6\u0123"+
    "\6\120\1\0\2\u0113\10\0\1\u0114\1\57\1\0\1\u0113"+
    "\1\0\4\u0113\11\0\6\u0113\6\0\1\65\2\u0126\10\65"+
    "\1\u0127\1\131\1\104\1\u0126\1\65\4\u0126\10\65\1\67"+
    "\6\u0126\7\65\2\u0126\10\65\1\u0127\1\65\1\104\1\u0126"+
    "\1\65\4\u0126\11\65\6\u0126\6\65\1\0\2\u0128\10\0"+
    "\1\u0129\1\114\1\0\1\u0128\1\0\4\u0128\10\0\1\54"+
    "\6\u0128\7\0\2\u0128\10\0\1\u0129\2\0\1\u0128\1\0"+
    "\4\u0128\11\0\6\u0128\6\0\1\120\2\u012a\10\120\1\u012b"+
    "\1\157\1\120\1\u012a\1\120\4\u012a\10\120\1\124\6\u012a"+
    "\7\120\2\u012a\10\120\1\u012c\2\120\1\u012a\1\120\4\u012a"+
    "\11\120\6\u012a\6\120\1\0\2\u011a\10\0\1\u011b\1\57"+
    "\1\0\1\u011a\1\0\4\u011a\11\0\6\u011a\6\0\1\65"+
    "\2\u012d\10\65\1\u012e\1\131\1\104\1\u012d\1\65\4\u012d"+
    "\10\65\1\67\6\u012d\7\65\2\u012d\10\65\1\u012e\1\65"+
    "\1\104\1\u012d\1\65\4\u012d\11\65\6\u012d\6\65\1\0"+
    "\2\u012f\10\0\1\u0130\1\114\1\0\1\u012f\1\0\4\u012f"+
    "\10\0\1\54\6\u012f\7\0\2\u012f\10\0\1\u0130\2\0"+
    "\1\u012f\1\0\4\u012f\11\0\6\u012f\6\0\1\120\2\u0131"+
    "\10\120\1\u0132\1\157\1\120\1\u0131\1\120\4\u0131\10\120"+
    "\1\124\6\u0131\7\120\2\u0131\10\120\1\u0133\2\120\1\u0131"+
    "\1\120\4\u0131\11\120\6\u0131\6\120\1\0\2\u0121\10\0"+
    "\1\u0122\1\57\1\0\1\u0121\1\0\4\u0121\11\0\6\u0121"+
    "\6\0\1\65\2\u0134\10\65\1\u0135\1\131\1\104\1\u0134"+
    "\1\65\4\u0134\10\65\1\67\6\u0134\7\65\2\u0134\10\65"+
    "\1\u0135\1\65\1\104\1\u0134\1\65\4\u0134\11\65\6\u0134"+
    "\6\65\1\0\2\u0136\10\0\1\u0137\1\114\1\0\1\u0136"+
    "\1\0\4\u0136\10\0\1\54\6\u0136\7\0\2\u0136\10\0"+
    "\1\u0137\2\0\1\u0136\1\0\4\u0136\11\0\6\u0136\6\0"+
    "\1\120\2\u0138\10\120\1\u0139\1\157\1\120\1\u0138\1\120"+
    "\4\u0138\10\120\1\124\6\u0138\7\120\2\u0138\10\120\1\u013a"+
    "\2\120\1\u0138\1\120\4\u0138\11\120\6\u0138\6\120\1\0"+
    "\2\u0128\10\0\1\u0129\1\57\1\0\1\u0128\1\0\4\u0128"+
    "\11\0\6\u0128\6\0\1\65\2\u013b\10\65\1\u013c\1\131"+
    "\1\104\1\u013b\1\65\4\u013b\10\65\1\67\6\u013b\7\65"+
    "\2\u013b\10\65\1\u013c\1\65\1\104\1\u013b\1\65\4\u013b"+
    "\11\65\6\u013b\6\65\1\0\2\u013d\10\0\1\u013e\1\114"+
    "\1\0\1\u013d\1\0\4\u013d\10\0\1\54\6\u013d\7\0"+
    "\2\u013d\10\0\1\u013e\2\0\1\u013d\1\0\4\u013d\11\0"+
    "\6\u013d\6\0\1\120\2\u013f\10\120\1\u0140\1\157\1\120"+
    "\1\u013f\1\120\4\u013f\10\120\1\124\6\u013f\7\120\2\u013f"+
    "\10\120\1\u0141\2\120\1\u013f\1\120\4\u013f\11\120\6\u013f"+
    "\6\120\1\0\2\u012f\10\0\1\u0130\1\57\1\0\1\u012f"+
    "\1\0\4\u012f\11\0\6\u012f\6\0\1\65\2\u0142\10\65"+
    "\1\u0143\1\131\1\104\1\u0142\1\65\4\u0142\10\65\1\67"+
    "\6\u0142\7\65\2\u0142\10\65\1\u0143\1\65\1\104\1\u0142"+
    "\1\65\4\u0142\11\65\6\u0142\6\65\1\0\2\u0144\10\0"+
    "\1\u0145\1\114\1\0\1\u0144\1\0\4\u0144\10\0\1\54"+
    "\6\u0144\7\0\2\u0144\10\0\1\u0145\2\0\1\u0144\1\0"+
    "\4\u0144\11\0\6\u0144\6\0\1\120\2\u0146\10\120\1\u0147"+
    "\1\157\1\120\1\u0146\1\120\4\u0146\10\120\1\124\6\u0146"+
    "\7\120\2\u0146\10\120\1\u0148\2\120\1\u0146\1\120\4\u0146"+
    "\11\120\6\u0146\6\120\1\0\2\u0136\10\0\1\u0137\1\57"+
    "\1\0\1\u0136\1\0\4\u0136\11\0\6\u0136\6\0\1\65"+
    "\2\u0149\10\65\1\u014a\1\131\1\104\1\u0149\1\65\4\u0149"+
    "\10\65\1\67\6\u0149\7\65\2\u0149\10\65\1\u014a\1\65"+
    "\1\104\1\u0149\1\65\4\u0149\11\65\6\u0149\6\65\1\0"+
    "\2\u014b\10\0\1\u014c\1\114\1\0\1\u014b\1\0\4\u014b"+
    "\10\0\1\54\6\u014b\7\0\2\u014b\10\0\1\u014c\2\0"+
    "\1\u014b\1\0\4\u014b\11\0\6\u014b\6\0\1\120\2\u014d"+
    "\10\120\1\u014e\1\157\1\120\1\u014d\1\120\4\u014d\10\120"+
    "\1\124\6\u014d\7\120\2\u014d\10\120\1\u014f\2\120\1\u014d"+
    "\1\120\4\u014d\11\120\6\u014d\6\120\1\0\2\u013d\10\0"+
    "\1\u013e\1\57\1\0\1\u013d\1\0\4\u013d\11\0\6\u013d"+
    "\6\0\1\65\2\u0150\10\65\1\u0151\1\131\1\104\1\u0150"+
    "\1\65\4\u0150\10\65\1\67\6\u0150\7\65\2\u0150\10\65"+
    "\1\u0151\1\65\1\104\1\u0150\1\65\4\u0150\11\65\6\u0150"+
    "\6\65\1\0\2\u0152\10\0\1\u0153\1\114\1\0\1\u0152"+
    "\1\0\4\u0152\10\0\1\54\6\u0152\7\0\2\u0152\10\0"+
    "\1\u0153\2\0\1\u0152\1\0\4\u0152\11\0\6\u0152\6\0"+
    "\1\120\2\u0154\10\120\1\u0155\1\157\1\120\1\u0154\1\120"+
    "\4\u0154\10\120\1\124\6\u0154\7\120\2\u0154\10\120\1\u0156"+
    "\2\120\1\u0154\1\120\4\u0154\11\120\6\u0154\6\120\1\0"+
    "\2\u0144\10\0\1\u0145\1\57\1\0\1\u0144\1\0\4\u0144"+
    "\11\0\6\u0144\6\0\1\65\2\u0157\10\65\1\u0158\1\131"+
    "\1\104\1\u0157\1\65\4\u0157\10\65\1\67\6\u0157\7\65"+
    "\2\u0157\10\65\1\u0158\1\65\1\104\1\u0157\1\65\4\u0157"+
    "\11\65\6\u0157\6\65\1\0\2\u0159\10\0\1\u015a\1\114"+
    "\1\0\1\u0159\1\0\4\u0159\10\0\1\54\6\u0159\7\0"+
    "\2\u0159\10\0\1\u015a\2\0\1\u0159\1\0\4\u0159\11\0"+
    "\6\u0159\6\0\1\120\2\u015b\10\120\1\u015c\1\157\1\120"+
    "\1\u015b\1\120\4\u015b\10\120\1\124\6\u015b\7\120\2\u015b"+
    "\10\120\1\u015d\2\120\1\u015b\1\120\4\u015b\11\120\6\u015b"+
    "\6\120\1\0\2\u014b\10\0\1\u014c\1\57\1\0\1\u014b"+
    "\1\0\4\u014b\11\0\6\u014b\6\0\1\65\2\u015e\10\65"+
    "\1\u015f\1\131\1\104\1\u015e\1\65\4\u015e\10\65\1\67"+
    "\6\u015e\7\65\2\u015e\10\65\1\u015f\1\65\1\104\1\u015e"+
    "\1\65\4\u015e\11\65\6\u015e\6\65\1\0\2\u0160\10\0"+
    "\1\u0161\1\114\1\0\1\u0160\1\0\4\u0160\10\0\1\54"+
    "\6\u0160\7\0\2\u0160\10\0\1\u0161\2\0\1\u0160\1\0"+
    "\4\u0160\11\0\6\u0160\6\0\1\120\2\u0162\10\120\1\u0163"+
    "\1\157\1\120\1\u0162\1\120\4\u0162\10\120\1\124\6\u0162"+
    "\7\120\2\u0162\10\120\1\u0164\2\120\1\u0162\1\120\4\u0162"+
    "\11\120\6\u0162\6\120\1\0\2\u0152\10\0\1\u0153\1\57"+
    "\1\0\1\u0152\1\0\4\u0152\11\0\6\u0152\6\0\1\65"+
    "\2\u0165\10\65\1\u0166\1\131\1\104\1\u0165\1\65\4\u0165"+
    "\10\65\1\67\6\u0165\7\65\2\u0165\10\65\1\u0166\1\65"+
    "\1\104\1\u0165\1\65\4\u0165\11\65\6\u0165\6\65\1\0"+
    "\2\u0167\10\0\1\u0168\1\114\1\0\1\u0167\1\0\4\u0167"+
    "\10\0\1\54\6\u0167\7\0\2\u0167\10\0\1\u0168\2\0"+
    "\1\u0167\1\0\4\u0167\11\0\6\u0167\6\0\1\120\2\u0169"+
    "\10\120\1\u016a\1\157\1\120\1\u0169\1\120\4\u0169\10\120"+
    "\1\124\6\u0169\7\120\2\u0169\10\120\1\u016b\2\120\1\u0169"+
    "\1\120\4\u0169\11\120\6\u0169\6\120\1\0\2\u0159\10\0"+
    "\1\u015a\1\57\1\0\1\u0159\1\0\4\u0159\11\0\6\u0159"+
    "\6\0\1\65\2\u016c\10\65\1\u016d\1\131\1\104\1\u016c"+
    "\1\65\4\u016c\10\65\1\67\6\u016c\7\65\2\u016c\10\65"+
    "\1\u016d\1\65\1\104\1\u016c\1\65\4\u016c\11\65\6\u016c"+
    "\6\65\1\0\2\u016e\10\0\1\u016f\1\114\1\0\1\u016e"+
    "\1\0\4\u016e\10\0\1\54\6\u016e\7\0\2\u016e\10\0"+
    "\1\u016f\2\0\1\u016e\1\0\4\u016e\11\0\6\u016e\6\0"+
    "\1\120\2\u0170\10\120\1\u0171\1\157\1\120\1\u0170\1\120"+
    "\4\u0170\10\120\1\124\6\u0170\7\120\2\u0170\10\120\1\u0172"+
    "\2\120\1\u0170\1\120\4\u0170\11\120\6\u0170\6\120\1\0"+
    "\2\u0160\10\0\1\u0161\1\57\1\0\1\u0160\1\0\4\u0160"+
    "\11\0\6\u0160\6\0\1\65\2\u0173\10\65\1\u0174\1\131"+
    "\1\104\1\u0173\1\65\4\u0173\10\65\1\67\6\u0173\7\65"+
    "\2\u0173\10\65\1\u0174\1\65\1\104\1\u0173\1\65\4\u0173"+
    "\11\65\6\u0173\6\65\1\0\2\u0175\10\0\1\u0176\1\114"+
    "\1\0\1\u0175\1\0\4\u0175\10\0\1\54\6\u0175\7\0"+
    "\2\u0175\10\0\1\u0176\2\0\1\u0175\1\0\4\u0175\11\0"+
    "\6\u0175\6\0\1\120\2\u0177\10\120\1\u0178\1\157\1\120"+
    "\1\u0177\1\120\4\u0177\10\120\1\124\6\u0177\7\120\2\u0177"+
    "\10\120\1\u0179\2\120\1\u0177\1\120\4\u0177\11\120\6\u0177"+
    "\6\120\1\0\2\u0167\10\0\1\u0168\1\57\1\0\1\u0167"+
    "\1\0\4\u0167\11\0\6\u0167\6\0\1\65\2\u017a\10\65"+
    "\1\u017b\1\131\1\104\1\u017a\1\65\4\u017a\10\65\1\67"+
    "\6\u017a\7\65\2\u017a\10\65\1\u017b\1\65\1\104\1\u017a"+
    "\1\65\4\u017a\11\65\6\u017a\6\65\1\0\2\u017c\10\0"+
    "\1\u017d\1\114\1\0\1\u017c\1\0\4\u017c\10\0\1\54"+
    "\6\u017c\7\0\2\u017c\10\0\1\u017d\2\0\1\u017c\1\0"+
    "\4\u017c\11\0\6\u017c\6\0\1\120\2\u017e\10\120\1\u017f"+
    "\1\157\1\120\1\u017e\1\120\4\u017e\10\120\1\124\6\u017e"+
    "\7\120\2\u017e\10\120\1\u0180\2\120\1\u017e\1\120\4\u017e"+
    "\11\120\6\u017e\6\120\1\0\2\u016e\10\0\1\u016f\1\57"+
    "\1\0\1\u016e\1\0\4\u016e\11\0\6\u016e\6\0\1\65"+
    "\2\u0181\10\65\1\u0182\1\131\1\104\1\u0181\1\65\4\u0181"+
    "\10\65\1\67\6\u0181\7\65\2\u0181\10\65\1\u0182\1\65"+
    "\1\104\1\u0181\1\65\4\u0181\11\65\6\u0181\6\65\1\0"+
    "\2\u0183\10\0\1\u0184\1\114\1\0\1\u0183\1\0\4\u0183"+
    "\10\0\1\54\6\u0183\7\0\2\u0183\10\0\1\u0184\2\0"+
    "\1\u0183\1\0\4\u0183\11\0\6\u0183\6\0\1\120\2\u0185"+
    "\10\120\1\u0186\1\157\1\120\1\u0185\1\120\4\u0185\10\120"+
    "\1\124\6\u0185\7\120\2\u0185\10\120\1\u0187\2\120\1\u0185"+
    "\1\120\4\u0185\11\120\6\u0185\6\120\1\0\2\u0175\10\0"+
    "\1\u0176\1\57\1\0\1\u0175\1\0\4\u0175\11\0\6\u0175"+
    "\6\0\1\65\2\u0188\10\65\1\u0189\1\131\1\104\1\u0188"+
    "\1\65\4\u0188\10\65\1\67\6\u0188\7\65\2\u0188\10\65"+
    "\1\u0189\1\65\1\104\1\u0188\1\65\4\u0188\11\65\6\u0188"+
    "\6\65\1\0\2\u018a\10\0\1\u018b\1\114\1\0\1\u018a"+
    "\1\0\4\u018a\10\0\1\54\6\u018a\7\0\2\u018a\10\0"+
    "\1\u018b\2\0\1\u018a\1\0\4\u018a\11\0\6\u018a\6\0"+
    "\1\120\2\u018c\10\120\1\u018d\1\157\1\120\1\u018c\1\120"+
    "\4\u018c\10\120\1\124\6\u018c\7\120\2\u018c\10\120\1\u018e"+
    "\2\120\1\u018c\1\120\4\u018c\11\120\6\u018c\6\120\1\0"+
    "\2\u017c\10\0\1\u017d\1\57\1\0\1\u017c\1\0\4\u017c"+
    "\11\0\6\u017c\6\0\1\65\2\u018f\10\65\1\u0190\1\131"+
    "\1\104\1\u018f\1\65\4\u018f\10\65\1\67\6\u018f\7\65"+
    "\2\u018f\10\65\1\u0190\1\65\1\104\1\u018f\1\65\4\u018f"+
    "\11\65\6\u018f\6\65\1\0\2\u0191\10\0\1\u0192\1\114"+
    "\1\0\1\u0191\1\0\4\u0191\10\0\1\54\6\u0191\7\0"+
    "\2\u0191\10\0\1\u0192\2\0\1\u0191\1\0\4\u0191\11\0"+
    "\6\u0191\6\0\1\120\2\u0193\10\120\1\u0194\1\157\1\120"+
    "\1\u0193\1\120\4\u0193\10\120\1\124\6\u0193\7\120\2\u0193"+
    "\10\120\1\u0195\2\120\1\u0193\1\120\4\u0193\11\120\6\u0193"+
    "\6\120\1\0\2\u0183\10\0\1\u0184\1\57\1\0\1\u0183"+
    "\1\0\4\u0183\11\0\6\u0183\6\0\1\65\2\u0196\10\65"+
    "\1\u0197\1\131\1\104\1\u0196\1\65\4\u0196\10\65\1\67"+
    "\6\u0196\7\65\2\u0196\10\65\1\u0197\1\65\1\104\1\u0196"+
    "\1\65\4\u0196\11\65\6\u0196\6\65\1\0\2\u0198\10\0"+
    "\1\u0199\1\114\1\0\1\u0198\1\0\4\u0198\10\0\1\54"+
    "\6\u0198\7\0\2\u0198\10\0\1\u0199\2\0\1\u0198\1\0"+
    "\4\u0198\11\0\6\u0198\6\0\1\120\2\u019a\10\120\1\u019b"+
    "\1\157\1\120\1\u019a\1\120\4\u019a\10\120\1\124\6\u019a"+
    "\7\120\2\u019a\10\120\1\u019c\2\120\1\u019a\1\120\4\u019a"+
    "\11\120\6\u019a\6\120\1\0\2\u018a\10\0\1\u018b\1\57"+
    "\1\0\1\u018a\1\0\4\u018a\11\0\6\u018a\6\0\1\65"+
    "\2\u019d\10\65\1\u019e\1\131\1\104\1\u019d\1\65\4\u019d"+
    "\10\65\1\67\6\u019d\7\65\2\u019d\10\65\1\u019e\1\65"+
    "\1\104\1\u019d\1\65\4\u019d\11\65\6\u019d\6\65\1\0"+
    "\2\u019f\10\0\1\u01a0\1\114\1\0\1\u019f\1\0\4\u019f"+
    "\10\0\1\54\6\u019f\7\0\2\u019f\10\0\1\u01a0\2\0"+
    "\1\u019f\1\0\4\u019f\11\0\6\u019f\6\0\1\120\2\u01a1"+
    "\10\120\1\u01a2\1\157\1\120\1\u01a1\1\120\4\u01a1\10\120"+
    "\1\124\6\u01a1\7\120\2\u01a1\10\120\1\u01a3\2\120\1\u01a1"+
    "\1\120\4\u01a1\11\120\6\u01a1\6\120\1\0\2\u0191\10\0"+
    "\1\u0192\1\57\1\0\1\u0191\1\0\4\u0191\11\0\6\u0191"+
    "\6\0\1\65\2\u01a4\10\65\1\u01a5\1\131\1\104\1\u01a4"+
    "\1\65\4\u01a4\10\65\1\67\6\u01a4\7\65\2\u01a4\10\65"+
    "\1\u01a5\1\65\1\104\1\u01a4\1\65\4\u01a4\11\65\6\u01a4"+
    "\6\65\1\0\2\u01a6\10\0\1\u01a7\1\114\1\0\1\u01a6"+
    "\1\0\4\u01a6\10\0\1\54\6\u01a6\7\0\2\u01a6\10\0"+
    "\1\u01a7\2\0\1\u01a6\1\0\4\u01a6\11\0\6\u01a6\6\0"+
    "\1\120\2\u01a8\10\120\1\u01a9\1\157\1\120\1\u01a8\1\120"+
    "\4\u01a8\10\120\1\124\6\u01a8\7\120\2\u01a8\10\120\1\u01aa"+
    "\2\120\1\u01a8\1\120\4\u01a8\11\120\6\u01a8\6\120\1\0"+
    "\2\u0198\10\0\1\u0199\1\57\1\0\1\u0198\1\0\4\u0198"+
    "\11\0\6\u0198\6\0\1\65\2\u01ab\10\65\1\u01ac\1\131"+
    "\1\104\1\u01ab\1\65\4\u01ab\10\65\1\67\6\u01ab\7\65"+
    "\2\u01ab\10\65\1\u01ac\1\65\1\104\1\u01ab\1\65\4\u01ab"+
    "\11\65\6\u01ab\6\65\1\0\2\u01ad\10\0\1\u01ae\1\114"+
    "\1\0\1\u01ad\1\0\4\u01ad\10\0\1\54\6\u01ad\7\0"+
    "\2\u01ad\10\0\1\u01ae\2\0\1\u01ad\1\0\4\u01ad\11\0"+
    "\6\u01ad\6\0\1\120\2\u01af\10\120\1\u01b0\1\157\1\120"+
    "\1\u01af\1\120\4\u01af\10\120\1\124\6\u01af\7\120\2\u01af"+
    "\10\120\1\u01b1\2\120\1\u01af\1\120\4\u01af\11\120\6\u01af"+
    "\6\120\1\0\2\u019f\10\0\1\u01a0\1\57\1\0\1\u019f"+
    "\1\0\4\u019f\11\0\6\u019f\6\0\1\65\2\u01b2\10\65"+
    "\1\u01b3\1\131\1\104\1\u01b2\1\65\4\u01b2\10\65\1\67"+
    "\6\u01b2\7\65\2\u01b2\10\65\1\u01b3\1\65\1\104\1\u01b2"+
    "\1\65\4\u01b2\11\65\6\u01b2\6\65\1\0\2\u01b4\10\0"+
    "\1\u01b5\1\114\1\0\1\u01b4\1\0\4\u01b4\10\0\1\54"+
    "\6\u01b4\7\0\2\u01b4\10\0\1\u01b5\2\0\1\u01b4\1\0"+
    "\4\u01b4\11\0\6\u01b4\6\0\1\120\2\u01b6\10\120\1\u01b7"+
    "\1\157\1\120\1\u01b6\1\120\4\u01b6\10\120\1\124\6\u01b6"+
    "\7\120\2\u01b6\10\120\1\u01b8\2\120\1\u01b6\1\120\4\u01b6"+
    "\11\120\6\u01b6\6\120\1\0\2\u01a6\10\0\1\u01a7\1\57"+
    "\1\0\1\u01a6\1\0\4\u01a6\11\0\6\u01a6\6\0\1\65"+
    "\2\u01b9\10\65\1\u01ba\1\131\1\104\1\u01b9\1\65\4\u01b9"+
    "\10\65\1\67\6\u01b9\7\65\2\u01b9\10\65\1\u01ba\1\65"+
    "\1\104\1\u01b9\1\65\4\u01b9\11\65\6\u01b9\6\65\1\0"+
    "\2\u01bb\10\0\1\u01bc\1\114\1\0\1\u01bb\1\0\4\u01bb"+
    "\10\0\1\54\6\u01bb\7\0\2\u01bb\10\0\1\u01bc\2\0"+
    "\1\u01bb\1\0\4\u01bb\11\0\6\u01bb\6\0\1\120\2\u01bd"+
    "\10\120\1\u01be\1\157\1\120\1\u01bd\1\120\4\u01bd\10\120"+
    "\1\124\6\u01bd\7\120\2\u01bd\10\120\1\u01bf\2\120\1\u01bd"+
    "\1\120\4\u01bd\11\120\6\u01bd\6\120\1\0\2\u01ad\10\0"+
    "\1\u01ae\1\57\1\0\1\u01ad\1\0\4\u01ad\11\0\6\u01ad"+
    "\6\0\1\65\2\u01c0\10\65\1\u01c1\1\131\1\104\1\u01c0"+
    "\1\65\4\u01c0\10\65\1\67\6\u01c0\7\65\2\u01c0\10\65"+
    "\1\u01c1\1\65\1\104\1\u01c0\1\65\4\u01c0\11\65\6\u01c0"+
    "\6\65\1\0\2\u01c2\10\0\1\u01c3\1\114\1\0\1\u01c2"+
    "\1\0\4\u01c2\10\0\1\54\6\u01c2\7\0\2\u01c2\10\0"+
    "\1\u01c3\2\0\1\u01c2\1\0\4\u01c2\11\0\6\u01c2\6\0"+
    "\1\120\2\u01c4\10\120\1\u01c5\1\157\1\120\1\u01c4\1\120"+
    "\4\u01c4\10\120\1\124\6\u01c4\7\120\2\u01c4\10\120\1\u01c6"+
    "\2\120\1\u01c4\1\120\4\u01c4\11\120\6\u01c4\6\120\1\0"+
    "\2\u01b4\10\0\1\u01b5\1\57\1\0\1\u01b4\1\0\4\u01b4"+
    "\11\0\6\u01b4\6\0\1\65\2\u01c7\10\65\1\u01c8\1\131"+
    "\1\104\1\u01c7\1\65\4\u01c7\10\65\1\67\6\u01c7\7\65"+
    "\2\u01c7\10\65\1\u01c8\1\65\1\104\1\u01c7\1\65\4\u01c7"+
    "\11\65\6\u01c7\6\65\1\0\2\u01c9\10\0\1\u01ca\1\114"+
    "\1\0\1\u01c9\1\0\4\u01c9\10\0\1\54\6\u01c9\7\0"+
    "\2\u01c9\10\0\1\u01ca\2\0\1\u01c9\1\0\4\u01c9\11\0"+
    "\6\u01c9\6\0\1\120\2\u01cb\10\120\1\u01cc\1\157\1\120"+
    "\1\u01cb\1\120\4\u01cb\10\120\1\124\6\u01cb\7\120\2\u01cb"+
    "\10\120\1\u01cd\2\120\1\u01cb\1\120\4\u01cb\11\120\6\u01cb"+
    "\6\120\1\0\2\u01bb\10\0\1\u01bc\1\57\1\0\1\u01bb"+
    "\1\0\4\u01bb\11\0\6\u01bb\6\0\1\65\2\u01ce\10\65"+
    "\1\u01cf\1\131\1\104\1\u01ce\1\65\4\u01ce\10\65\1\67"+
    "\6\u01ce\7\65\2\u01ce\10\65\1\u01cf\1\65\1\104\1\u01ce"+
    "\1\65\4\u01ce\11\65\6\u01ce\6\65\1\0\2\u01d0\10\0"+
    "\1\u01d1\1\114\1\0\1\u01d0\1\0\4\u01d0\10\0\1\54"+
    "\6\u01d0\7\0\2\u01d0\10\0\1\u01d1\2\0\1\u01d0\1\0"+
    "\4\u01d0\11\0\6\u01d0\6\0\1\120\2\u01d2\10\120\1\u01d3"+
    "\1\157\1\120\1\u01d2\1\120\4\u01d2\10\120\1\124\6\u01d2"+
    "\7\120\2\u01d2\10\120\1\u01d4\2\120\1\u01d2\1\120\4\u01d2"+
    "\11\120\6\u01d2\6\120\1\0\2\u01c2\10\0\1\u01c3\1\57"+
    "\1\0\1\u01c2\1\0\4\u01c2\11\0\6\u01c2\6\0\1\65"+
    "\2\u01d5\10\65\1\u01d6\1\131\1\104\1\u01d5\1\65\4\u01d5"+
    "\10\65\1\67\6\u01d5\7\65\2\u01d5\10\65\1\u01d6\1\65"+
    "\1\104\1\u01d5\1\65\4\u01d5\11\65\6\u01d5\6\65\1\0"+
    "\2\u01d7\10\0\1\u01d8\1\114\1\0\1\u01d7\1\0\4\u01d7"+
    "\10\0\1\54\6\u01d7\7\0\2\u01d7\10\0\1\u01d8\2\0"+
    "\1\u01d7\1\0\4\u01d7\11\0\6\u01d7\6\0\1\120\2\u01d9"+
    "\10\120\1\u01da\1\157\1\120\1\u01d9\1\120\4\u01d9\10\120"+
    "\1\124\6\u01d9\7\120\2\u01d9\10\120\1\u01db\2\120\1\u01d9"+
    "\1\120\4\u01d9\11\120\6\u01d9\6\120\1\0\2\u01c9\10\0"+
    "\1\u01ca\1\57\1\0\1\u01c9\1\0\4\u01c9\11\0\6\u01c9"+
    "\6\0\1\65\2\u01dc\10\65\1\u01dd\1\131\1\104\1\u01dc"+
    "\1\65\4\u01dc\10\65\1\67\6\u01dc\7\65\2\u01dc\10\65"+
    "\1\u01dd\1\65\1\104\1\u01dc\1\65\4\u01dc\11\65\6\u01dc"+
    "\6\65\1\0\2\u01de\10\0\1\u01df\1\114\1\0\1\u01de"+
    "\1\0\4\u01de\10\0\1\54\6\u01de\7\0\2\u01de\10\0"+
    "\1\u01df\2\0\1\u01de\1\0\4\u01de\11\0\6\u01de\6\0"+
    "\1\120\2\u01e0\10\120\1\u01e1\1\157\1\120\1\u01e0\1\120"+
    "\4\u01e0\10\120\1\124\6\u01e0\7\120\2\u01e0\10\120\1\u01e2"+
    "\2\120\1\u01e0\1\120\4\u01e0\11\120\6\u01e0\6\120\1\0"+
    "\2\u01d0\10\0\1\u01d1\1\57\1\0\1\u01d0\1\0\4\u01d0"+
    "\11\0\6\u01d0\6\0\1\65\2\u01e3\10\65\1\u01e4\1\131"+
    "\1\104\1\u01e3\1\65\4\u01e3\10\65\1\67\6\u01e3\7\65"+
    "\2\u01e3\10\65\1\u01e4\1\65\1\104\1\u01e3\1\65\4\u01e3"+
    "\11\65\6\u01e3\6\65\1\0\2\u01e5\10\0\1\u01e6\1\114"+
    "\1\0\1\u01e5\1\0\4\u01e5\10\0\1\54\6\u01e5\7\0"+
    "\2\u01e5\10\0\1\u01e6\2\0\1\u01e5\1\0\4\u01e5\11\0"+
    "\6\u01e5\6\0\1\120\2\u01e7\10\120\1\u01e8\1\157\1\120"+
    "\1\u01e7\1\120\4\u01e7\10\120\1\124\6\u01e7\7\120\2\u01e7"+
    "\10\120\1\u01e9\2\120\1\u01e7\1\120\4\u01e7\11\120\6\u01e7"+
    "\6\120\1\0\2\u01d7\10\0\1\u01d8\1\57\1\0\1\u01d7"+
    "\1\0\4\u01d7\11\0\6\u01d7\6\0\1\65\2\u01ea\10\65"+
    "\1\u01eb\1\131\1\104\1\u01ea\1\65\4\u01ea\10\65\1\67"+
    "\6\u01ea\7\65\2\u01ea\10\65\1\u01eb\1\65\1\104\1\u01ea"+
    "\1\65\4\u01ea\11\65\6\u01ea\6\65\1\0\2\u01ec\10\0"+
    "\1\u01ed\1\114\1\0\1\u01ec\1\0\4\u01ec\10\0\1\54"+
    "\6\u01ec\7\0\2\u01ec\10\0\1\u01ed\2\0\1\u01ec\1\0"+
    "\4\u01ec\11\0\6\u01ec\6\0\1\120\2\u01ee\10\120\1\u01ef"+
    "\1\157\1\120\1\u01ee\1\120\4\u01ee\10\120\1\124\6\u01ee"+
    "\7\120\2\u01ee\10\120\1\u01f0\2\120\1\u01ee\1\120\4\u01ee"+
    "\11\120\6\u01ee\6\120\1\0\2\u01de\10\0\1\u01df\1\57"+
    "\1\0\1\u01de\1\0\4\u01de\11\0\6\u01de\6\0\1\65"+
    "\2\u01f1\10\65\1\u01f2\1\131\1\104\1\u01f1\1\65\4\u01f1"+
    "\10\65\1\67\6\u01f1\7\65\2\u01f1\10\65\1\u01f2\1\65"+
    "\1\104\1\u01f1\1\65\4\u01f1\11\65\6\u01f1\6\65\1\0"+
    "\2\u01f3\10\0\1\u01f4\1\114\1\0\1\u01f3\1\0\4\u01f3"+
    "\10\0\1\54\6\u01f3\7\0\2\u01f3\10\0\1\u01f4\2\0"+
    "\1\u01f3\1\0\4\u01f3\11\0\6\u01f3\6\0\1\120\2\u01f5"+
    "\10\120\1\u01f6\1\157\1\120\1\u01f5\1\120\4\u01f5\10\120"+
    "\1\124\6\u01f5\7\120\2\u01f5\10\120\1\u01f7\2\120\1\u01f5"+
    "\1\120\4\u01f5\11\120\6\u01f5\6\120\1\0\2\u01e5\10\0"+
    "\1\u01e6\1\57\1\0\1\u01e5\1\0\4\u01e5\11\0\6\u01e5"+
    "\6\0\1\65\2\u01f8\10\65\1\u01f9\1\131\1\104\1\u01f8"+
    "\1\65\4\u01f8\10\65\1\67\6\u01f8\7\65\2\u01f8\10\65"+
    "\1\u01f9\1\65\1\104\1\u01f8\1\65\4\u01f8\11\65\6\u01f8"+
    "\6\65\1\0\2\u01fa\10\0\1\u01fb\1\114\1\0\1\u01fa"+
    "\1\0\4\u01fa\10\0\1\54\6\u01fa\7\0\2\u01fa\10\0"+
    "\1\u01fb\2\0\1\u01fa\1\0\4\u01fa\11\0\6\u01fa\6\0"+
    "\1\120\2\u01fc\10\120\1\u01fd\1\157\1\120\1\u01fc\1\120"+
    "\4\u01fc\10\120\1\124\6\u01fc\7\120\2\u01fc\10\120\1\u01fe"+
    "\2\120\1\u01fc\1\120\4\u01fc\11\120\6\u01fc\6\120\1\0"+
    "\2\u01ec\10\0\1\u01ed\1\57\1\0\1\u01ec\1\0\4\u01ec"+
    "\11\0\6\u01ec\6\0\1\65\2\u01ff\10\65\1\u0200\1\131"+
    "\1\104\1\u01ff\1\65\4\u01ff\10\65\1\67\6\u01ff\7\65"+
    "\2\u01ff\10\65\1\u0200\1\65\1\104\1\u01ff\1\65\4\u01ff"+
    "\11\65\6\u01ff\6\65\1\0\2\u0201\10\0\1\u0202\1\114"+
    "\1\0\1\u0201\1\0\4\u0201\10\0\1\54\6\u0201\7\0"+
    "\2\u0201\10\0\1\u0202\2\0\1\u0201\1\0\4\u0201\11\0"+
    "\6\u0201\6\0\1\120\2\u0203\10\120\1\u0204\1\157\1\120"+
    "\1\u0203\1\120\4\u0203\10\120\1\124\6\u0203\7\120\2\u0203"+
    "\10\120\1\u0205\2\120\1\u0203\1\120\4\u0203\11\120\6\u0203"+
    "\6\120\1\0\2\u01f3\10\0\1\u01f4\1\57\1\0\1\u01f3"+
    "\1\0\4\u01f3\11\0\6\u01f3\6\0\1\65\2\u0206\10\65"+
    "\1\u0207\1\131\1\104\1\u0206\1\65\4\u0206\10\65\1\67"+
    "\6\u0206\7\65\2\u0206\10\65\1\u0207\1\65\1\104\1\u0206"+
    "\1\65\4\u0206\11\65\6\u0206\6\65\1\0\2\u0208\10\0"+
    "\1\u0209\1\114\1\0\1\u0208\1\0\4\u0208\10\0\1\54"+
    "\6\u0208\7\0\2\u0208\10\0\1\u0209\2\0\1\u0208\1\0"+
    "\4\u0208\11\0\6\u0208\6\0\1\120\2\u020a\10\120\1\u020b"+
    "\1\157\1\120\1\u020a\1\120\4\u020a\10\120\1\124\6\u020a"+
    "\7\120\2\u020a\10\120\1\u020c\2\120\1\u020a\1\120\4\u020a"+
    "\11\120\6\u020a\6\120\1\0\2\u01fa\10\0\1\u01fb\1\57"+
    "\1\0\1\u01fa\1\0\4\u01fa\11\0\6\u01fa\6\0\1\65"+
    "\2\u020d\10\65\1\u020e\1\131\1\104\1\u020d\1\65\4\u020d"+
    "\10\65\1\67\6\u020d\7\65\2\u020d\10\65\1\u020e\1\65"+
    "\1\104\1\u020d\1\65\4\u020d\11\65\6\u020d\6\65\1\0"+
    "\2\u020f\10\0\1\u0210\1\114\1\0\1\u020f\1\0\4\u020f"+
    "\10\0\1\54\6\u020f\7\0\2\u020f\10\0\1\u0210\2\0"+
    "\1\u020f\1\0\4\u020f\11\0\6\u020f\6\0\1\120\2\u0211"+
    "\10\120\1\u0212\1\157\1\120\1\u0211\1\120\4\u0211\10\120"+
    "\1\124\6\u0211\7\120\2\u0211\10\120\1\u0213\2\120\1\u0211"+
    "\1\120\4\u0211\11\120\6\u0211\6\120\1\0\2\u0201\10\0"+
    "\1\u0202\1\57\1\0\1\u0201\1\0\4\u0201\11\0\6\u0201"+
    "\6\0\1\65\2\u0214\10\65\1\u0215\1\131\1\104\1\u0214"+
    "\1\65\4\u0214\10\65\1\67\6\u0214\7\65\2\u0214\10\65"+
    "\1\u0215\1\65\1\104\1\u0214\1\65\4\u0214\11\65\6\u0214"+
    "\6\65\1\0\2\u0216\10\0\1\u0217\1\114\1\0\1\u0216"+
    "\1\0\4\u0216\10\0\1\54\6\u0216\7\0\2\u0216\10\0"+
    "\1\u0217\2\0\1\u0216\1\0\4\u0216\11\0\6\u0216\6\0"+
    "\1\120\2\u0218\10\120\1\u0219\1\157\1\120\1\u0218\1\120"+
    "\4\u0218\10\120\1\124\6\u0218\7\120\2\u0218\10\120\1\u021a"+
    "\2\120\1\u0218\1\120\4\u0218\11\120\6\u0218\6\120\1\0"+
    "\2\u0208\10\0\1\u0209\1\57\1\0\1\u0208\1\0\4\u0208"+
    "\11\0\6\u0208\6\0\1\65\2\u021b\10\65\1\u021c\1\131"+
    "\1\104\1\u021b\1\65\4\u021b\10\65\1\67\6\u021b\7\65"+
    "\2\u021b\10\65\1\u021c\1\65\1\104\1\u021b\1\65\4\u021b"+
    "\11\65\6\u021b\6\65\1\0\2\u021d\10\0\1\u021e\1\114"+
    "\1\0\1\u021d\1\0\4\u021d\10\0\1\54\6\u021d\7\0"+
    "\2\u021d\10\0\1\u021e\2\0\1\u021d\1\0\4\u021d\11\0"+
    "\6\u021d\6\0\1\120\2\u021f\10\120\1\u0220\1\157\1\120"+
    "\1\u021f\1\120\4\u021f\10\120\1\124\6\u021f\7\120\2\u021f"+
    "\10\120\1\u0221\2\120\1\u021f\1\120\4\u021f\11\120\6\u021f"+
    "\6\120\1\0\2\u020f\10\0\1\u0210\1\57\1\0\1\u020f"+
    "\1\0\4\u020f\11\0\6\u020f\6\0\1\65\2\u0222\10\65"+
    "\1\u0223\1\131\1\104\1\u0222\1\65\4\u0222\10\65\1\67"+
    "\6\u0222\7\65\2\u0222\10\65\1\u0223\1\65\1\104\1\u0222"+
    "\1\65\4\u0222\11\65\6\u0222\6\65\1\0\2\u0224\10\0"+
    "\1\u0225\1\114\1\0\1\u0224\1\0\4\u0224\10\0\1\54"+
    "\6\u0224\7\0\2\u0224\10\0\1\u0225\2\0\1\u0224\1\0"+
    "\4\u0224\11\0\6\u0224\6\0\1\120\2\u0226\10\120\1\u0227"+
    "\1\157\1\120\1\u0226\1\120\4\u0226\10\120\1\124\6\u0226"+
    "\7\120\2\u0226\10\120\1\u0228\2\120\1\u0226\1\120\4\u0226"+
    "\11\120\6\u0226\6\120\1\0\2\u0216\10\0\1\u0217\1\57"+
    "\1\0\1\u0216\1\0\4\u0216\11\0\6\u0216\6\0\1\65"+
    "\2\u0229\10\65\1\u022a\1\131\1\104\1\u0229\1\65\4\u0229"+
    "\10\65\1\67\6\u0229\7\65\2\u0229\10\65\1\u022a\1\65"+
    "\1\104\1\u0229\1\65\4\u0229\11\65\6\u0229\6\65\1\0"+
    "\2\u022b\10\0\1\u022c\1\114\1\0\1\u022b\1\0\4\u022b"+
    "\10\0\1\54\6\u022b\7\0\2\u022b\10\0\1\u022c\2\0"+
    "\1\u022b\1\0\4\u022b\11\0\6\u022b\6\0\1\120\2\u022d"+
    "\10\120\1\u022e\1\157\1\120\1\u022d\1\120\4\u022d\10\120"+
    "\1\124\6\u022d\7\120\2\u022d\10\120\1\u022f\2\120\1\u022d"+
    "\1\120\4\u022d\11\120\6\u022d\6\120\1\0\2\u021d\10\0"+
    "\1\u021e\1\57\1\0\1\u021d\1\0\4\u021d\11\0\6\u021d"+
    "\6\0\1\65\2\u0230\10\65\1\u0231\1\131\1\104\1\u0230"+
    "\1\65\4\u0230\10\65\1\67\6\u0230\7\65\2\u0230\10\65"+
    "\1\u0231\1\65\1\104\1\u0230\1\65\4\u0230\11\65\6\u0230"+
    "\6\65\1\0\2\u0232\11\0\1\114\1\0\1\u0232\1\0"+
    "\4\u0232\10\0\1\54\6\u0232\7\0\2\u0232\13\0\1\u0232"+
    "\1\0\4\u0232\11\0\6\u0232\6\0\1\120\2\u0233\10\120"+
    "\1\u0234\1\157\1\120\1\u0233\1\120\4\u0233\10\120\1\124"+
    "\6\u0233\7\120\2\u0233\10\120\1\u0235\2\120\1\u0233\1\120"+
    "\4\u0233\11\120\6\u0233\6\120\1\0\2\u0224\10\0\1\u0225"+
    "\1\57\1\0\1\u0224\1\0\4\u0224\11\0\6\u0224\6\0"+
    "\1\65\2\u0236\11\65\1\131\1\104\1\u0236\1\65\4\u0236"+
    "\10\65\1\67\6\u0236\7\65\2\u0236\12\65\1\104\1\u0236"+
    "\1\65\4\u0236\11\65\6\u0236\6\65\14\0\1\114\17\0"+
    "\1\54\14\0\1\120\2\u0237\10\120\1\u0238\1\157\1\120"+
    "\1\u0237\1\120\4\u0237\10\120\1\124\6\u0237\7\120\2\u0237"+
    "\10\120\1\u0239\2\120\1\u0237\1\120\4\u0237\11\120\6\u0237"+
    "\6\120\1\0\2\u022b\10\0\1\u022c\1\57\1\0\1\u022b"+
    "\1\0\4\u022b\11\0\6\u022b\6\0\14\65\1\131\1\104"+
    "\16\65\1\67\14\65\1\120\2\u023a\10\120\1\141\1\157"+
    "\1\120\1\u023a\1\120\4\u023a\10\120\1\124\6\u023a\7\120"+
    "\2\u023a\10\120\1\77\2\120\1\u023a\1\120\4\u023a\11\120"+
    "\6\u023a\6\120\1\0\2\u0232\11\0\1\57\1\0\1\u0232"+
    "\1\0\4\u0232\11\0\6\u0232\6\0\13\120\1\141\1\157"+
    "\17\120\1\124\14\120";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22427];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\2\1\2\11\3\1\1\11\2\1\3\11"+
    "\4\1\2\11\3\1\3\0\1\11\1\1\5\0\3\1"+
    "\2\0\1\1\3\0\1\11\11\0\3\1\13\0\1\1"+
    "\4\0\1\11\2\0\1\11\3\0\1\1\5\0\1\1"+
    "\25\0\1\1\16\0\1\1\3\0\1\1\2\0\1\1"+
    "\7\0\2\1\12\0\2\1\14\0\1\1\14\0\1\1"+
    "\23\0\1\1\u0172\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[570];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  private static class Token implements MarkdownTokenTypes {}

  private Stack<Integer> stateStack = new Stack<Integer>();

  private boolean isHeader = false;

  private ParseDelimited parseDelimited = new ParseDelimited();

  private static class ParseDelimited {
    char exitChar = 0;
    IElementType returnType = null;
    boolean inlinesAllowed = true;
  }

  private static class LinkDef {
    boolean wasUrl;
    boolean wasParen;
  }

  private static class HtmlHelper {
    private static final String BLOCK_TAGS_STRING =
            "article, header, aside, hgroup, blockquote, hr, iframe, body, li, map, button, " +
            "object, canvas, ol, caption, output, col, p, colgroup, pre, dd, progress, div, " +
            "section, dl, table, td, dt, tbody, embed, textarea, fieldset, tfoot, figcaption, " +
            "th, figure, thead, footer, footer, tr, form, ul, h1, h2, h3, h4, h5, h6, video, " +
            "script, style";

    static final Set<String> BLOCK_TAGS = getBlockTagsSet();

    private static Set<String> getBlockTagsSet() {
      Set<String> result = new HashSet<String>();
      String[] tags = BLOCK_TAGS_STRING.split(", ");
      for (String tag : tags) {
        result.add(tag);
      }
      return result;
    }
  }

  private static IElementType getDelimiterTokenType(char c) {
    switch (c) {
      case '"': return Token.DOUBLE_QUOTE;
      case '\'': return Token.SINGLE_QUOTE;
      case '(': return Token.LPAREN;
      case ')': return Token.RPAREN;
      case '[': return Token.LBRACKET;
      case ']': return Token.RBRACKET;
      case '<': return Token.LT;
      case '>': return Token.GT;
      default: return Token.BAD_CHARACTER;
    }
  }

  private IElementType parseDelimited(IElementType contentsType, boolean allowInlines) {
    char first = yycharat(0);
    char last = yycharat(yylength() - 1);

    stateStack.push(yystate());

    parseDelimited.exitChar = last;
    parseDelimited.returnType = contentsType;
//    parseDelimited.inlinesAllowed = allowInlines;
    parseDelimited.inlinesAllowed = true;

    yybegin(PARSE_DELIMITED);

    yypushback(yylength() - 1);
    return getDelimiterTokenType(first);
  }

  private void processEol() {
    int newlinePos = 1;
    while (newlinePos < yylength() && yycharat(newlinePos) != '\n') {
      newlinePos++;
    }

    // there is always one at 0 so that means there are two at least
    if (newlinePos != yylength()) {
      yypushback(yylength() - newlinePos);
      return;
    }

    yybegin(YYINITIAL);
    yypushback(yylength() - 1);

    isHeader = false;
  }

  private void popState() {
    if (stateStack.isEmpty()) {
      yybegin(AFTER_LINE_START);
    }
    else {
      yybegin(stateStack.pop());
    }
  }

  private void resetState() {
    yypushback(yylength());

    popState();
  }

  private String getTagName() {
    if (yylength() > 1 && yycharat(1) == '/') {
      return yytext().toString().substring(2, yylength() - 1).trim();
    }
    return yytext().toString().substring(1);
  }

  private boolean isBlockTag(String tagName) {
    return HtmlHelper.BLOCK_TAGS.contains(tagName.toLowerCase());
  }

  private boolean canInline() {
    return yystate() == AFTER_LINE_START || yystate() == PARSE_DELIMITED && parseDelimited.inlinesAllowed;
  }

  private IElementType getReturnGeneralized(IElementType defaultType) {
    if (canInline()) {
      return defaultType;
    }
    return parseDelimited.returnType;
  }

  private int countChars(CharSequence s, char c) {
    int result = 0;
    for (int i = 0; i < s.length(); ++i) {
      if (s.charAt(i) == c)
        result++;
    }
    return result;
  }



  public _GFMLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _GFMLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 120) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 17: 
          { return parseDelimited(Token.AUTOLINK, false);
          }
        case 19: break;
        case 8: 
          { return Token.COLON;
          }
        case 20: break;
        case 16: 
          { return parseDelimited(Token.EMAIL_AUTOLINK, false);
          }
        case 21: break;
        case 2: 
          { return Token.BLOCK_QUOTE;
          }
        case 22: break;
        case 11: 
          { return getReturnGeneralized(GFMTokenTypes.TILDE);
          }
        case 23: break;
        case 10: 
          { if (canInline()) {
      return Token.BACKTICK;
    }
    return parseDelimited.returnType;
          }
        case 24: break;
        case 13: 
          { return getReturnGeneralized(Token.TEXT);
          }
        case 25: break;
        case 14: 
          { return getReturnGeneralized(Token.ESCAPED_BACKTICKS);
          }
        case 26: break;
        case 12: 
          { if (yycharat(0) == parseDelimited.exitChar) {
      yybegin(stateStack.pop());
      return getDelimiterTokenType(yycharat(0));
    }
    return parseDelimited.returnType;
          }
        case 27: break;
        case 9: 
          { return getReturnGeneralized(Token.EMPH);
          }
        case 28: break;
        case 15: 
          { return Token.HTML_TAG;
          }
        case 29: break;
        case 18: 
          { return GFMTokenTypes.GFM_AUTOLINK;
          }
        case 30: break;
        case 3: 
          { return Token.TEXT;
          }
        case 31: break;
        case 4: 
          { return Token.WHITE_SPACE;
          }
        case 32: break;
        case 6: 
          { return getDelimiterTokenType(yycharat(0));
          }
        case 33: break;
        case 1: 
          { resetState();
          }
        case 34: break;
        case 7: 
          { return Token.EXCLAMATION_MARK;
          }
        case 35: break;
        case 5: 
          { int lastSpaces = yytext().toString().indexOf("\n");
    if (lastSpaces >= 2) {
      yypushback(yylength() - lastSpaces);
      return Token.HARD_LINE_BREAK;
    }
    else if (lastSpaces > 0) {
      yypushback(yylength() - lastSpaces);
      return Token.WHITE_SPACE;
    }

    processEol();
    return Token.EOL;
          }
        case 36: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
