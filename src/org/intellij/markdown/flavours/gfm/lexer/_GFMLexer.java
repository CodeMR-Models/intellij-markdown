/* The following code was generated by JFlex 1.4.3 on 9/9/15 5:13 AM */

package org.intellij.markdown.flavours.gfm.lexer;

import org.intellij.markdown.IElementType;
import org.intellij.markdown.MarkdownTokenTypes;
import org.intellij.markdown.flavours.gfm.GFMTokenTypes;
import org.intellij.markdown.lexer.GeneratedLexer;

import java.util.HashSet;
import java.util.Set;
import java.util.Stack;

/* Auto generated File */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/9/15 5:13 AM from the specification file
 * <tt>/Users/valich/work/intellij-markdown/src/org/intellij/markdown/flavours/gfm/lexer/gfm.flex</tt>
 */
public class _GFMLexer implements GeneratedLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int CODE = 8;
  public static final int AFTER_LINE_START = 4;
  public static final int TAG_START = 2;
  public static final int YYINITIAL = 0;
  public static final int PARSE_DELIMITED = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\4\1\0\1\3\1\5\22\0\1\3\1\12\1\6"+
    "\4\36\1\10\1\41\1\41\1\37\1\36\1\35\1\13\1\34\1\31"+
    "\12\1\1\25\1\0\1\11\1\30\1\14\1\15\1\33\1\22\1\16"+
    "\1\20\1\21\17\16\1\23\6\16\1\17\1\7\1\24\1\32\1\26"+
    "\1\27\32\2\1\36\1\32\1\36\1\40\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\3\1\1\2\2\3\1\4\1\5\1\6\1\3"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\4\14\3\0"+
    "\1\15\1\16\7\0\1\15\3\0\1\17\26\0\1\20"+
    "\2\0\1\21\3\0\1\17\5\0\1\20\22\0\1\20"+
    "\20\0\1\17\2\0\1\17\74\0\1\17\u0172\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[547];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\210"+
    "\0\210\0\356\0\u0110\0\u0132\0\210\0\u0154\0\u0176\0\210"+
    "\0\210\0\210\0\u0198\0\210\0\210\0\u01ba\0\u0154\0\u0176"+
    "\0\u01dc\0\356\0\u01fe\0\210\0\u0220\0\u0242\0\u0264\0\u0286"+
    "\0\u02a8\0\u02ca\0\u01ba\0\u02ec\0\u01fe\0\u030e\0\u0330\0\u0352"+
    "\0\210\0\u0374\0\u0396\0\u03b8\0\u03da\0\u03fc\0\u041e\0\u0440"+
    "\0\u0462\0\u0484\0\u04a6\0\u04c8\0\u04ea\0\u050c\0\u052e\0\u0550"+
    "\0\u0572\0\u0594\0\u05b6\0\u05d8\0\u05fa\0\u061c\0\u063e\0\210"+
    "\0\u0660\0\u0682\0\210\0\u06a4\0\u06c6\0\u06e8\0\u06a4\0\u070a"+
    "\0\u072c\0\u074e\0\u0770\0\u0792\0\u041e\0\u07b4\0\u07d6\0\u07f8"+
    "\0\u081a\0\u083c\0\u085e\0\u0880\0\u08a2\0\u08c4\0\u08e6\0\u0908"+
    "\0\u092a\0\u094c\0\u096e\0\u0990\0\u09b2\0\u09d4\0\u09f6\0\u06a4"+
    "\0\u0a18\0\u0a3a\0\u0a5c\0\u0a7e\0\u0aa0\0\u0ac2\0\u0ae4\0\u0b06"+
    "\0\u0b28\0\u0b4a\0\u0b6c\0\u0b8e\0\u0bb0\0\u0bd2\0\u0bf4\0\u0c16"+
    "\0\u081a\0\u0c38\0\u0c5a\0\u083c\0\u0c7c\0\u0c9e\0\u0cc0\0\u0ce2"+
    "\0\u0d04\0\u0d26\0\u0d48\0\u0d6a\0\u0d8c\0\u0dae\0\u0dd0\0\u0df2"+
    "\0\u0e14\0\u0e36\0\u0e58\0\u0e7a\0\u0e9c\0\u0ebe\0\u0ee0\0\u0f02"+
    "\0\u0f24\0\u0f46\0\u0f68\0\u0f8a\0\u0fac\0\u0fce\0\u0ff0\0\u1012"+
    "\0\u1034\0\u1056\0\u1078\0\u109a\0\u10bc\0\u10de\0\u1100\0\u1122"+
    "\0\u1144\0\u1166\0\u1188\0\u11aa\0\u11cc\0\u11ee\0\u1210\0\u1232"+
    "\0\u1254\0\u1276\0\u1298\0\u12ba\0\u12dc\0\u12fe\0\u1320\0\u1342"+
    "\0\u1364\0\u1386\0\u13a8\0\u13ca\0\u13ec\0\u140e\0\u1430\0\u1452"+
    "\0\u10de\0\u1474\0\u1496\0\u14b8\0\u14da\0\u14fc\0\u151e\0\u1540"+
    "\0\u1562\0\u1584\0\u15a6\0\u15c8\0\u15ea\0\u160c\0\u162e\0\u1650"+
    "\0\u1672\0\u1694\0\u16b6\0\u16d8\0\u16fa\0\u171c\0\u173e\0\u1760"+
    "\0\u1782\0\u17a4\0\u17c6\0\u17e8\0\u180a\0\u182c\0\u184e\0\u1870"+
    "\0\u1892\0\u18b4\0\u18d6\0\u18f8\0\u191a\0\u193c\0\u195e\0\u1980"+
    "\0\u19a2\0\u19c4\0\u19e6\0\u1a08\0\u1a2a\0\u1a4c\0\u1a6e\0\u1a90"+
    "\0\u1ab2\0\u1ad4\0\u1af6\0\u1b18\0\u1b3a\0\u1b5c\0\u1b7e\0\u1ba0"+
    "\0\u1bc2\0\u1be4\0\u1c06\0\u1c28\0\u1c4a\0\u1c6c\0\u1c8e\0\u1cb0"+
    "\0\u1cd2\0\u1cf4\0\u1d16\0\u1d38\0\u1d5a\0\u1d7c\0\u1d9e\0\u1dc0"+
    "\0\u1de2\0\u1e04\0\u1e26\0\u1e48\0\u1e6a\0\u1e8c\0\u1eae\0\u1ed0"+
    "\0\u1ef2\0\u1f14\0\u1f36\0\u1f58\0\u1f7a\0\u1f9c\0\u1fbe\0\u1fe0"+
    "\0\u2002\0\u2024\0\u2046\0\u2068\0\u208a\0\u20ac\0\u20ce\0\u20f0"+
    "\0\u2112\0\u2134\0\u2156\0\u2178\0\u219a\0\u21bc\0\u21de\0\u2200"+
    "\0\u2222\0\u2244\0\u2266\0\u2288\0\u22aa\0\u22cc\0\u22ee\0\u2310"+
    "\0\u2332\0\u2354\0\u2376\0\u2398\0\u23ba\0\u23dc\0\u23fe\0\u2420"+
    "\0\u2442\0\u2464\0\u2486\0\u24a8\0\u24ca\0\u24ec\0\u250e\0\u2530"+
    "\0\u2552\0\u2574\0\u2596\0\u25b8\0\u25da\0\u25fc\0\u261e\0\u2640"+
    "\0\u2662\0\u2684\0\u26a6\0\u26c8\0\u26ea\0\u270c\0\u272e\0\u2750"+
    "\0\u2772\0\u2794\0\u27b6\0\u27d8\0\u27fa\0\u281c\0\u283e\0\u2860"+
    "\0\u2882\0\u28a4\0\u28c6\0\u28e8\0\u290a\0\u292c\0\u294e\0\u2970"+
    "\0\u2992\0\u29b4\0\u29d6\0\u29f8\0\u2a1a\0\u2a3c\0\u2a5e\0\u2a80"+
    "\0\u2aa2\0\u2ac4\0\u2ae6\0\u2b08\0\u2b2a\0\u2b4c\0\u2b6e\0\u2b90"+
    "\0\u2bb2\0\u2bd4\0\u2bf6\0\u2c18\0\u2c3a\0\u2c5c\0\u2c7e\0\u2ca0"+
    "\0\u2cc2\0\u2ce4\0\u2d06\0\u2d28\0\u2d4a\0\u2d6c\0\u2d8e\0\u2db0"+
    "\0\u2dd2\0\u2df4\0\u2e16\0\u2e38\0\u2e5a\0\u2e7c\0\u2e9e\0\u2ec0"+
    "\0\u2ee2\0\u2f04\0\u2f26\0\u2f48\0\u2f6a\0\u2f8c\0\u2fae\0\u2fd0"+
    "\0\u2ff2\0\u3014\0\u3036\0\u3058\0\u307a\0\u309c\0\u30be\0\u30e0"+
    "\0\u3102\0\u3124\0\u3146\0\u3168\0\u318a\0\u31ac\0\u31ce\0\u31f0"+
    "\0\u3212\0\u3234\0\u3256\0\u3278\0\u329a\0\u32bc\0\u32de\0\u3300"+
    "\0\u3322\0\u3344\0\u3366\0\u3388\0\u33aa\0\u33cc\0\u33ee\0\u3410"+
    "\0\u3432\0\u3454\0\u3476\0\u3498\0\u34ba\0\u34dc\0\u34fe\0\u3520"+
    "\0\u3542\0\u3564\0\u3586\0\u35a8\0\u35ca\0\u35ec\0\u360e\0\u3630"+
    "\0\u3652\0\u3674\0\u3696\0\u36b8\0\u36da\0\u36fc\0\u371e\0\u3740"+
    "\0\u3762\0\u3784\0\u37a6\0\u37c8\0\u37ea\0\u380c\0\u382e\0\u3850"+
    "\0\u3872\0\u3894\0\u38b6\0\u38d8\0\u38fa\0\u391c\0\u393e\0\u3960"+
    "\0\u3982\0\u39a4\0\u39c6\0\u39e8\0\u3a0a\0\u3a2c\0\u3a4e\0\u3a70"+
    "\0\u3a92\0\u3ab4\0\u3ad6\0\u3af8\0\u3b1a\0\u3b3c\0\u3b5e\0\u3b80"+
    "\0\u3ba2\0\u3bc4\0\u3be6\0\u3c08\0\u3c2a\0\u3c4c\0\u3c6e\0\u3c90"+
    "\0\u3cb2\0\u3cd4\0\u3cf6\0\u3d18\0\u3d3a\0\u3d5c\0\u3d7e\0\u3da0"+
    "\0\u3dc2\0\u3de4\0\u3e06\0\u3e28\0\u3e4a\0\u3e6c\0\u3e8e\0\u3eb0"+
    "\0\u3ed2\0\u3ef4\0\u3f16\0\u3f38\0\u3f5a\0\u3f7c\0\u3f9e\0\u3fc0"+
    "\0\u3fe2\0\u4004\0\u4026\0\u4048\0\u406a\0\u408c\0\u40ae\0\u40d0"+
    "\0\u40f2\0\u4114\0\u4136\0\u4158\0\u417a\0\u419c\0\u41be\0\u41e0"+
    "\0\u4202\0\u4224\0\u4246\0\u4268\0\u428a\0\u42ac\0\u42ce\0\u42f0"+
    "\0\u4312\0\u4334\0\u4356\0\u4378\0\u439a\0\u43bc\0\u43de\0\u4400"+
    "\0\u4422\0\u4444\0\u4466\0\u4488\0\u44aa\0\u44cc\0\u44ee\0\u4510"+
    "\0\u4532\0\u4554\0\u4576";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[547];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\5\1\6\1\5\1\7\6\5\1\10\25\5\4\11"+
    "\1\0\36\11\2\12\1\13\2\14\1\15\1\16\1\15"+
    "\1\17\1\20\1\11\1\15\1\11\1\12\1\15\4\12"+
    "\1\15\1\21\1\22\1\23\7\11\1\22\1\24\1\15"+
    "\3\25\1\26\1\5\1\7\1\25\1\27\1\25\1\30"+
    "\14\25\1\22\1\23\7\25\1\22\1\24\1\25\45\0"+
    "\1\31\1\5\1\7\6\0\1\10\31\0\1\5\36\0"+
    "\2\12\1\32\12\0\1\12\1\0\4\12\21\0\1\13"+
    "\2\14\20\0\1\33\10\0\1\33\5\0\3\14\42\0"+
    "\7\34\2\0\1\34\4\0\3\34\1\35\1\0\1\34"+
    "\1\0\7\34\1\0\1\36\1\37\5\0\1\36\1\0"+
    "\1\40\1\36\1\0\1\41\1\37\1\0\4\37\2\0"+
    "\3\36\1\42\1\36\1\0\1\36\1\0\3\36\30\0"+
    "\1\23\15\0\1\43\22\0\1\33\10\0\1\33\5\0"+
    "\1\44\1\5\1\7\6\0\1\10\30\0\1\45\65\0"+
    "\1\35\13\0\2\36\5\0\1\36\1\0\2\36\1\0"+
    "\2\36\1\0\4\36\2\0\5\36\1\46\1\36\1\0"+
    "\3\36\2\0\1\47\1\37\1\50\4\0\1\36\1\0"+
    "\2\36\1\51\1\36\1\37\1\0\4\37\1\0\1\52"+
    "\3\36\1\53\1\36\1\46\1\36\1\0\3\36\2\0"+
    "\2\36\5\0\1\36\1\0\1\36\1\54\1\0\1\36"+
    "\1\55\1\56\4\55\2\0\5\36\1\46\1\36\1\0"+
    "\3\36\1\0\1\57\2\41\5\57\1\41\1\57\2\41"+
    "\1\57\1\60\1\41\1\57\4\41\2\57\5\41\1\61"+
    "\1\41\1\57\3\41\1\57\1\0\1\36\1\62\5\0"+
    "\1\36\1\0\2\36\1\0\1\36\1\62\1\0\4\62"+
    "\2\0\5\36\1\46\1\36\1\0\3\36\4\0\1\63"+
    "\1\5\1\7\6\0\1\10\26\0\2\64\13\0\1\64"+
    "\1\0\4\64\17\0\2\47\1\50\4\0\1\36\1\0"+
    "\2\36\1\51\1\36\1\47\1\0\4\47\2\0\3\36"+
    "\1\53\1\36\1\46\1\36\1\0\3\36\3\0\1\65"+
    "\1\50\7\0\1\65\1\51\1\0\1\65\1\0\4\65"+
    "\1\0\1\65\3\0\1\66\10\0\3\67\2\0\4\67"+
    "\1\0\2\67\1\0\25\67\1\0\2\36\5\0\1\36"+
    "\1\0\2\36\1\51\2\36\1\0\4\36\2\0\5\36"+
    "\1\46\1\36\1\0\3\36\2\0\2\36\5\0\1\36"+
    "\1\0\1\36\1\70\1\0\2\36\1\0\4\36\2\0"+
    "\5\36\1\46\1\36\1\0\3\36\2\0\2\36\1\71"+
    "\4\0\1\36\1\0\2\36\1\0\1\36\1\55\1\0"+
    "\4\55\2\0\5\36\1\46\1\36\1\0\3\36\21\0"+
    "\1\72\21\0\15\57\1\73\25\57\2\41\5\57\1\41"+
    "\1\57\2\41\1\51\2\41\1\57\4\41\2\57\5\41"+
    "\1\61\1\41\1\57\3\41\2\57\2\74\12\57\1\73"+
    "\1\74\1\57\4\74\16\57\1\0\2\62\1\75\4\0"+
    "\1\36\1\0\2\36\1\51\1\36\1\62\1\0\4\62"+
    "\2\0\5\36\1\46\1\36\1\0\3\36\4\0\1\63"+
    "\1\5\1\7\35\0\2\76\10\0\1\77\1\100\1\0"+
    "\1\76\1\0\4\76\10\0\1\46\6\0\2\65\1\101"+
    "\7\0\1\65\1\51\1\0\1\65\1\0\4\65\1\0"+
    "\2\65\1\0\1\102\1\66\2\0\1\65\21\0\1\51"+
    "\25\0\3\67\2\0\4\67\1\0\2\67\1\103\25\67"+
    "\1\104\2\105\5\104\1\105\1\104\1\105\1\106\1\107"+
    "\2\105\1\104\4\105\2\104\5\105\1\110\1\105\1\104"+
    "\3\105\1\104\3\66\1\111\10\66\1\0\25\66\21\0"+
    "\1\112\20\0\14\57\1\51\26\57\2\113\10\57\1\114"+
    "\1\115\1\73\1\113\1\57\4\113\10\57\1\61\5\57"+
    "\3\0\1\75\10\0\1\51\26\0\2\116\10\0\1\117"+
    "\1\100\1\0\1\116\1\0\4\116\10\0\1\46\6\0"+
    "\2\116\10\0\1\117\2\0\1\116\1\0\4\116\20\0"+
    "\1\65\1\101\7\0\1\65\1\51\1\0\1\65\1\0"+
    "\4\65\1\0\1\65\2\0\1\102\1\66\10\0\3\120"+
    "\1\102\2\0\1\121\1\120\1\122\1\0\2\120\1\0"+
    "\12\120\2\0\11\120\13\104\1\123\27\104\2\105\5\104"+
    "\1\105\1\104\1\105\1\124\1\104\2\105\1\104\4\105"+
    "\2\104\5\105\1\110\1\105\1\104\3\105\2\104\2\105"+
    "\5\104\1\105\1\104\1\105\1\53\1\107\2\105\1\104"+
    "\4\105\2\104\5\105\1\110\1\105\1\104\3\105\2\104"+
    "\2\125\10\104\1\123\2\104\1\125\1\104\4\125\16\104"+
    "\3\66\1\111\10\66\1\51\25\66\22\0\1\126\17\0"+
    "\1\57\2\127\10\57\1\130\1\115\1\73\1\127\1\57"+
    "\4\127\10\57\1\61\6\57\2\127\10\57\1\130\1\57"+
    "\1\73\1\127\1\57\4\127\16\57\1\0\2\131\10\0"+
    "\1\132\1\100\1\0\1\131\1\0\4\131\10\0\1\46"+
    "\6\0\2\131\10\0\1\132\2\0\1\131\1\0\4\131"+
    "\16\0\3\120\1\50\3\0\1\120\2\0\2\120\1\51"+
    "\12\120\2\0\11\120\4\121\1\0\1\121\1\133\1\134"+
    "\32\121\4\122\1\0\2\122\1\135\1\133\31\122\13\104"+
    "\1\66\27\104\2\105\5\104\1\105\1\104\1\105\1\53"+
    "\1\104\2\105\1\104\4\105\2\104\5\105\1\110\1\105"+
    "\1\104\3\105\2\104\2\136\10\104\1\137\1\140\1\104"+
    "\1\136\1\104\4\136\10\104\1\110\5\104\23\0\1\141"+
    "\16\0\1\57\2\142\10\57\1\143\1\115\1\73\1\142"+
    "\1\57\4\142\10\57\1\61\6\57\2\142\10\57\1\143"+
    "\1\57\1\73\1\142\1\57\4\142\16\57\1\0\2\144"+
    "\10\0\1\145\1\100\1\0\1\144\1\0\4\144\10\0"+
    "\1\46\6\0\2\144\10\0\1\145\2\0\1\144\1\0"+
    "\4\144\21\0\1\50\10\0\1\51\14\0\1\66\10\0"+
    "\4\121\1\0\1\121\1\146\1\134\32\121\4\122\1\0"+
    "\2\122\1\135\1\147\31\122\1\104\2\150\10\104\1\151"+
    "\1\140\1\104\1\150\1\104\4\150\10\104\1\110\6\104"+
    "\2\150\10\104\1\152\2\104\1\150\1\104\4\150\16\104"+
    "\22\0\1\153\17\0\1\57\2\154\10\57\1\155\1\115"+
    "\1\73\1\154\1\57\4\154\10\57\1\61\6\57\2\154"+
    "\10\57\1\155\1\57\1\73\1\154\1\57\4\154\16\57"+
    "\1\0\2\156\10\0\1\157\1\100\1\0\1\156\1\0"+
    "\4\156\10\0\1\46\6\0\2\156\10\0\1\157\2\0"+
    "\1\156\1\0\4\156\16\0\3\121\1\160\1\0\1\121"+
    "\1\133\1\134\4\121\1\161\14\121\1\162\10\121\3\122"+
    "\1\163\1\0\2\122\1\135\1\133\3\122\1\164\14\122"+
    "\1\165\10\122\1\104\2\166\10\104\1\167\1\140\1\104"+
    "\1\166\1\104\4\166\10\104\1\110\6\104\2\166\10\104"+
    "\1\170\2\104\1\166\1\104\4\166\16\104\1\0\2\131"+
    "\10\0\1\132\1\51\1\0\1\131\1\0\4\131\35\0"+
    "\1\171\22\0\1\57\2\172\10\57\1\173\1\115\1\73"+
    "\1\172\1\57\4\172\10\57\1\61\6\57\2\172\10\57"+
    "\1\173\1\57\1\73\1\172\1\57\4\172\16\57\1\0"+
    "\2\174\10\0\1\175\1\100\1\0\1\174\1\0\4\174"+
    "\10\0\1\46\6\0\2\174\10\0\1\175\2\0\1\174"+
    "\1\0\4\174\16\0\2\121\1\176\1\160\1\0\1\121"+
    "\1\133\1\134\3\121\1\176\1\161\1\121\1\176\1\121"+
    "\4\176\1\121\1\176\3\121\1\162\14\121\1\0\1\121"+
    "\1\133\1\134\4\121\1\161\25\121\2\122\1\177\1\163"+
    "\1\0\2\122\1\135\1\133\2\122\1\177\1\164\1\122"+
    "\1\177\1\122\4\177\1\122\1\177\3\122\1\165\14\122"+
    "\1\0\2\122\1\135\1\133\3\122\1\164\25\122\1\104"+
    "\2\200\10\104\1\201\1\140\1\104\1\200\1\104\4\200"+
    "\10\104\1\110\6\104\2\200\10\104\1\202\2\104\1\200"+
    "\1\104\4\200\16\104\1\0\2\144\10\0\1\145\1\51"+
    "\1\0\1\144\1\0\4\144\16\0\24\171\1\203\15\171"+
    "\1\57\2\204\10\57\1\205\1\115\1\73\1\204\1\57"+
    "\4\204\10\57\1\61\6\57\2\204\10\57\1\205\1\57"+
    "\1\73\1\204\1\57\4\204\16\57\1\0\2\206\10\0"+
    "\1\207\1\100\1\0\1\206\1\0\4\206\10\0\1\46"+
    "\6\0\2\206\10\0\1\207\2\0\1\206\1\0\4\206"+
    "\16\0\1\121\2\176\1\210\1\0\1\121\1\133\1\134"+
    "\3\121\1\176\1\161\1\121\1\176\1\121\4\176\1\121"+
    "\2\176\1\121\1\211\1\162\2\121\1\176\5\121\1\122"+
    "\2\177\1\212\1\0\2\122\1\135\1\133\2\122\1\177"+
    "\1\164\1\122\1\177\1\122\4\177\1\122\2\177\1\122"+
    "\1\213\1\165\2\122\1\177\5\122\1\104\2\214\10\104"+
    "\1\215\1\140\1\104\1\214\1\104\4\214\10\104\1\110"+
    "\6\104\2\214\10\104\1\216\2\104\1\214\1\104\4\214"+
    "\16\104\1\0\2\156\10\0\1\157\1\51\1\0\1\156"+
    "\1\0\4\156\16\0\24\171\1\217\15\171\1\57\2\220"+
    "\10\57\1\221\1\115\1\73\1\220\1\57\4\220\10\57"+
    "\1\61\6\57\2\220\10\57\1\221\1\57\1\73\1\220"+
    "\1\57\4\220\16\57\1\0\2\222\10\0\1\223\1\100"+
    "\1\0\1\222\1\0\4\222\10\0\1\46\6\0\2\222"+
    "\10\0\1\223\2\0\1\222\1\0\4\222\16\0\2\121"+
    "\1\176\1\210\1\0\1\121\1\133\1\134\3\121\1\176"+
    "\1\161\1\121\1\176\1\121\4\176\1\121\1\176\2\121"+
    "\1\211\1\162\10\121\3\224\1\211\1\0\1\121\1\146"+
    "\1\225\1\226\1\121\2\224\1\121\12\224\2\121\11\224"+
    "\2\122\1\177\1\212\1\0\2\122\1\135\1\133\2\122"+
    "\1\177\1\164\1\122\1\177\1\122\4\177\1\122\1\177"+
    "\2\122\1\213\1\165\10\122\3\227\1\213\1\0\1\122"+
    "\1\226\1\230\1\147\1\122\2\227\1\122\12\227\2\122"+
    "\11\227\1\104\2\231\10\104\1\232\1\140\1\104\1\231"+
    "\1\104\4\231\10\104\1\110\6\104\2\231\10\104\1\233"+
    "\2\104\1\231\1\104\4\231\16\104\1\0\2\174\10\0"+
    "\1\175\1\51\1\0\1\174\1\0\4\174\16\0\14\171"+
    "\1\51\25\171\1\57\2\234\10\57\1\235\1\115\1\73"+
    "\1\234\1\57\4\234\10\57\1\61\6\57\2\234\10\57"+
    "\1\235\1\57\1\73\1\234\1\57\4\234\16\57\1\0"+
    "\2\236\10\0\1\237\1\100\1\0\1\236\1\0\4\236"+
    "\10\0\1\46\6\0\2\236\10\0\1\237\2\0\1\236"+
    "\1\0\4\236\16\0\3\224\1\160\1\0\1\121\1\133"+
    "\1\225\2\121\2\224\1\161\12\224\2\121\14\224\1\160"+
    "\1\0\1\121\1\146\1\225\2\121\2\224\1\161\12\224"+
    "\2\121\11\224\4\226\1\0\1\226\1\147\1\240\1\146"+
    "\31\226\3\227\1\163\1\0\2\122\1\230\1\133\1\122"+
    "\2\227\1\164\12\227\2\122\14\227\1\163\1\0\2\122"+
    "\1\230\1\147\1\122\2\227\1\164\12\227\2\122\11\227"+
    "\1\104\2\241\10\104\1\242\1\140\1\104\1\241\1\104"+
    "\4\241\10\104\1\110\6\104\2\241\10\104\1\243\2\104"+
    "\1\241\1\104\4\241\16\104\1\0\2\206\10\0\1\207"+
    "\1\51\1\0\1\206\1\0\4\206\16\0\1\57\2\244"+
    "\10\57\1\245\1\115\1\73\1\244\1\57\4\244\10\57"+
    "\1\61\6\57\2\244\10\57\1\245\1\57\1\73\1\244"+
    "\1\57\4\244\16\57\1\0\2\246\10\0\1\247\1\100"+
    "\1\0\1\246\1\0\4\246\10\0\1\46\6\0\2\246"+
    "\10\0\1\247\2\0\1\246\1\0\4\246\16\0\4\226"+
    "\1\0\1\226\1\250\1\240\1\250\31\226\1\104\2\251"+
    "\10\104\1\252\1\140\1\104\1\251\1\104\4\251\10\104"+
    "\1\110\6\104\2\251\10\104\1\253\2\104\1\251\1\104"+
    "\4\251\16\104\1\0\2\222\10\0\1\223\1\51\1\0"+
    "\1\222\1\0\4\222\16\0\1\57\2\254\10\57\1\255"+
    "\1\115\1\73\1\254\1\57\4\254\10\57\1\61\6\57"+
    "\2\254\10\57\1\255\1\57\1\73\1\254\1\57\4\254"+
    "\16\57\1\0\2\256\10\0\1\257\1\100\1\0\1\256"+
    "\1\0\4\256\10\0\1\46\6\0\2\256\10\0\1\257"+
    "\2\0\1\256\1\0\4\256\16\0\3\226\1\260\1\0"+
    "\1\226\1\147\1\240\1\146\3\226\1\261\14\226\1\262"+
    "\10\226\1\104\2\263\10\104\1\264\1\140\1\104\1\263"+
    "\1\104\4\263\10\104\1\110\6\104\2\263\10\104\1\265"+
    "\2\104\1\263\1\104\4\263\16\104\1\0\2\236\10\0"+
    "\1\237\1\51\1\0\1\236\1\0\4\236\16\0\1\57"+
    "\2\266\10\57\1\267\1\115\1\73\1\266\1\57\4\266"+
    "\10\57\1\61\6\57\2\266\10\57\1\267\1\57\1\73"+
    "\1\266\1\57\4\266\16\57\1\0\2\270\10\0\1\271"+
    "\1\100\1\0\1\270\1\0\4\270\10\0\1\46\6\0"+
    "\2\270\10\0\1\271\2\0\1\270\1\0\4\270\16\0"+
    "\2\226\1\272\1\260\1\0\1\226\1\147\1\240\1\146"+
    "\2\226\1\272\1\261\1\226\1\272\1\226\4\272\1\226"+
    "\1\272\3\226\1\262\14\226\1\0\1\226\1\147\1\240"+
    "\1\146\3\226\1\261\25\226\1\104\2\273\10\104\1\274"+
    "\1\140\1\104\1\273\1\104\4\273\10\104\1\110\6\104"+
    "\2\273\10\104\1\275\2\104\1\273\1\104\4\273\16\104"+
    "\1\0\2\246\10\0\1\247\1\51\1\0\1\246\1\0"+
    "\4\246\16\0\1\57\2\276\10\57\1\277\1\115\1\73"+
    "\1\276\1\57\4\276\10\57\1\61\6\57\2\276\10\57"+
    "\1\277\1\57\1\73\1\276\1\57\4\276\16\57\1\0"+
    "\2\300\10\0\1\301\1\100\1\0\1\300\1\0\4\300"+
    "\10\0\1\46\6\0\2\300\10\0\1\301\2\0\1\300"+
    "\1\0\4\300\16\0\1\226\2\272\1\302\1\0\1\226"+
    "\1\147\1\240\1\146\2\226\1\272\1\261\1\226\1\272"+
    "\1\226\4\272\1\226\2\272\1\226\1\303\1\262\2\226"+
    "\1\272\5\226\1\104\2\304\10\104\1\305\1\140\1\104"+
    "\1\304\1\104\4\304\10\104\1\110\6\104\2\304\10\104"+
    "\1\306\2\104\1\304\1\104\4\304\16\104\1\0\2\256"+
    "\10\0\1\257\1\51\1\0\1\256\1\0\4\256\16\0"+
    "\1\57\2\307\10\57\1\310\1\115\1\73\1\307\1\57"+
    "\4\307\10\57\1\61\6\57\2\307\10\57\1\310\1\57"+
    "\1\73\1\307\1\57\4\307\16\57\1\0\2\311\10\0"+
    "\1\312\1\100\1\0\1\311\1\0\4\311\10\0\1\46"+
    "\6\0\2\311\10\0\1\312\2\0\1\311\1\0\4\311"+
    "\16\0\2\226\1\272\1\302\1\0\1\226\1\147\1\240"+
    "\1\146\2\226\1\272\1\261\1\226\1\272\1\226\4\272"+
    "\1\226\1\272\2\226\1\303\1\262\10\226\3\313\1\303"+
    "\1\0\1\226\1\250\1\314\1\250\1\226\2\313\1\226"+
    "\12\313\2\226\11\313\1\104\2\315\10\104\1\316\1\140"+
    "\1\104\1\315\1\104\4\315\10\104\1\110\6\104\2\315"+
    "\10\104\1\317\2\104\1\315\1\104\4\315\16\104\1\0"+
    "\2\270\10\0\1\271\1\51\1\0\1\270\1\0\4\270"+
    "\16\0\1\57\2\320\10\57\1\321\1\115\1\73\1\320"+
    "\1\57\4\320\10\57\1\61\6\57\2\320\10\57\1\321"+
    "\1\57\1\73\1\320\1\57\4\320\16\57\1\0\2\322"+
    "\10\0\1\323\1\100\1\0\1\322\1\0\4\322\10\0"+
    "\1\46\6\0\2\322\10\0\1\323\2\0\1\322\1\0"+
    "\4\322\16\0\3\313\1\260\1\0\1\226\1\147\1\314"+
    "\1\146\1\226\2\313\1\261\12\313\2\226\14\313\1\260"+
    "\1\0\1\226\1\250\1\314\1\250\1\226\2\313\1\261"+
    "\12\313\2\226\11\313\1\104\2\324\10\104\1\325\1\140"+
    "\1\104\1\324\1\104\4\324\10\104\1\110\6\104\2\324"+
    "\10\104\1\326\2\104\1\324\1\104\4\324\16\104\1\0"+
    "\2\300\10\0\1\301\1\51\1\0\1\300\1\0\4\300"+
    "\16\0\1\57\2\327\10\57\1\330\1\115\1\73\1\327"+
    "\1\57\4\327\10\57\1\61\6\57\2\327\10\57\1\330"+
    "\1\57\1\73\1\327\1\57\4\327\16\57\1\0\2\331"+
    "\10\0\1\332\1\100\1\0\1\331\1\0\4\331\10\0"+
    "\1\46\6\0\2\331\10\0\1\332\2\0\1\331\1\0"+
    "\4\331\16\0\1\104\2\333\10\104\1\334\1\140\1\104"+
    "\1\333\1\104\4\333\10\104\1\110\6\104\2\333\10\104"+
    "\1\335\2\104\1\333\1\104\4\333\16\104\1\0\2\311"+
    "\10\0\1\312\1\51\1\0\1\311\1\0\4\311\16\0"+
    "\1\57\2\336\10\57\1\337\1\115\1\73\1\336\1\57"+
    "\4\336\10\57\1\61\6\57\2\336\10\57\1\337\1\57"+
    "\1\73\1\336\1\57\4\336\16\57\1\0\2\340\10\0"+
    "\1\341\1\100\1\0\1\340\1\0\4\340\10\0\1\46"+
    "\6\0\2\340\10\0\1\341\2\0\1\340\1\0\4\340"+
    "\16\0\1\104\2\342\10\104\1\343\1\140\1\104\1\342"+
    "\1\104\4\342\10\104\1\110\6\104\2\342\10\104\1\344"+
    "\2\104\1\342\1\104\4\342\16\104\1\0\2\322\10\0"+
    "\1\323\1\51\1\0\1\322\1\0\4\322\16\0\1\57"+
    "\2\345\10\57\1\346\1\115\1\73\1\345\1\57\4\345"+
    "\10\57\1\61\6\57\2\345\10\57\1\346\1\57\1\73"+
    "\1\345\1\57\4\345\16\57\1\0\2\347\10\0\1\350"+
    "\1\100\1\0\1\347\1\0\4\347\10\0\1\46\6\0"+
    "\2\347\10\0\1\350\2\0\1\347\1\0\4\347\16\0"+
    "\1\104\2\351\10\104\1\352\1\140\1\104\1\351\1\104"+
    "\4\351\10\104\1\110\6\104\2\351\10\104\1\353\2\104"+
    "\1\351\1\104\4\351\16\104\1\0\2\331\10\0\1\332"+
    "\1\51\1\0\1\331\1\0\4\331\16\0\1\57\2\354"+
    "\10\57\1\355\1\115\1\73\1\354\1\57\4\354\10\57"+
    "\1\61\6\57\2\354\10\57\1\355\1\57\1\73\1\354"+
    "\1\57\4\354\16\57\1\0\2\356\10\0\1\357\1\100"+
    "\1\0\1\356\1\0\4\356\10\0\1\46\6\0\2\356"+
    "\10\0\1\357\2\0\1\356\1\0\4\356\16\0\1\104"+
    "\2\360\10\104\1\361\1\140\1\104\1\360\1\104\4\360"+
    "\10\104\1\110\6\104\2\360\10\104\1\362\2\104\1\360"+
    "\1\104\4\360\16\104\1\0\2\340\10\0\1\341\1\51"+
    "\1\0\1\340\1\0\4\340\16\0\1\57\2\363\10\57"+
    "\1\364\1\115\1\73\1\363\1\57\4\363\10\57\1\61"+
    "\6\57\2\363\10\57\1\364\1\57\1\73\1\363\1\57"+
    "\4\363\16\57\1\0\2\365\10\0\1\366\1\100\1\0"+
    "\1\365\1\0\4\365\10\0\1\46\6\0\2\365\10\0"+
    "\1\366\2\0\1\365\1\0\4\365\16\0\1\104\2\367"+
    "\10\104\1\370\1\140\1\104\1\367\1\104\4\367\10\104"+
    "\1\110\6\104\2\367\10\104\1\371\2\104\1\367\1\104"+
    "\4\367\16\104\1\0\2\347\10\0\1\350\1\51\1\0"+
    "\1\347\1\0\4\347\16\0\1\57\2\372\10\57\1\373"+
    "\1\115\1\73\1\372\1\57\4\372\10\57\1\61\6\57"+
    "\2\372\10\57\1\373\1\57\1\73\1\372\1\57\4\372"+
    "\16\57\1\0\2\374\10\0\1\375\1\100\1\0\1\374"+
    "\1\0\4\374\10\0\1\46\6\0\2\374\10\0\1\375"+
    "\2\0\1\374\1\0\4\374\16\0\1\104\2\376\10\104"+
    "\1\377\1\140\1\104\1\376\1\104\4\376\10\104\1\110"+
    "\6\104\2\376\10\104\1\u0100\2\104\1\376\1\104\4\376"+
    "\16\104\1\0\2\356\10\0\1\357\1\51\1\0\1\356"+
    "\1\0\4\356\16\0\1\57\2\u0101\10\57\1\u0102\1\115"+
    "\1\73\1\u0101\1\57\4\u0101\10\57\1\61\6\57\2\u0101"+
    "\10\57\1\u0102\1\57\1\73\1\u0101\1\57\4\u0101\16\57"+
    "\1\0\2\u0103\10\0\1\u0104\1\100\1\0\1\u0103\1\0"+
    "\4\u0103\10\0\1\46\6\0\2\u0103\10\0\1\u0104\2\0"+
    "\1\u0103\1\0\4\u0103\16\0\1\104\2\u0105\10\104\1\u0106"+
    "\1\140\1\104\1\u0105\1\104\4\u0105\10\104\1\110\6\104"+
    "\2\u0105\10\104\1\u0107\2\104\1\u0105\1\104\4\u0105\16\104"+
    "\1\0\2\365\10\0\1\366\1\51\1\0\1\365\1\0"+
    "\4\365\16\0\1\57\2\u0108\10\57\1\u0109\1\115\1\73"+
    "\1\u0108\1\57\4\u0108\10\57\1\61\6\57\2\u0108\10\57"+
    "\1\u0109\1\57\1\73\1\u0108\1\57\4\u0108\16\57\1\0"+
    "\2\u010a\10\0\1\u010b\1\100\1\0\1\u010a\1\0\4\u010a"+
    "\10\0\1\46\6\0\2\u010a\10\0\1\u010b\2\0\1\u010a"+
    "\1\0\4\u010a\16\0\1\104\2\u010c\10\104\1\u010d\1\140"+
    "\1\104\1\u010c\1\104\4\u010c\10\104\1\110\6\104\2\u010c"+
    "\10\104\1\u010e\2\104\1\u010c\1\104\4\u010c\16\104\1\0"+
    "\2\374\10\0\1\375\1\51\1\0\1\374\1\0\4\374"+
    "\16\0\1\57\2\u010f\10\57\1\u0110\1\115\1\73\1\u010f"+
    "\1\57\4\u010f\10\57\1\61\6\57\2\u010f\10\57\1\u0110"+
    "\1\57\1\73\1\u010f\1\57\4\u010f\16\57\1\0\2\u0111"+
    "\10\0\1\u0112\1\100\1\0\1\u0111\1\0\4\u0111\10\0"+
    "\1\46\6\0\2\u0111\10\0\1\u0112\2\0\1\u0111\1\0"+
    "\4\u0111\16\0\1\104\2\u0113\10\104\1\u0114\1\140\1\104"+
    "\1\u0113\1\104\4\u0113\10\104\1\110\6\104\2\u0113\10\104"+
    "\1\u0115\2\104\1\u0113\1\104\4\u0113\16\104\1\0\2\u0103"+
    "\10\0\1\u0104\1\51\1\0\1\u0103\1\0\4\u0103\16\0"+
    "\1\57\2\u0116\10\57\1\u0117\1\115\1\73\1\u0116\1\57"+
    "\4\u0116\10\57\1\61\6\57\2\u0116\10\57\1\u0117\1\57"+
    "\1\73\1\u0116\1\57\4\u0116\16\57\1\0\2\u0118\10\0"+
    "\1\u0119\1\100\1\0\1\u0118\1\0\4\u0118\10\0\1\46"+
    "\6\0\2\u0118\10\0\1\u0119\2\0\1\u0118\1\0\4\u0118"+
    "\16\0\1\104\2\u011a\10\104\1\u011b\1\140\1\104\1\u011a"+
    "\1\104\4\u011a\10\104\1\110\6\104\2\u011a\10\104\1\u011c"+
    "\2\104\1\u011a\1\104\4\u011a\16\104\1\0\2\u010a\10\0"+
    "\1\u010b\1\51\1\0\1\u010a\1\0\4\u010a\16\0\1\57"+
    "\2\u011d\10\57\1\u011e\1\115\1\73\1\u011d\1\57\4\u011d"+
    "\10\57\1\61\6\57\2\u011d\10\57\1\u011e\1\57\1\73"+
    "\1\u011d\1\57\4\u011d\16\57\1\0\2\u011f\10\0\1\u0120"+
    "\1\100\1\0\1\u011f\1\0\4\u011f\10\0\1\46\6\0"+
    "\2\u011f\10\0\1\u0120\2\0\1\u011f\1\0\4\u011f\16\0"+
    "\1\104\2\u0121\10\104\1\u0122\1\140\1\104\1\u0121\1\104"+
    "\4\u0121\10\104\1\110\6\104\2\u0121\10\104\1\u0123\2\104"+
    "\1\u0121\1\104\4\u0121\16\104\1\0\2\u0111\10\0\1\u0112"+
    "\1\51\1\0\1\u0111\1\0\4\u0111\16\0\1\57\2\u0124"+
    "\10\57\1\u0125\1\115\1\73\1\u0124\1\57\4\u0124\10\57"+
    "\1\61\6\57\2\u0124\10\57\1\u0125\1\57\1\73\1\u0124"+
    "\1\57\4\u0124\16\57\1\0\2\u0126\10\0\1\u0127\1\100"+
    "\1\0\1\u0126\1\0\4\u0126\10\0\1\46\6\0\2\u0126"+
    "\10\0\1\u0127\2\0\1\u0126\1\0\4\u0126\16\0\1\104"+
    "\2\u0128\10\104\1\u0129\1\140\1\104\1\u0128\1\104\4\u0128"+
    "\10\104\1\110\6\104\2\u0128\10\104\1\u012a\2\104\1\u0128"+
    "\1\104\4\u0128\16\104\1\0\2\u0118\10\0\1\u0119\1\51"+
    "\1\0\1\u0118\1\0\4\u0118\16\0\1\57\2\u012b\10\57"+
    "\1\u012c\1\115\1\73\1\u012b\1\57\4\u012b\10\57\1\61"+
    "\6\57\2\u012b\10\57\1\u012c\1\57\1\73\1\u012b\1\57"+
    "\4\u012b\16\57\1\0\2\u012d\10\0\1\u012e\1\100\1\0"+
    "\1\u012d\1\0\4\u012d\10\0\1\46\6\0\2\u012d\10\0"+
    "\1\u012e\2\0\1\u012d\1\0\4\u012d\16\0\1\104\2\u012f"+
    "\10\104\1\u0130\1\140\1\104\1\u012f\1\104\4\u012f\10\104"+
    "\1\110\6\104\2\u012f\10\104\1\u0131\2\104\1\u012f\1\104"+
    "\4\u012f\16\104\1\0\2\u011f\10\0\1\u0120\1\51\1\0"+
    "\1\u011f\1\0\4\u011f\16\0\1\57\2\u0132\10\57\1\u0133"+
    "\1\115\1\73\1\u0132\1\57\4\u0132\10\57\1\61\6\57"+
    "\2\u0132\10\57\1\u0133\1\57\1\73\1\u0132\1\57\4\u0132"+
    "\16\57\1\0\2\u0134\10\0\1\u0135\1\100\1\0\1\u0134"+
    "\1\0\4\u0134\10\0\1\46\6\0\2\u0134\10\0\1\u0135"+
    "\2\0\1\u0134\1\0\4\u0134\16\0\1\104\2\u0136\10\104"+
    "\1\u0137\1\140\1\104\1\u0136\1\104\4\u0136\10\104\1\110"+
    "\6\104\2\u0136\10\104\1\u0138\2\104\1\u0136\1\104\4\u0136"+
    "\16\104\1\0\2\u0126\10\0\1\u0127\1\51\1\0\1\u0126"+
    "\1\0\4\u0126\16\0\1\57\2\u0139\10\57\1\u013a\1\115"+
    "\1\73\1\u0139\1\57\4\u0139\10\57\1\61\6\57\2\u0139"+
    "\10\57\1\u013a\1\57\1\73\1\u0139\1\57\4\u0139\16\57"+
    "\1\0\2\u013b\10\0\1\u013c\1\100\1\0\1\u013b\1\0"+
    "\4\u013b\10\0\1\46\6\0\2\u013b\10\0\1\u013c\2\0"+
    "\1\u013b\1\0\4\u013b\16\0\1\104\2\u013d\10\104\1\u013e"+
    "\1\140\1\104\1\u013d\1\104\4\u013d\10\104\1\110\6\104"+
    "\2\u013d\10\104\1\u013f\2\104\1\u013d\1\104\4\u013d\16\104"+
    "\1\0\2\u012d\10\0\1\u012e\1\51\1\0\1\u012d\1\0"+
    "\4\u012d\16\0\1\57\2\u0140\10\57\1\u0141\1\115\1\73"+
    "\1\u0140\1\57\4\u0140\10\57\1\61\6\57\2\u0140\10\57"+
    "\1\u0141\1\57\1\73\1\u0140\1\57\4\u0140\16\57\1\0"+
    "\2\u0142\10\0\1\u0143\1\100\1\0\1\u0142\1\0\4\u0142"+
    "\10\0\1\46\6\0\2\u0142\10\0\1\u0143\2\0\1\u0142"+
    "\1\0\4\u0142\16\0\1\104\2\u0144\10\104\1\u0145\1\140"+
    "\1\104\1\u0144\1\104\4\u0144\10\104\1\110\6\104\2\u0144"+
    "\10\104\1\u0146\2\104\1\u0144\1\104\4\u0144\16\104\1\0"+
    "\2\u0134\10\0\1\u0135\1\51\1\0\1\u0134\1\0\4\u0134"+
    "\16\0\1\57\2\u0147\10\57\1\u0148\1\115\1\73\1\u0147"+
    "\1\57\4\u0147\10\57\1\61\6\57\2\u0147\10\57\1\u0148"+
    "\1\57\1\73\1\u0147\1\57\4\u0147\16\57\1\0\2\u0149"+
    "\10\0\1\u014a\1\100\1\0\1\u0149\1\0\4\u0149\10\0"+
    "\1\46\6\0\2\u0149\10\0\1\u014a\2\0\1\u0149\1\0"+
    "\4\u0149\16\0\1\104\2\u014b\10\104\1\u014c\1\140\1\104"+
    "\1\u014b\1\104\4\u014b\10\104\1\110\6\104\2\u014b\10\104"+
    "\1\u014d\2\104\1\u014b\1\104\4\u014b\16\104\1\0\2\u013b"+
    "\10\0\1\u013c\1\51\1\0\1\u013b\1\0\4\u013b\16\0"+
    "\1\57\2\u014e\10\57\1\u014f\1\115\1\73\1\u014e\1\57"+
    "\4\u014e\10\57\1\61\6\57\2\u014e\10\57\1\u014f\1\57"+
    "\1\73\1\u014e\1\57\4\u014e\16\57\1\0\2\u0150\10\0"+
    "\1\u0151\1\100\1\0\1\u0150\1\0\4\u0150\10\0\1\46"+
    "\6\0\2\u0150\10\0\1\u0151\2\0\1\u0150\1\0\4\u0150"+
    "\16\0\1\104\2\u0152\10\104\1\u0153\1\140\1\104\1\u0152"+
    "\1\104\4\u0152\10\104\1\110\6\104\2\u0152\10\104\1\u0154"+
    "\2\104\1\u0152\1\104\4\u0152\16\104\1\0\2\u0142\10\0"+
    "\1\u0143\1\51\1\0\1\u0142\1\0\4\u0142\16\0\1\57"+
    "\2\u0155\10\57\1\u0156\1\115\1\73\1\u0155\1\57\4\u0155"+
    "\10\57\1\61\6\57\2\u0155\10\57\1\u0156\1\57\1\73"+
    "\1\u0155\1\57\4\u0155\16\57\1\0\2\u0157\10\0\1\u0158"+
    "\1\100\1\0\1\u0157\1\0\4\u0157\10\0\1\46\6\0"+
    "\2\u0157\10\0\1\u0158\2\0\1\u0157\1\0\4\u0157\16\0"+
    "\1\104\2\u0159\10\104\1\u015a\1\140\1\104\1\u0159\1\104"+
    "\4\u0159\10\104\1\110\6\104\2\u0159\10\104\1\u015b\2\104"+
    "\1\u0159\1\104\4\u0159\16\104\1\0\2\u0149\10\0\1\u014a"+
    "\1\51\1\0\1\u0149\1\0\4\u0149\16\0\1\57\2\u015c"+
    "\10\57\1\u015d\1\115\1\73\1\u015c\1\57\4\u015c\10\57"+
    "\1\61\6\57\2\u015c\10\57\1\u015d\1\57\1\73\1\u015c"+
    "\1\57\4\u015c\16\57\1\0\2\u015e\10\0\1\u015f\1\100"+
    "\1\0\1\u015e\1\0\4\u015e\10\0\1\46\6\0\2\u015e"+
    "\10\0\1\u015f\2\0\1\u015e\1\0\4\u015e\16\0\1\104"+
    "\2\u0160\10\104\1\u0161\1\140\1\104\1\u0160\1\104\4\u0160"+
    "\10\104\1\110\6\104\2\u0160\10\104\1\u0162\2\104\1\u0160"+
    "\1\104\4\u0160\16\104\1\0\2\u0150\10\0\1\u0151\1\51"+
    "\1\0\1\u0150\1\0\4\u0150\16\0\1\57\2\u0163\10\57"+
    "\1\u0164\1\115\1\73\1\u0163\1\57\4\u0163\10\57\1\61"+
    "\6\57\2\u0163\10\57\1\u0164\1\57\1\73\1\u0163\1\57"+
    "\4\u0163\16\57\1\0\2\u0165\10\0\1\u0166\1\100\1\0"+
    "\1\u0165\1\0\4\u0165\10\0\1\46\6\0\2\u0165\10\0"+
    "\1\u0166\2\0\1\u0165\1\0\4\u0165\16\0\1\104\2\u0167"+
    "\10\104\1\u0168\1\140\1\104\1\u0167\1\104\4\u0167\10\104"+
    "\1\110\6\104\2\u0167\10\104\1\u0169\2\104\1\u0167\1\104"+
    "\4\u0167\16\104\1\0\2\u0157\10\0\1\u0158\1\51\1\0"+
    "\1\u0157\1\0\4\u0157\16\0\1\57\2\u016a\10\57\1\u016b"+
    "\1\115\1\73\1\u016a\1\57\4\u016a\10\57\1\61\6\57"+
    "\2\u016a\10\57\1\u016b\1\57\1\73\1\u016a\1\57\4\u016a"+
    "\16\57\1\0\2\u016c\10\0\1\u016d\1\100\1\0\1\u016c"+
    "\1\0\4\u016c\10\0\1\46\6\0\2\u016c\10\0\1\u016d"+
    "\2\0\1\u016c\1\0\4\u016c\16\0\1\104\2\u016e\10\104"+
    "\1\u016f\1\140\1\104\1\u016e\1\104\4\u016e\10\104\1\110"+
    "\6\104\2\u016e\10\104\1\u0170\2\104\1\u016e\1\104\4\u016e"+
    "\16\104\1\0\2\u015e\10\0\1\u015f\1\51\1\0\1\u015e"+
    "\1\0\4\u015e\16\0\1\57\2\u0171\10\57\1\u0172\1\115"+
    "\1\73\1\u0171\1\57\4\u0171\10\57\1\61\6\57\2\u0171"+
    "\10\57\1\u0172\1\57\1\73\1\u0171\1\57\4\u0171\16\57"+
    "\1\0\2\u0173\10\0\1\u0174\1\100\1\0\1\u0173\1\0"+
    "\4\u0173\10\0\1\46\6\0\2\u0173\10\0\1\u0174\2\0"+
    "\1\u0173\1\0\4\u0173\16\0\1\104\2\u0175\10\104\1\u0176"+
    "\1\140\1\104\1\u0175\1\104\4\u0175\10\104\1\110\6\104"+
    "\2\u0175\10\104\1\u0177\2\104\1\u0175\1\104\4\u0175\16\104"+
    "\1\0\2\u0165\10\0\1\u0166\1\51\1\0\1\u0165\1\0"+
    "\4\u0165\16\0\1\57\2\u0178\10\57\1\u0179\1\115\1\73"+
    "\1\u0178\1\57\4\u0178\10\57\1\61\6\57\2\u0178\10\57"+
    "\1\u0179\1\57\1\73\1\u0178\1\57\4\u0178\16\57\1\0"+
    "\2\u017a\10\0\1\u017b\1\100\1\0\1\u017a\1\0\4\u017a"+
    "\10\0\1\46\6\0\2\u017a\10\0\1\u017b\2\0\1\u017a"+
    "\1\0\4\u017a\16\0\1\104\2\u017c\10\104\1\u017d\1\140"+
    "\1\104\1\u017c\1\104\4\u017c\10\104\1\110\6\104\2\u017c"+
    "\10\104\1\u017e\2\104\1\u017c\1\104\4\u017c\16\104\1\0"+
    "\2\u016c\10\0\1\u016d\1\51\1\0\1\u016c\1\0\4\u016c"+
    "\16\0\1\57\2\u017f\10\57\1\u0180\1\115\1\73\1\u017f"+
    "\1\57\4\u017f\10\57\1\61\6\57\2\u017f\10\57\1\u0180"+
    "\1\57\1\73\1\u017f\1\57\4\u017f\16\57\1\0\2\u0181"+
    "\10\0\1\u0182\1\100\1\0\1\u0181\1\0\4\u0181\10\0"+
    "\1\46\6\0\2\u0181\10\0\1\u0182\2\0\1\u0181\1\0"+
    "\4\u0181\16\0\1\104\2\u0183\10\104\1\u0184\1\140\1\104"+
    "\1\u0183\1\104\4\u0183\10\104\1\110\6\104\2\u0183\10\104"+
    "\1\u0185\2\104\1\u0183\1\104\4\u0183\16\104\1\0\2\u0173"+
    "\10\0\1\u0174\1\51\1\0\1\u0173\1\0\4\u0173\16\0"+
    "\1\57\2\u0186\10\57\1\u0187\1\115\1\73\1\u0186\1\57"+
    "\4\u0186\10\57\1\61\6\57\2\u0186\10\57\1\u0187\1\57"+
    "\1\73\1\u0186\1\57\4\u0186\16\57\1\0\2\u0188\10\0"+
    "\1\u0189\1\100\1\0\1\u0188\1\0\4\u0188\10\0\1\46"+
    "\6\0\2\u0188\10\0\1\u0189\2\0\1\u0188\1\0\4\u0188"+
    "\16\0\1\104\2\u018a\10\104\1\u018b\1\140\1\104\1\u018a"+
    "\1\104\4\u018a\10\104\1\110\6\104\2\u018a\10\104\1\u018c"+
    "\2\104\1\u018a\1\104\4\u018a\16\104\1\0\2\u017a\10\0"+
    "\1\u017b\1\51\1\0\1\u017a\1\0\4\u017a\16\0\1\57"+
    "\2\u018d\10\57\1\u018e\1\115\1\73\1\u018d\1\57\4\u018d"+
    "\10\57\1\61\6\57\2\u018d\10\57\1\u018e\1\57\1\73"+
    "\1\u018d\1\57\4\u018d\16\57\1\0\2\u018f\10\0\1\u0190"+
    "\1\100\1\0\1\u018f\1\0\4\u018f\10\0\1\46\6\0"+
    "\2\u018f\10\0\1\u0190\2\0\1\u018f\1\0\4\u018f\16\0"+
    "\1\104\2\u0191\10\104\1\u0192\1\140\1\104\1\u0191\1\104"+
    "\4\u0191\10\104\1\110\6\104\2\u0191\10\104\1\u0193\2\104"+
    "\1\u0191\1\104\4\u0191\16\104\1\0\2\u0181\10\0\1\u0182"+
    "\1\51\1\0\1\u0181\1\0\4\u0181\16\0\1\57\2\u0194"+
    "\10\57\1\u0195\1\115\1\73\1\u0194\1\57\4\u0194\10\57"+
    "\1\61\6\57\2\u0194\10\57\1\u0195\1\57\1\73\1\u0194"+
    "\1\57\4\u0194\16\57\1\0\2\u0196\10\0\1\u0197\1\100"+
    "\1\0\1\u0196\1\0\4\u0196\10\0\1\46\6\0\2\u0196"+
    "\10\0\1\u0197\2\0\1\u0196\1\0\4\u0196\16\0\1\104"+
    "\2\u0198\10\104\1\u0199\1\140\1\104\1\u0198\1\104\4\u0198"+
    "\10\104\1\110\6\104\2\u0198\10\104\1\u019a\2\104\1\u0198"+
    "\1\104\4\u0198\16\104\1\0\2\u0188\10\0\1\u0189\1\51"+
    "\1\0\1\u0188\1\0\4\u0188\16\0\1\57\2\u019b\10\57"+
    "\1\u019c\1\115\1\73\1\u019b\1\57\4\u019b\10\57\1\61"+
    "\6\57\2\u019b\10\57\1\u019c\1\57\1\73\1\u019b\1\57"+
    "\4\u019b\16\57\1\0\2\u019d\10\0\1\u019e\1\100\1\0"+
    "\1\u019d\1\0\4\u019d\10\0\1\46\6\0\2\u019d\10\0"+
    "\1\u019e\2\0\1\u019d\1\0\4\u019d\16\0\1\104\2\u019f"+
    "\10\104\1\u01a0\1\140\1\104\1\u019f\1\104\4\u019f\10\104"+
    "\1\110\6\104\2\u019f\10\104\1\u01a1\2\104\1\u019f\1\104"+
    "\4\u019f\16\104\1\0\2\u018f\10\0\1\u0190\1\51\1\0"+
    "\1\u018f\1\0\4\u018f\16\0\1\57\2\u01a2\10\57\1\u01a3"+
    "\1\115\1\73\1\u01a2\1\57\4\u01a2\10\57\1\61\6\57"+
    "\2\u01a2\10\57\1\u01a3\1\57\1\73\1\u01a2\1\57\4\u01a2"+
    "\16\57\1\0\2\u01a4\10\0\1\u01a5\1\100\1\0\1\u01a4"+
    "\1\0\4\u01a4\10\0\1\46\6\0\2\u01a4\10\0\1\u01a5"+
    "\2\0\1\u01a4\1\0\4\u01a4\16\0\1\104\2\u01a6\10\104"+
    "\1\u01a7\1\140\1\104\1\u01a6\1\104\4\u01a6\10\104\1\110"+
    "\6\104\2\u01a6\10\104\1\u01a8\2\104\1\u01a6\1\104\4\u01a6"+
    "\16\104\1\0\2\u0196\10\0\1\u0197\1\51\1\0\1\u0196"+
    "\1\0\4\u0196\16\0\1\57\2\u01a9\10\57\1\u01aa\1\115"+
    "\1\73\1\u01a9\1\57\4\u01a9\10\57\1\61\6\57\2\u01a9"+
    "\10\57\1\u01aa\1\57\1\73\1\u01a9\1\57\4\u01a9\16\57"+
    "\1\0\2\u01ab\10\0\1\u01ac\1\100\1\0\1\u01ab\1\0"+
    "\4\u01ab\10\0\1\46\6\0\2\u01ab\10\0\1\u01ac\2\0"+
    "\1\u01ab\1\0\4\u01ab\16\0\1\104\2\u01ad\10\104\1\u01ae"+
    "\1\140\1\104\1\u01ad\1\104\4\u01ad\10\104\1\110\6\104"+
    "\2\u01ad\10\104\1\u01af\2\104\1\u01ad\1\104\4\u01ad\16\104"+
    "\1\0\2\u019d\10\0\1\u019e\1\51\1\0\1\u019d\1\0"+
    "\4\u019d\16\0\1\57\2\u01b0\10\57\1\u01b1\1\115\1\73"+
    "\1\u01b0\1\57\4\u01b0\10\57\1\61\6\57\2\u01b0\10\57"+
    "\1\u01b1\1\57\1\73\1\u01b0\1\57\4\u01b0\16\57\1\0"+
    "\2\u01b2\10\0\1\u01b3\1\100\1\0\1\u01b2\1\0\4\u01b2"+
    "\10\0\1\46\6\0\2\u01b2\10\0\1\u01b3\2\0\1\u01b2"+
    "\1\0\4\u01b2\16\0\1\104\2\u01b4\10\104\1\u01b5\1\140"+
    "\1\104\1\u01b4\1\104\4\u01b4\10\104\1\110\6\104\2\u01b4"+
    "\10\104\1\u01b6\2\104\1\u01b4\1\104\4\u01b4\16\104\1\0"+
    "\2\u01a4\10\0\1\u01a5\1\51\1\0\1\u01a4\1\0\4\u01a4"+
    "\16\0\1\57\2\u01b7\10\57\1\u01b8\1\115\1\73\1\u01b7"+
    "\1\57\4\u01b7\10\57\1\61\6\57\2\u01b7\10\57\1\u01b8"+
    "\1\57\1\73\1\u01b7\1\57\4\u01b7\16\57\1\0\2\u01b9"+
    "\10\0\1\u01ba\1\100\1\0\1\u01b9\1\0\4\u01b9\10\0"+
    "\1\46\6\0\2\u01b9\10\0\1\u01ba\2\0\1\u01b9\1\0"+
    "\4\u01b9\16\0\1\104\2\u01bb\10\104\1\u01bc\1\140\1\104"+
    "\1\u01bb\1\104\4\u01bb\10\104\1\110\6\104\2\u01bb\10\104"+
    "\1\u01bd\2\104\1\u01bb\1\104\4\u01bb\16\104\1\0\2\u01ab"+
    "\10\0\1\u01ac\1\51\1\0\1\u01ab\1\0\4\u01ab\16\0"+
    "\1\57\2\u01be\10\57\1\u01bf\1\115\1\73\1\u01be\1\57"+
    "\4\u01be\10\57\1\61\6\57\2\u01be\10\57\1\u01bf\1\57"+
    "\1\73\1\u01be\1\57\4\u01be\16\57\1\0\2\u01c0\10\0"+
    "\1\u01c1\1\100\1\0\1\u01c0\1\0\4\u01c0\10\0\1\46"+
    "\6\0\2\u01c0\10\0\1\u01c1\2\0\1\u01c0\1\0\4\u01c0"+
    "\16\0\1\104\2\u01c2\10\104\1\u01c3\1\140\1\104\1\u01c2"+
    "\1\104\4\u01c2\10\104\1\110\6\104\2\u01c2\10\104\1\u01c4"+
    "\2\104\1\u01c2\1\104\4\u01c2\16\104\1\0\2\u01b2\10\0"+
    "\1\u01b3\1\51\1\0\1\u01b2\1\0\4\u01b2\16\0\1\57"+
    "\2\u01c5\10\57\1\u01c6\1\115\1\73\1\u01c5\1\57\4\u01c5"+
    "\10\57\1\61\6\57\2\u01c5\10\57\1\u01c6\1\57\1\73"+
    "\1\u01c5\1\57\4\u01c5\16\57\1\0\2\u01c7\10\0\1\u01c8"+
    "\1\100\1\0\1\u01c7\1\0\4\u01c7\10\0\1\46\6\0"+
    "\2\u01c7\10\0\1\u01c8\2\0\1\u01c7\1\0\4\u01c7\16\0"+
    "\1\104\2\u01c9\10\104\1\u01ca\1\140\1\104\1\u01c9\1\104"+
    "\4\u01c9\10\104\1\110\6\104\2\u01c9\10\104\1\u01cb\2\104"+
    "\1\u01c9\1\104\4\u01c9\16\104\1\0\2\u01b9\10\0\1\u01ba"+
    "\1\51\1\0\1\u01b9\1\0\4\u01b9\16\0\1\57\2\u01cc"+
    "\10\57\1\u01cd\1\115\1\73\1\u01cc\1\57\4\u01cc\10\57"+
    "\1\61\6\57\2\u01cc\10\57\1\u01cd\1\57\1\73\1\u01cc"+
    "\1\57\4\u01cc\16\57\1\0\2\u01ce\10\0\1\u01cf\1\100"+
    "\1\0\1\u01ce\1\0\4\u01ce\10\0\1\46\6\0\2\u01ce"+
    "\10\0\1\u01cf\2\0\1\u01ce\1\0\4\u01ce\16\0\1\104"+
    "\2\u01d0\10\104\1\u01d1\1\140\1\104\1\u01d0\1\104\4\u01d0"+
    "\10\104\1\110\6\104\2\u01d0\10\104\1\u01d2\2\104\1\u01d0"+
    "\1\104\4\u01d0\16\104\1\0\2\u01c0\10\0\1\u01c1\1\51"+
    "\1\0\1\u01c0\1\0\4\u01c0\16\0\1\57\2\u01d3\10\57"+
    "\1\u01d4\1\115\1\73\1\u01d3\1\57\4\u01d3\10\57\1\61"+
    "\6\57\2\u01d3\10\57\1\u01d4\1\57\1\73\1\u01d3\1\57"+
    "\4\u01d3\16\57\1\0\2\u01d5\10\0\1\u01d6\1\100\1\0"+
    "\1\u01d5\1\0\4\u01d5\10\0\1\46\6\0\2\u01d5\10\0"+
    "\1\u01d6\2\0\1\u01d5\1\0\4\u01d5\16\0\1\104\2\u01d7"+
    "\10\104\1\u01d8\1\140\1\104\1\u01d7\1\104\4\u01d7\10\104"+
    "\1\110\6\104\2\u01d7\10\104\1\u01d9\2\104\1\u01d7\1\104"+
    "\4\u01d7\16\104\1\0\2\u01c7\10\0\1\u01c8\1\51\1\0"+
    "\1\u01c7\1\0\4\u01c7\16\0\1\57\2\u01da\10\57\1\u01db"+
    "\1\115\1\73\1\u01da\1\57\4\u01da\10\57\1\61\6\57"+
    "\2\u01da\10\57\1\u01db\1\57\1\73\1\u01da\1\57\4\u01da"+
    "\16\57\1\0\2\u01dc\10\0\1\u01dd\1\100\1\0\1\u01dc"+
    "\1\0\4\u01dc\10\0\1\46\6\0\2\u01dc\10\0\1\u01dd"+
    "\2\0\1\u01dc\1\0\4\u01dc\16\0\1\104\2\u01de\10\104"+
    "\1\u01df\1\140\1\104\1\u01de\1\104\4\u01de\10\104\1\110"+
    "\6\104\2\u01de\10\104\1\u01e0\2\104\1\u01de\1\104\4\u01de"+
    "\16\104\1\0\2\u01ce\10\0\1\u01cf\1\51\1\0\1\u01ce"+
    "\1\0\4\u01ce\16\0\1\57\2\u01e1\10\57\1\u01e2\1\115"+
    "\1\73\1\u01e1\1\57\4\u01e1\10\57\1\61\6\57\2\u01e1"+
    "\10\57\1\u01e2\1\57\1\73\1\u01e1\1\57\4\u01e1\16\57"+
    "\1\0\2\u01e3\10\0\1\u01e4\1\100\1\0\1\u01e3\1\0"+
    "\4\u01e3\10\0\1\46\6\0\2\u01e3\10\0\1\u01e4\2\0"+
    "\1\u01e3\1\0\4\u01e3\16\0\1\104\2\u01e5\10\104\1\u01e6"+
    "\1\140\1\104\1\u01e5\1\104\4\u01e5\10\104\1\110\6\104"+
    "\2\u01e5\10\104\1\u01e7\2\104\1\u01e5\1\104\4\u01e5\16\104"+
    "\1\0\2\u01d5\10\0\1\u01d6\1\51\1\0\1\u01d5\1\0"+
    "\4\u01d5\16\0\1\57\2\u01e8\10\57\1\u01e9\1\115\1\73"+
    "\1\u01e8\1\57\4\u01e8\10\57\1\61\6\57\2\u01e8\10\57"+
    "\1\u01e9\1\57\1\73\1\u01e8\1\57\4\u01e8\16\57\1\0"+
    "\2\u01ea\10\0\1\u01eb\1\100\1\0\1\u01ea\1\0\4\u01ea"+
    "\10\0\1\46\6\0\2\u01ea\10\0\1\u01eb\2\0\1\u01ea"+
    "\1\0\4\u01ea\16\0\1\104\2\u01ec\10\104\1\u01ed\1\140"+
    "\1\104\1\u01ec\1\104\4\u01ec\10\104\1\110\6\104\2\u01ec"+
    "\10\104\1\u01ee\2\104\1\u01ec\1\104\4\u01ec\16\104\1\0"+
    "\2\u01dc\10\0\1\u01dd\1\51\1\0\1\u01dc\1\0\4\u01dc"+
    "\16\0\1\57\2\u01ef\10\57\1\u01f0\1\115\1\73\1\u01ef"+
    "\1\57\4\u01ef\10\57\1\61\6\57\2\u01ef\10\57\1\u01f0"+
    "\1\57\1\73\1\u01ef\1\57\4\u01ef\16\57\1\0\2\u01f1"+
    "\10\0\1\u01f2\1\100\1\0\1\u01f1\1\0\4\u01f1\10\0"+
    "\1\46\6\0\2\u01f1\10\0\1\u01f2\2\0\1\u01f1\1\0"+
    "\4\u01f1\16\0\1\104\2\u01f3\10\104\1\u01f4\1\140\1\104"+
    "\1\u01f3\1\104\4\u01f3\10\104\1\110\6\104\2\u01f3\10\104"+
    "\1\u01f5\2\104\1\u01f3\1\104\4\u01f3\16\104\1\0\2\u01e3"+
    "\10\0\1\u01e4\1\51\1\0\1\u01e3\1\0\4\u01e3\16\0"+
    "\1\57\2\u01f6\10\57\1\u01f7\1\115\1\73\1\u01f6\1\57"+
    "\4\u01f6\10\57\1\61\6\57\2\u01f6\10\57\1\u01f7\1\57"+
    "\1\73\1\u01f6\1\57\4\u01f6\16\57\1\0\2\u01f8\10\0"+
    "\1\u01f9\1\100\1\0\1\u01f8\1\0\4\u01f8\10\0\1\46"+
    "\6\0\2\u01f8\10\0\1\u01f9\2\0\1\u01f8\1\0\4\u01f8"+
    "\16\0\1\104\2\u01fa\10\104\1\u01fb\1\140\1\104\1\u01fa"+
    "\1\104\4\u01fa\10\104\1\110\6\104\2\u01fa\10\104\1\u01fc"+
    "\2\104\1\u01fa\1\104\4\u01fa\16\104\1\0\2\u01ea\10\0"+
    "\1\u01eb\1\51\1\0\1\u01ea\1\0\4\u01ea\16\0\1\57"+
    "\2\u01fd\10\57\1\u01fe\1\115\1\73\1\u01fd\1\57\4\u01fd"+
    "\10\57\1\61\6\57\2\u01fd\10\57\1\u01fe\1\57\1\73"+
    "\1\u01fd\1\57\4\u01fd\16\57\1\0\2\u01ff\10\0\1\u0200"+
    "\1\100\1\0\1\u01ff\1\0\4\u01ff\10\0\1\46\6\0"+
    "\2\u01ff\10\0\1\u0200\2\0\1\u01ff\1\0\4\u01ff\16\0"+
    "\1\104\2\u0201\10\104\1\u0202\1\140\1\104\1\u0201\1\104"+
    "\4\u0201\10\104\1\110\6\104\2\u0201\10\104\1\u0203\2\104"+
    "\1\u0201\1\104\4\u0201\16\104\1\0\2\u01f1\10\0\1\u01f2"+
    "\1\51\1\0\1\u01f1\1\0\4\u01f1\16\0\1\57\2\u0204"+
    "\10\57\1\u0205\1\115\1\73\1\u0204\1\57\4\u0204\10\57"+
    "\1\61\6\57\2\u0204\10\57\1\u0205\1\57\1\73\1\u0204"+
    "\1\57\4\u0204\16\57\1\0\2\u0206\10\0\1\u0207\1\100"+
    "\1\0\1\u0206\1\0\4\u0206\10\0\1\46\6\0\2\u0206"+
    "\10\0\1\u0207\2\0\1\u0206\1\0\4\u0206\16\0\1\104"+
    "\2\u0208\10\104\1\u0209\1\140\1\104\1\u0208\1\104\4\u0208"+
    "\10\104\1\110\6\104\2\u0208\10\104\1\u020a\2\104\1\u0208"+
    "\1\104\4\u0208\16\104\1\0\2\u01f8\10\0\1\u01f9\1\51"+
    "\1\0\1\u01f8\1\0\4\u01f8\16\0\1\57\2\u020b\10\57"+
    "\1\u020c\1\115\1\73\1\u020b\1\57\4\u020b\10\57\1\61"+
    "\6\57\2\u020b\10\57\1\u020c\1\57\1\73\1\u020b\1\57"+
    "\4\u020b\16\57\1\0\2\u020d\10\0\1\u020e\1\100\1\0"+
    "\1\u020d\1\0\4\u020d\10\0\1\46\6\0\2\u020d\10\0"+
    "\1\u020e\2\0\1\u020d\1\0\4\u020d\16\0\1\104\2\u020f"+
    "\10\104\1\u0210\1\140\1\104\1\u020f\1\104\4\u020f\10\104"+
    "\1\110\6\104\2\u020f\10\104\1\u0211\2\104\1\u020f\1\104"+
    "\4\u020f\16\104\1\0\2\u01ff\10\0\1\u0200\1\51\1\0"+
    "\1\u01ff\1\0\4\u01ff\16\0\1\57\2\u0212\10\57\1\u0213"+
    "\1\115\1\73\1\u0212\1\57\4\u0212\10\57\1\61\6\57"+
    "\2\u0212\10\57\1\u0213\1\57\1\73\1\u0212\1\57\4\u0212"+
    "\16\57\1\0\2\u0214\10\0\1\u0215\1\100\1\0\1\u0214"+
    "\1\0\4\u0214\10\0\1\46\6\0\2\u0214\10\0\1\u0215"+
    "\2\0\1\u0214\1\0\4\u0214\16\0\1\104\2\u0216\10\104"+
    "\1\u0217\1\140\1\104\1\u0216\1\104\4\u0216\10\104\1\110"+
    "\6\104\2\u0216\10\104\1\u0218\2\104\1\u0216\1\104\4\u0216"+
    "\16\104\1\0\2\u0206\10\0\1\u0207\1\51\1\0\1\u0206"+
    "\1\0\4\u0206\16\0\1\57\2\u0219\10\57\1\u021a\1\115"+
    "\1\73\1\u0219\1\57\4\u0219\10\57\1\61\6\57\2\u0219"+
    "\10\57\1\u021a\1\57\1\73\1\u0219\1\57\4\u0219\16\57"+
    "\1\0\2\u021b\11\0\1\100\1\0\1\u021b\1\0\4\u021b"+
    "\10\0\1\46\6\0\2\u021b\13\0\1\u021b\1\0\4\u021b"+
    "\16\0\1\104\2\u021c\10\104\1\u021d\1\140\1\104\1\u021c"+
    "\1\104\4\u021c\10\104\1\110\6\104\2\u021c\10\104\1\u021e"+
    "\2\104\1\u021c\1\104\4\u021c\16\104\1\0\2\u020d\10\0"+
    "\1\u020e\1\51\1\0\1\u020d\1\0\4\u020d\16\0\1\57"+
    "\2\u021f\11\57\1\115\1\73\1\u021f\1\57\4\u021f\10\57"+
    "\1\61\6\57\2\u021f\12\57\1\73\1\u021f\1\57\4\u021f"+
    "\16\57\14\0\1\100\17\0\1\46\5\0\1\104\2\u0220"+
    "\10\104\1\u0221\1\140\1\104\1\u0220\1\104\4\u0220\10\104"+
    "\1\110\6\104\2\u0220\10\104\1\u0222\2\104\1\u0220\1\104"+
    "\4\u0220\16\104\1\0\2\u0214\10\0\1\u0215\1\51\1\0"+
    "\1\u0214\1\0\4\u0214\16\0\14\57\1\115\1\73\16\57"+
    "\1\61\5\57\1\104\2\u0223\10\104\1\123\1\140\1\104"+
    "\1\u0223\1\104\4\u0223\10\104\1\110\6\104\2\u0223\10\104"+
    "\1\66\2\104\1\u0223\1\104\4\u0223\16\104\1\0\2\u021b"+
    "\11\0\1\51\1\0\1\u021b\1\0\4\u021b\16\0\13\104"+
    "\1\123\1\140\17\104\1\110\5\104";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17816];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\2\1\2\11\3\1\1\11\2\1\3\11"+
    "\1\1\2\11\3\1\3\0\1\11\1\1\7\0\1\1"+
    "\3\0\1\11\26\0\1\11\2\0\1\11\3\0\1\1"+
    "\5\0\1\1\22\0\1\1\20\0\1\1\2\0\1\1"+
    "\74\0\1\1\u0172\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[547];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  private static class Token implements MarkdownTokenTypes {}

  private Stack<Integer> stateStack = new Stack<Integer>();

  private boolean isHeader = false;

  private ParseDelimited parseDelimited = new ParseDelimited();

  private static class ParseDelimited {
    char exitChar = 0;
    IElementType returnType = null;
    boolean inlinesAllowed = true;
  }

  private static class LinkDef {
    boolean wasUrl;
    boolean wasParen;
  }

  private static class HtmlHelper {
    private static final String BLOCK_TAGS_STRING =
            "article, header, aside, hgroup, blockquote, hr, iframe, body, li, map, button, " +
            "object, canvas, ol, caption, output, col, p, colgroup, pre, dd, progress, div, " +
            "section, dl, table, td, dt, tbody, embed, textarea, fieldset, tfoot, figcaption, " +
            "th, figure, thead, footer, footer, tr, form, ul, h1, h2, h3, h4, h5, h6, video, " +
            "script, style";

    static final Set<String> BLOCK_TAGS = getBlockTagsSet();

    private static Set<String> getBlockTagsSet() {
      Set<String> result = new HashSet<String>();
      String[] tags = BLOCK_TAGS_STRING.split(", ");
      for (String tag : tags) {
        result.add(tag);
      }
      return result;
    }
  }

  private static IElementType getDelimiterTokenType(char c) {
    switch (c) {
      case '"': return Token.DOUBLE_QUOTE;
      case '\'': return Token.SINGLE_QUOTE;
      case '(': return Token.LPAREN;
      case ')': return Token.RPAREN;
      case '[': return Token.LBRACKET;
      case ']': return Token.RBRACKET;
      case '<': return Token.LT;
      case '>': return Token.GT;
      default: return Token.BAD_CHARACTER;
    }
  }

  private IElementType parseDelimited(IElementType contentsType, boolean allowInlines) {
    char first = yycharat(0);
    char last = yycharat(yylength() - 1);

    stateStack.push(yystate());

    parseDelimited.exitChar = last;
    parseDelimited.returnType = contentsType;
//    parseDelimited.inlinesAllowed = allowInlines;
    parseDelimited.inlinesAllowed = true;

    yybegin(PARSE_DELIMITED);

    yypushback(yylength() - 1);
    return getDelimiterTokenType(first);
  }

  private void processEol() {
    int newlinePos = 1;
    while (newlinePos < yylength() && yycharat(newlinePos) != '\n') {
      newlinePos++;
    }

    // there is always one at 0 so that means there are two at least
    if (newlinePos != yylength()) {
      yypushback(yylength() - newlinePos);
      return;
    }

    yybegin(YYINITIAL);
    yypushback(yylength() - 1);

    isHeader = false;
  }

  private void popState() {
    if (stateStack.isEmpty()) {
      yybegin(AFTER_LINE_START);
    }
    else {
      yybegin(stateStack.pop());
    }
  }

  private void resetState() {
    yypushback(yylength());

    popState();
  }

  private String getTagName() {
    if (yylength() > 1 && yycharat(1) == '/') {
      return yytext().toString().substring(2, yylength() - 1).trim();
    }
    return yytext().toString().substring(1);
  }

  private boolean isBlockTag(String tagName) {
    return HtmlHelper.BLOCK_TAGS.contains(tagName.toLowerCase());
  }

  private boolean canInline() {
    return yystate() == AFTER_LINE_START || yystate() == PARSE_DELIMITED && parseDelimited.inlinesAllowed;
  }

  private IElementType getReturnGeneralized(IElementType defaultType) {
    if (canInline()) {
      return defaultType;
    }
    return parseDelimited.returnType;
  }

  private int countChars(CharSequence s, char c) {
    int result = 0;
    for (int i = 0; i < s.length(); ++i) {
      if (s.charAt(i) == c)
        result++;
    }
    return result;
  }



  public _GFMLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _GFMLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 94) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 16: 
          { return parseDelimited(Token.EMAIL_AUTOLINK, false);
          }
        case 18: break;
        case 8: 
          { return Token.COLON;
          }
        case 19: break;
        case 10: 
          { if (canInline()) {
      return Token.BACKTICK;
    }
    return parseDelimited.returnType;
          }
        case 20: break;
        case 4: 
          { return Token.WHITE_SPACE;
          }
        case 21: break;
        case 17: 
          { return parseDelimited(Token.AUTOLINK, false);
          }
        case 22: break;
        case 7: 
          { return Token.EXCLAMATION_MARK;
          }
        case 23: break;
        case 14: 
          { return getReturnGeneralized(Token.ESCAPED_BACKTICKS);
          }
        case 24: break;
        case 13: 
          { return getReturnGeneralized(Token.TEXT);
          }
        case 25: break;
        case 12: 
          { if (yycharat(0) == parseDelimited.exitChar) {
      yybegin(stateStack.pop());
      return getDelimiterTokenType(yycharat(0));
    }
    return parseDelimited.returnType;
          }
        case 26: break;
        case 6: 
          { return getDelimiterTokenType(yycharat(0));
          }
        case 27: break;
        case 2: 
          { return Token.BLOCK_QUOTE;
          }
        case 28: break;
        case 9: 
          { return getReturnGeneralized(Token.EMPH);
          }
        case 29: break;
        case 15: 
          { return Token.HTML_TAG;
          }
        case 30: break;
        case 1: 
          { resetState();
          }
        case 31: break;
        case 11: 
          { return getReturnGeneralized(GFMTokenTypes.TILDE);
          }
        case 32: break;
        case 3: 
          { return Token.TEXT;
          }
        case 33: break;
        case 5: 
          { int lastSpaces = yytext().toString().indexOf("\n");
    if (lastSpaces >= 2) {
      yypushback(yylength() - lastSpaces);
      return Token.HARD_LINE_BREAK;
    }
    else if (lastSpaces > 0) {
      yypushback(yylength() - lastSpaces);
      return Token.WHITE_SPACE;
    }

    processEol();
    return Token.EOL;
          }
        case 34: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
